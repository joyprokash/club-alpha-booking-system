{"file_contents":{"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { generateTimeSlots, minutesToTime, parseTimeToMinutes, GRID_START_TIME, GRID_END_TIME, SLOT_DURATION } from \"@/lib/time-utils\";\nimport { Clock, DollarSign, CheckCircle2 } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\nconst bookingFormSchema = z.object({\n  serviceId: z.string().min(1, \"Please select a service\"),\n  startTime: z.string().min(1, \"Please select a time slot\"),\n  notes: z.string().optional(),\n});\n\ntype BookingFormData = z.infer<typeof bookingFormSchema>;\n\ninterface BookingFormProps {\n  hostessId: string;\n  selectedDate: Date | undefined;\n  onCancel: () => void;\n  onSuccess: () => void;\n}\n\nexport function BookingForm({ hostessId, selectedDate, onCancel, onSuccess }: BookingFormProps) {\n  const { toast } = useToast();\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n\n  const { data: services } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const sortedServices = services?.slice().sort((a, b) => a.durationMin - b.durationMin) || [];\n\n  // Fetch available slots for the selected date\n  const { data: availability } = useQuery({\n    queryKey: [\"/api/bookings/availability\", hostessId, selectedDate ? format(selectedDate, \"yyyy-MM-dd\") : \"\"],\n    queryFn: async () => {\n      if (!selectedDate) return { bookedSlots: [] };\n      \n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n\n      const url = `/api/bookings/availability?hostessId=${hostessId}&date=${format(selectedDate, \"yyyy-MM-dd\")}`;\n      const res = await fetch(url, { headers, credentials: \"include\" });\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${await res.text()}`);\n      }\n      \n      return await res.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      if (!selectedDate || !selectedService) return;\n      \n      const startMinutes = parseTimeToMinutes(data.startTime);\n      const endMinutes = startMinutes + selectedService.durationMin;\n\n      return apiRequest(\"POST\", \"/api/bookings\", {\n        hostessId,\n        serviceId: data.serviceId,\n        date: format(selectedDate, \"yyyy-MM-dd\"),\n        startTime: startMinutes,\n        endTime: endMinutes,\n        notes: data.notes || null,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/bookings/my\"] });\n      toast({\n        title: \"Booking created\",\n        description: \"Your appointment has been scheduled successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Booking failed\",\n        description: error.message || \"Could not create booking\",\n      });\n    },\n  });\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      serviceId: \"\",\n      startTime: \"\",\n      notes: \"\",\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    createBookingMutation.mutate(data);\n  };\n\n  const availableSlots = generateTimeSlots(GRID_START_TIME, GRID_END_TIME, SLOT_DURATION);\n  const bookedSlots = availability?.bookedSlots || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Complete Your Booking</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            {/* Step 1: Service Selection */}\n            <FormField\n              control={form.control}\n              name=\"serviceId\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold text-sm\">\n                      1\n                    </div>\n                    <FormLabel className=\"text-lg font-semibold m-0\">Choose Your Service</FormLabel>\n                  </div>\n                  \n                  <FormControl>\n                    <RadioGroup\n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        const service = sortedServices.find(s => s.id === value);\n                        setSelectedService(service || null);\n                      }}\n                      value={field.value}\n                      className=\"grid grid-cols-1 md:grid-cols-2 gap-3\"\n                    >\n                      {sortedServices.map((service) => {\n                        const isSelected = field.value === service.id;\n                        return (\n                          <div key={service.id} className=\"relative\">\n                            <RadioGroupItem\n                              value={service.id}\n                              id={`service-${service.id}`}\n                              className=\"peer sr-only\"\n                              data-testid={`radio-service-${service.id}`}\n                            />\n                            <Label\n                              htmlFor={`service-${service.id}`}\n                              className=\"cursor-pointer block peer-focus-visible:ring-2 peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2 rounded-md\"\n                              data-testid={`service-card-${service.id}`}\n                            >\n                              <Card\n                                className={`transition-all hover-elevate active-elevate-2 ${\n                                  isSelected \n                                    ? 'border-primary border-2 bg-primary/5' \n                                    : ''\n                                }`}\n                              >\n                                <CardContent className=\"p-4\">\n                                  <div className=\"flex items-start justify-between gap-2\">\n                                    <div className=\"flex-1 min-w-0\">\n                                      <h4 className=\"font-semibold text-base mb-2 flex items-center gap-2\">\n                                        {service.name}\n                                        {isSelected && (\n                                          <CheckCircle2 className=\"h-4 w-4 text-primary flex-shrink-0\" />\n                                        )}\n                                      </h4>\n                                      <div className=\"flex flex-col gap-1.5\">\n                                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                                          <Clock className=\"h-4 w-4 flex-shrink-0\" />\n                                          <span className=\"font-mono\">{service.durationMin} minutes</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-2\">\n                                          <DollarSign className=\"h-4 w-4 flex-shrink-0 text-primary\" />\n                                          <span className=\"text-lg font-bold text-primary\">\n                                            ${(service.priceCents / 100).toFixed(2)}\n                                          </span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            </Label>\n                          </div>\n                        );\n                      })}\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Step 2: Time Slot Selection */}\n            <FormField\n              control={form.control}\n              name=\"startTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className={`flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${\n                      selectedService \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-muted-foreground'\n                    }`}>\n                      2\n                    </div>\n                    <FormLabel className=\"text-lg font-semibold m-0\">Select a Time</FormLabel>\n                    {selectedService && (\n                      <Badge variant=\"secondary\" className=\"ml-auto\">\n                        {selectedService.durationMin} min session\n                      </Badge>\n                    )}\n                  </div>\n\n                  {!selectedService ? (\n                    <div className=\"p-8 text-center border-2 border-dashed rounded-lg bg-muted/20\">\n                      <p className=\"text-muted-foreground\">\n                        Please select a service first to view available time slots\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-4 md:grid-cols-6 gap-2\">\n                      {availableSlots.map((slot) => {\n                        const timeStr = minutesToTime(slot);\n                        const isBooked = bookedSlots.includes(slot);\n                        const isSelected = field.value === timeStr;\n\n                        return (\n                          <Button\n                            key={slot}\n                            type=\"button\"\n                            variant={isSelected ? \"default\" : \"outline\"}\n                            disabled={isBooked}\n                            onClick={() => field.onChange(timeStr)}\n                            className=\"font-mono\"\n                            data-testid={`slot-${timeStr}`}\n                          >\n                            {timeStr}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Step 3: Notes (Optional) */}\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <div className={`flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${\n                      field.value \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-muted-foreground'\n                    }`}>\n                      3\n                    </div>\n                    <FormLabel className=\"text-lg font-semibold m-0\">\n                      Add Notes <span className=\"text-sm font-normal text-muted-foreground\">(Optional)</span>\n                    </FormLabel>\n                  </div>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Any special requests or preferences...\"\n                      data-testid=\"input-notes\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={createBookingMutation.isPending}\n                data-testid=\"button-confirm-booking\"\n              >\n                {createBookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13168},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { format, addDays } from \"date-fns\";\nimport { toZonedTime } from \"date-fns-tz\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireRole, generateToken, errorHandler, type AuthRequest } from \"./middleware\";\nimport { hasTimeConflict, getDayOfWeek, parseTimeToMinutes, minutesToTime, getCurrentDateToronto } from \"../client/src/lib/time-utils\";\nimport { insertUserSchema, insertHostessSchema, insertServiceSchema, insertBookingSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(express.json());\n\n  // Configure multer for file uploads\n  const uploadStorage = multer.diskStorage({\n    destination: async (req, file, cb) => {\n      const uploadDir = path.join(process.cwd(), \"attached_assets\", \"hostess-photos\");\n      try {\n        await fs.mkdir(uploadDir, { recursive: true });\n        cb(null, uploadDir);\n      } catch (error: any) {\n        cb(error, uploadDir);\n      }\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1E9);\n      const ext = path.extname(file.originalname);\n      cb(null, `hostess-${uniqueSuffix}${ext}`);\n    }\n  });\n\n  const upload = multer({\n    storage: uploadStorage,\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedMimes = [\"image/jpeg\", \"image/png\", \"image/webp\", \"image/gif\"];\n      if (allowedMimes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error(\"Invalid file type. Only JPEG, PNG, WebP, and GIF are allowed.\"));\n      }\n    }\n  });\n\n  // Rate limiters\n  const authLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 5,\n    message: { error: { code: \"RATE_LIMIT\", message: \"Too many attempts, please try again later\" } },\n    validate: { trustProxy: false },\n  });\n\n  const bookingLimiter = rateLimit({\n    windowMs: 60 * 1000,\n    max: 10,\n    message: { error: { code: \"RATE_LIMIT\", message: \"Too many booking requests\" } },\n    validate: { trustProxy: false },\n  });\n\n  // ==================== AUTH ENDPOINTS ====================\n  \n  // Register (CLIENT only)\n  app.post(\"/api/auth/register\", authLimiter, async (req, res, next) => {\n    try {\n      const { email, password } = insertUserSchema.omit({ passwordHash: true, role: true }).extend({\n        password: z.string().min(8),\n      }).parse(req.body);\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ error: { code: \"CONFLICT\", message: \"User already exists\" } });\n      }\n\n      const passwordHash = await bcrypt.hash(password, 10);\n      const username = email.split('@')[0]; // Extract username from email\n      const user = await storage.createUser({\n        username,\n        email,\n        passwordHash,\n        role: \"CLIENT\",\n        forcePasswordReset: false,\n      });\n\n      const token = generateToken(user.id);\n      res.json({ token, user: { ...user, passwordHash: undefined } });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Login\n  app.post(\"/api/auth/login\", authLimiter, async (req, res, next) => {\n    try {\n      const { username, password } = z.object({\n        username: z.string().min(1),\n        password: z.string(),\n      }).parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Invalid credentials\" } });\n      }\n\n      // Check if user is banned\n      if (user.banned) {\n        return res.status(403).json({ error: { code: \"FORBIDDEN\", message: \"Account has been suspended. Please contact support.\" } });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Invalid credentials\" } });\n      }\n\n      const token = generateToken(user.id);\n      const userResponse = { ...user, passwordHash: undefined };\n\n      if (user.forcePasswordReset) {\n        return res.json({ token, user: userResponse, requiresPasswordReset: true });\n      }\n\n      res.json({ token, user: userResponse });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reset Password\n  app.post(\"/api/auth/reset-password\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { oldPassword, newPassword } = z.object({\n        oldPassword: z.string(),\n        newPassword: z.string().min(8),\n      }).parse(req.body);\n\n      if (!req.user) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n      }\n\n      const validPassword = await bcrypt.compare(oldPassword, req.user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Invalid current password\" } });\n      }\n\n      const passwordHash = await bcrypt.hash(newPassword, 10);\n      const updated = await storage.updateUser(req.user.id, { passwordHash, forcePasswordReset: false });\n\n      res.json({ user: { ...updated, passwordHash: undefined } });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", authenticateToken, async (req: AuthRequest, res) => {\n    if (!req.user) {\n      return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n    }\n    res.json({ ...req.user, passwordHash: undefined });\n  });\n\n  // Alias for /api/auth/me (matches minimal endpoint map spec)\n  app.get(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    if (!req.user) {\n      return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n    }\n    res.json({ ...req.user, passwordHash: undefined });\n  });\n\n  // Logout (client-side token removal)\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.json({ success: true });\n  });\n\n  // ==================== HOSTESS ENDPOINTS ====================\n  \n  // Get all hostesses\n  app.get(\"/api/hostesses\", async (req, res, next) => {\n    try {\n      const { location, q } = req.query;\n      const hostesses = await storage.getHostesses(location as string);\n      \n      let filtered = hostesses;\n      if (q) {\n        filtered = hostesses.filter(h => \n          h.displayName.toLowerCase().includes((q as string).toLowerCase())\n        );\n      }\n\n      res.json(filtered);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get hostess by slug\n  app.get(\"/api/hostesses/:slug\", async (req, res, next) => {\n    try {\n      const { slug } = req.params;\n      const hostess = await storage.getHostessBySlug(slug);\n      \n      if (!hostess) {\n        return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"Hostess not found\" } });\n      }\n\n      const withSchedule = await storage.getHostessWithSchedule(hostess.id);\n      res.json(withSchedule);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Create hostess (admin only)\n  app.post(\"/api/hostesses\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const schema = insertHostessSchema.extend({\n        email: z.string().email(),\n        password: z.string().min(8),\n      });\n      const { email, password, ...hostessData } = schema.parse(req.body);\n      \n      // Check for duplicate email first\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ \n          error: { \n            code: \"DUPLICATE_EMAIL\", \n            message: `A user with email ${email} already exists` \n          } \n        });\n      }\n\n      // Create the STAFF user\n      const passwordHash = await bcrypt.hash(password, 10);\n      const username = email.split('@')[0]; // Extract username from email\n      let user;\n      try {\n        user = await storage.createUser({\n          username,\n          email,\n          passwordHash,\n          role: \"STAFF\",\n        });\n      } catch (error) {\n        // Handle unique constraint violation on email (case-insensitive)\n        if (error instanceof Error && error.message.toLowerCase().includes('unique')) {\n          return res.status(409).json({ \n            error: { \n              code: \"DUPLICATE_EMAIL\", \n              message: `A user with email ${email} already exists` \n            } \n          });\n        }\n        throw error;\n      }\n\n      // Create the hostess linked to the user (with rollback on failure)\n      let hostess;\n      try {\n        hostess = await storage.createHostess({\n          ...hostessData,\n          userId: user.id,\n        });\n      } catch (error) {\n        // Rollback: delete the user if hostess creation fails\n        await storage.deleteUser(user.id);\n        throw error;\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"hostess\",\n        entityId: hostess.id,\n        meta: { email, displayName: hostessData.displayName },\n      });\n\n      res.json(hostess);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update hostess (admin/reception)\n  app.patch(\"/api/hostesses/:id\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const data = z.object({\n        specialties: z.array(z.string()).optional(),\n        active: z.boolean().optional(),\n      }).parse(req.body);\n\n      const hostess = await storage.updateHostess(id, data);\n\n      if (!hostess) {\n        return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"Hostess not found\" } });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"hostess\",\n        entityId: id,\n        meta: { data },\n      });\n\n      res.json(hostess);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Upload hostess photo (admin/reception)\n  app.post(\"/api/hostesses/:id/photo\", \n    authenticateToken, \n    requireRole(\"ADMIN\", \"RECEPTION\"), \n    upload.single(\"photo\"),\n    async (req: AuthRequest, res, next) => {\n      try {\n        const { id } = req.params;\n        \n        if (!req.file) {\n          return res.status(400).json({ error: { code: \"BAD_REQUEST\", message: \"No file uploaded\" } });\n        }\n\n        // Check if hostess exists before updating\n        const existingHostess = await storage.getHostessById(id);\n        if (!existingHostess) {\n          // Clean up uploaded file if hostess doesn't exist\n          await fs.unlink(req.file.path).catch(() => {});\n          return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"Hostess not found\" } });\n        }\n\n        // Construct public URL for the photo\n        const photoUrl = `/api/assets/hostess-photos/${req.file.filename}`;\n\n        // Update hostess with new photo URL\n        const hostess = await storage.updateHostess(id, { photoUrl });\n\n        // Verify update succeeded\n        if (!hostess) {\n          await fs.unlink(req.file.path).catch(() => {});\n          return res.status(500).json({ error: { code: \"INTERNAL_ERROR\", message: \"Failed to update hostess\" } });\n        }\n\n        await storage.createAuditLog({\n          userId: req.user?.id,\n          action: \"UPDATE\",\n          entity: \"hostess\",\n          entityId: id,\n          meta: { photoUrl },\n        });\n\n        res.json({ photoUrl, hostess });\n      } catch (error) {\n        // Clean up uploaded file if database update fails\n        if (req.file) {\n          await fs.unlink(req.file.path).catch(() => {});\n        }\n        next(error);\n      }\n    }\n  );\n\n  // Serve hostess photos\n  app.use(\"/api/assets/hostess-photos\", express.static(path.join(process.cwd(), \"attached_assets\", \"hostess-photos\")));\n\n  // Serve Open Graph logo\n  app.use(\"/api/assets\", express.static(path.join(process.cwd(), \"attached_assets\")));\n\n  // ==================== SERVICE ENDPOINTS ====================\n  \n  // Get all services\n  app.get(\"/api/services\", async (req, res, next) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Create service (admin only)\n  app.post(\"/api/services\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const data = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(data);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"service\",\n        entityId: service.id,\n        meta: { data },\n      });\n\n      res.json(service);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update service\n  app.patch(\"/api/services/:id\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const data = insertServiceSchema.partial().parse(req.body);\n      const service = await storage.updateService(id, data);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"service\",\n        entityId: id,\n        meta: { data },\n      });\n\n      res.json(service);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Delete service\n  app.delete(\"/api/services/:id\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if service is being used by any bookings\n      const bookingsUsingService = await storage.getBookingsByService(id);\n      if (bookingsUsingService.length > 0) {\n        return res.status(400).json({ \n          error: { \n            code: \"SERVICE_IN_USE\", \n            message: `Cannot delete this service because it is used by ${bookingsUsingService.length} booking(s). Please delete or reassign those bookings first.` \n          } \n        });\n      }\n\n      await storage.deleteService(id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"DELETE\",\n        entity: \"service\",\n        entityId: id,\n        meta: {},\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== BOOKING ENDPOINTS ====================\n  \n  // Helper: Enforce Reception 14-day history limit\n  function enforceReceptionDateLimit(user: any, dateStr: string): boolean {\n    if (user?.role !== \"RECEPTION\") return true;\n    \n    const requestedDate = new Date(dateStr);\n    const fourteenDaysAgo = new Date();\n    fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14);\n    fourteenDaysAgo.setHours(0, 0, 0, 0);\n    \n    return requestedDate >= fourteenDaysAgo;\n  }\n  \n  // Get bookings for a specific day\n  app.get(\"/api/bookings/day\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { date, location } = req.query;\n      if (!date) {\n        return res.status(400).json({ error: { code: \"VALIDATION_ERROR\", message: \"Date is required\" } });\n      }\n\n      // Enforce Reception 14-day history limit\n      if (!enforceReceptionDateLimit(req.user, date as string)) {\n        return res.status(403).json({ \n          error: { \n            code: \"FORBIDDEN\", \n            message: \"Reception users can only view bookings from the last 14 days\" \n          } \n        });\n      }\n\n      const bookings = await storage.getBookingsByDate(date as string, location as string);\n      res.json(bookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get bookings for a date range (for weekly view)\n  app.get(\"/api/bookings/range\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { startDate, endDate, location } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ error: { code: \"VALIDATION_ERROR\", message: \"Start date and end date are required\" } });\n      }\n\n      // Enforce Reception 14-day history limit for start date\n      if (!enforceReceptionDateLimit(req.user, startDate as string)) {\n        return res.status(403).json({ \n          error: { \n            code: \"FORBIDDEN\", \n            message: \"Reception users can only view bookings from the last 14 days\" \n          } \n        });\n      }\n\n      const bookings = await storage.getBookingsByDateRange(startDate as string, endDate as string, location as string);\n      res.json(bookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get current user's bookings\n  app.get(\"/api/bookings/my\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n      }\n\n      const bookings = await storage.getBookingsByClient(req.user.id);\n      res.json(bookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get upcoming bookings\n  app.get(\"/api/bookings/upcoming\", authenticateToken, async (req, res, next) => {\n    try {\n      const bookings = await storage.getUpcomingBookings(10);\n      res.json(bookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Create booking with conflict detection\n  app.post(\"/api/bookings\", bookingLimiter, authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const schema = insertBookingSchema.extend({\n        clientEmail: z.string().email().optional(),\n        clientId: z.string().optional(), // Optional - derived from auth or clientEmail\n        status: z.enum([\"PENDING\", \"CONFIRMED\", \"COMPLETED\", \"CANCELED\"]).optional(), // Optional - defaults to PENDING\n      });\n      const data = schema.parse(req.body);\n\n      // Resolve client\n      let clientId: string | undefined = data.clientId;\n      if (data.clientEmail) {\n        let client = await storage.getUserByEmail(data.clientEmail);\n        if (!client) {\n          // Auto-create client if admin/reception is booking\n          if (req.user?.role === \"ADMIN\" || req.user?.role === \"RECEPTION\") {\n            const tempPassword = Math.random().toString(36).slice(-10);\n            const passwordHash = await bcrypt.hash(tempPassword, 10);\n            const username = data.clientEmail.split('@')[0]; // Extract username from email\n            client = await storage.createUser({\n              username,\n              email: data.clientEmail,\n              passwordHash,\n              role: \"CLIENT\",\n              forcePasswordReset: true,\n            });\n          } else {\n            return res.status(400).json({ error: { code: \"VALIDATION_ERROR\", message: \"Client not found\" } });\n          }\n        }\n        clientId = client.id;\n      } else if (!clientId) {\n        clientId = req.user?.id;\n      }\n\n      if (!clientId) {\n        return res.status(400).json({ error: { code: \"VALIDATION_ERROR\", message: \"Client ID required\" } });\n      }\n\n      // Check for conflicts\n      const existingBookings = await storage.getBookingsByDate(data.date);\n      const conflictingBooking = existingBookings.find(b => \n        b.status !== \"CANCELED\" &&\n        ((b.hostessId === data.hostessId && hasTimeConflict(data.startTime, data.endTime, b.startTime, b.endTime)) ||\n         (b.clientId === clientId && hasTimeConflict(data.startTime, data.endTime, b.startTime, b.endTime)))\n      );\n\n      if (conflictingBooking) {\n        return res.status(409).json({\n          error: {\n            code: \"CONFLICT\",\n            message: `Booking conflicts with existing appointment ${minutesToTime(conflictingBooking.startTime)}–${minutesToTime(conflictingBooking.endTime)}`,\n          },\n        });\n      }\n\n      const booking = await storage.createBooking({\n        ...data,\n        clientId,\n        status: data.status || \"PENDING\",\n      });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"booking\",\n        entityId: booking.id,\n        meta: { data },\n      });\n\n      res.json(booking);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update booking notes (clients can update their own)\n  app.patch(\"/api/bookings/:id/notes\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const { notes } = z.object({ notes: z.string() }).parse(req.body);\n\n      const booking = await storage.getBookingById(id);\n\n      if (!booking) {\n        return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"Booking not found\" } });\n      }\n\n      // Permission check - only client can update their own booking notes\n      if (req.user?.role === \"CLIENT\" && booking.clientId !== req.user.id) {\n        return res.status(403).json({ error: { code: \"FORBIDDEN\", message: \"Cannot update others' bookings\" } });\n      }\n\n      const updated = await storage.updateBooking(id, { notes });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"booking\",\n        entityId: id,\n        meta: { notes },\n      });\n\n      res.json(updated);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reset all client bookings (ADMIN only)\n  app.delete(\"/api/admin/bookings/reset-clients\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const deletedCount = await storage.deleteAllClientBookings();\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"DELETE\",\n        entity: \"booking\",\n        entityId: \"bulk\",\n        meta: { action: \"reset_all_client_bookings\", count: deletedCount },\n      });\n\n      res.json({ success: true, deletedCount });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Cancel booking\n  app.post(\"/api/bookings/:id/cancel\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const booking = await storage.getBookingById(id);\n\n      if (!booking) {\n        return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"Booking not found\" } });\n      }\n\n      // Permission check\n      if (req.user?.role === \"CLIENT\" && booking.clientId !== req.user.id) {\n        return res.status(403).json({ error: { code: \"FORBIDDEN\", message: \"Cannot cancel others' bookings\" } });\n      }\n\n      const updated = await storage.updateBooking(id, { status: \"CANCELED\" });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CANCEL\",\n        entity: \"booking\",\n        entityId: id,\n        meta: {},\n      });\n\n      res.json(updated);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== STAFF ENDPOINTS ====================\n  \n  // Get staff's linked hostess\n  app.get(\"/api/staff/hostess\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"No linked hostess profile\" } });\n      }\n\n      res.json(linkedHostess);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get combined staff overview (optimized single endpoint)\n  app.get(\"/api/staff/overview\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      // Find staff's linked hostess\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json({\n          hostess: null,\n          todayBookings: [],\n          tomorrowBookings: [],\n          todayTimeOff: [],\n          weeklySchedule: [],\n          upcomingBookings: []\n        });\n      }\n\n      // Get all data in parallel for maximum efficiency\n      const today = getCurrentDateToronto();\n      const tomorrow = format(addDays(toZonedTime(new Date(), \"America/Toronto\"), 1), \"yyyy-MM-dd\");\n\n      const [\n        todayAllBookings,\n        tomorrowAllBookings,\n        allTimeOff,\n        weeklySchedule,\n        upcomingAllBookings\n      ] = await Promise.all([\n        storage.getBookingsByDate(today),\n        storage.getBookingsByDate(tomorrow),\n        storage.getTimeOffByHostess(linkedHostess.id),\n        storage.getWeeklyScheduleByHostess(linkedHostess.id),\n        storage.getUpcomingBookings(30)\n      ]);\n\n      // Filter bookings for this staff's hostess\n      const todayBookings = todayAllBookings.filter(b => \n        b.hostessId === linkedHostess.id && b.status !== \"CANCELED\"\n      );\n\n      const tomorrowBookings = tomorrowAllBookings.filter(b => \n        b.hostessId === linkedHostess.id && b.status !== \"CANCELED\"\n      );\n\n      const todayTimeOff = allTimeOff.filter(t => t.date === today);\n\n      const upcomingBookings = upcomingAllBookings\n        .filter(b => b.hostessId === linkedHostess.id && b.status !== \"CANCELED\")\n        .slice(0, 10);\n\n      res.json({\n        hostess: linkedHostess,\n        todayBookings,\n        tomorrowBookings,\n        todayTimeOff,\n        weeklySchedule,\n        upcomingBookings\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Upload profile photo for staff's linked hostess (creates pending upload for admin approval)\n  app.post(\"/api/staff/profile-photo\", \n    authenticateToken, \n    requireRole(\"STAFF\"), \n    upload.single(\"photo\"),\n    async (req: AuthRequest, res, next) => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ error: { code: \"BAD_REQUEST\", message: \"No file uploaded\" } });\n        }\n\n        // Find the hostess linked to this staff user\n        const hostesses = await storage.getHostesses();\n        const hostess = hostesses.find(h => h.userId === req.user?.id);\n        \n        if (!hostess) {\n          await fs.unlink(req.file.path).catch(() => {});\n          return res.status(404).json({ error: { code: \"NOT_FOUND\", message: \"No linked hostess profile found\" } });\n        }\n\n        // Construct public URL for the photo\n        const photoUrl = `/api/assets/hostess-photos/${req.file.filename}`;\n\n        // Create a pending photo upload for admin approval\n        const photoUpload = await storage.createPhotoUpload({\n          hostessId: hostess.id,\n          photoUrl,\n          status: 'PENDING',\n        });\n\n        await storage.createAuditLog({\n          userId: req.user?.id,\n          action: \"CREATE\",\n          entity: \"photo_upload\",\n          entityId: photoUpload.id,\n          meta: { photoUrl, hostessId: hostess.id, staffUpload: true },\n        });\n\n        res.json({ \n          message: \"Photo uploaded successfully and pending admin approval\",\n          photoUpload,\n          photoUrl\n        });\n      } catch (error) {\n        // Clean up uploaded file if database insert fails\n        if (req.file) {\n          await fs.unlink(req.file.path).catch(() => {});\n        }\n        next(error);\n      }\n    }\n  );\n  \n  // Get staff's today's bookings (for their linked hostess)\n  app.get(\"/api/staff/bookings/today\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      // Find staff's linked hostess\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json([]);\n      }\n\n      const today = getCurrentDateToronto();\n      const allBookings = await storage.getBookingsByDate(today);\n      const staffBookings = allBookings.filter(b => \n        b.hostessId === linkedHostess.id && b.status !== \"CANCELED\"\n      );\n\n      res.json(staffBookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get staff's upcoming bookings (for their linked hostess)\n  app.get(\"/api/staff/bookings/upcoming\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      // Find staff's linked hostess\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json([]);\n      }\n\n      const allBookings = await storage.getUpcomingBookings(30);\n      const staffBookings = allBookings.filter(b => \n        b.hostessId === linkedHostess.id && b.status !== \"CANCELED\"\n      );\n\n      res.json(staffBookings.slice(0, 10));\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get staff's tomorrow's bookings\n  app.get(\"/api/staff/bookings/tomorrow\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json([]);\n      }\n\n      const tomorrow = format(addDays(toZonedTime(new Date(), \"America/Toronto\"), 1), \"yyyy-MM-dd\");\n      const allBookings = await storage.getBookingsByDate(tomorrow);\n      const staffBookings = allBookings.filter(b => \n        b.hostessId === linkedHostess.id && b.status !== \"CANCELED\"\n      );\n\n      res.json(staffBookings);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get staff's today's time off\n  app.get(\"/api/staff/time-off/today\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json([]);\n      }\n\n      const today = getCurrentDateToronto();\n      const allTimeOff = await storage.getTimeOffByHostess(linkedHostess.id);\n      const todayTimeOff = allTimeOff.filter(t => t.date === today);\n\n      res.json(todayTimeOff);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get staff's weekly schedule\n  app.get(\"/api/staff/weekly-schedule\", authenticateToken, requireRole(\"STAFF\"), async (req: AuthRequest, res, next) => {\n    try {\n      const hostesses = await storage.getHostesses();\n      const linkedHostess = hostesses.find(h => h.userId === req.user?.id);\n      \n      if (!linkedHostess) {\n        return res.json([]);\n      }\n\n      const schedule = await storage.getWeeklyScheduleByHostess(linkedHostess.id);\n      res.json(schedule);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== ANALYTICS ENDPOINTS ====================\n  \n  // Get revenue analytics\n  app.get(\"/api/analytics/revenue\", authenticateToken, requireRole(\"ADMIN\"), async (req, res, next) => {\n    try {\n      const { startDate, endDate, groupBy = \"hostess\" } = req.query;\n      \n      const allBookings = await storage.getAllBookings();\n      // Include all non-cancelled bookings (PENDING, CONFIRMED, COMPLETED)\n      let filteredBookings = allBookings.filter(b => b.status !== \"CANCELED\");\n\n      // Apply date filters if provided\n      if (startDate) {\n        filteredBookings = filteredBookings.filter(b => b.date >= (startDate as string));\n      }\n      if (endDate) {\n        filteredBookings = filteredBookings.filter(b => b.date <= (endDate as string));\n      }\n\n      // Group revenue\n      if (groupBy === \"hostess\") {\n        const revenueByHostess = filteredBookings.reduce((acc, booking) => {\n          const hostessName = booking.hostess.displayName;\n          if (!acc[hostessName]) {\n            acc[hostessName] = { name: hostessName, revenue: 0, bookings: 0 };\n          }\n          acc[hostessName].revenue += booking.service.priceCents;\n          acc[hostessName].bookings += 1;\n          return acc;\n        }, {} as Record<string, { name: string; revenue: number; bookings: number }>);\n\n        res.json(Object.values(revenueByHostess));\n      } else if (groupBy === \"location\") {\n        const revenueByLocation = filteredBookings.reduce((acc, booking) => {\n          // Handle multiple locations - split revenue across all locations\n          const locations = booking.hostess.locations || [];\n          locations.forEach(location => {\n            if (!acc[location]) {\n              acc[location] = { name: location, revenue: 0, bookings: 0 };\n            }\n            // Split revenue proportionally across locations\n            acc[location].revenue += booking.service.priceCents / locations.length;\n            acc[location].bookings += 1 / locations.length;\n          });\n          return acc;\n        }, {} as Record<string, { name: string; revenue: number; bookings: number }>);\n\n        res.json(Object.values(revenueByLocation));\n      } else if (groupBy === \"service\") {\n        const revenueByService = filteredBookings.reduce((acc, booking) => {\n          const serviceName = booking.service.name;\n          if (!acc[serviceName]) {\n            acc[serviceName] = { name: serviceName, revenue: 0, bookings: 0 };\n          }\n          acc[serviceName].revenue += booking.service.priceCents;\n          acc[serviceName].bookings += 1;\n          return acc;\n        }, {} as Record<string, { name: string; revenue: number; bookings: number }>);\n\n        res.json(Object.values(revenueByService));\n      }\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get bookings trend over time\n  app.get(\"/api/analytics/bookings-trend\", authenticateToken, requireRole(\"ADMIN\"), async (req, res, next) => {\n    try {\n      const { days = 30 } = req.query;\n      const allBookings = await storage.getAllBookings();\n      \n      // Get bookings from last N days\n      const today = new Date();\n      const startDate = new Date(today);\n      startDate.setDate(today.getDate() - Number(days));\n\n      const trendData = allBookings\n        .filter(b => new Date(b.date) >= startDate)\n        .reduce((acc, booking) => {\n          if (!acc[booking.date]) {\n            acc[booking.date] = { date: booking.date, bookings: 0, confirmed: 0, cancelled: 0 };\n          }\n          acc[booking.date].bookings += 1;\n          if (booking.status === \"CONFIRMED\" || booking.status === \"COMPLETED\") {\n            acc[booking.date].confirmed += 1;\n          } else if (booking.status === \"CANCELED\") {\n            acc[booking.date].cancelled += 1;\n          }\n          return acc;\n        }, {} as Record<string, { date: string; bookings: number; confirmed: number; cancelled: number }>);\n\n      res.json(Object.values(trendData).sort((a, b) => a.date.localeCompare(b.date)));\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get cancellation analytics\n  app.get(\"/api/analytics/cancellations\", authenticateToken, requireRole(\"ADMIN\"), async (req, res, next) => {\n    try {\n      const allBookings = await storage.getAllBookings();\n      \n      const total = allBookings.length;\n      const cancelled = allBookings.filter(b => b.status === \"CANCELED\").length;\n      const confirmed = allBookings.filter(b => b.status === \"CONFIRMED\" || b.status === \"COMPLETED\").length;\n      const pending = allBookings.filter(b => b.status === \"PENDING\").length;\n\n      const cancellationRate = total > 0 ? ((cancelled / total) * 100).toFixed(2) : \"0.00\";\n\n      res.json({\n        total,\n        cancelled,\n        confirmed,\n        pending,\n        cancellationRate: parseFloat(cancellationRate),\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== ADMIN ENDPOINTS ====================\n  \n  // Get pending photo uploads (admin and reception)\n  app.get(\"/api/admin/photo-uploads/pending\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req, res, next) => {\n    try {\n      const uploads = await storage.getPendingPhotoUploads();\n      res.json(uploads);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Approve photo upload (admin and reception)\n  app.post(\"/api/admin/photo-uploads/:id/approve\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      \n      const upload = await storage.approvePhotoUpload(id, req.user!.id);\n      \n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"APPROVE\",\n        entity: \"photo_upload\",\n        entityId: id,\n        meta: { photoUrl: upload.photoUrl },\n      });\n\n      res.json({ message: \"Photo approved successfully\", upload });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reject photo upload (admin and reception)\n  app.post(\"/api/admin/photo-uploads/:id/reject\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      \n      const upload = await storage.rejectPhotoUpload(id, req.user!.id);\n      \n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"REJECT\",\n        entity: \"photo_upload\",\n        entityId: id,\n        meta: { photoUrl: upload.photoUrl },\n      });\n\n      res.json({ message: \"Photo rejected successfully\", upload });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get all users (admin and reception)\n  app.get(\"/api/admin/users\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req, res, next) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(u => ({ ...u, passwordHash: undefined })));\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update user role and hostess link\n  app.patch(\"/api/admin/users/:id\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const { role, hostessId } = z.object({\n        role: z.enum([\"ADMIN\", \"STAFF\", \"RECEPTION\", \"CLIENT\"]).optional(),\n        hostessId: z.string().optional().nullable(),\n      }).parse(req.body);\n\n      const updates: any = {};\n      if (role) updates.role = role;\n\n      const user = await storage.updateUser(id, updates);\n\n      // Update hostess link if provided\n      if (hostessId !== undefined && role === \"STAFF\") {\n        if (hostessId) {\n          await storage.updateHostess(hostessId, { userId: user.id });\n        }\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"user\",\n        entityId: id,\n        meta: { role, hostessId },\n      });\n\n      res.json({ ...user, passwordHash: undefined });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reset user password (admin and reception)\n  app.post(\"/api/admin/users/:id/reset-password\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const { password } = z.object({\n        password: z.string().min(8, \"Password must be at least 8 characters\"),\n      }).parse(req.body);\n\n      const passwordHash = await bcrypt.hash(password, 10);\n      await storage.updateUser(id, { passwordHash });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"user\",\n        entityId: id,\n        meta: { action: \"password_reset\" },\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Ban/Unban user (admin and reception)\n  app.post(\"/api/admin/users/:id/ban\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const { banned } = z.object({\n        banned: z.boolean(),\n      }).parse(req.body);\n\n      const user = await storage.updateUser(id, { banned });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"user\",\n        entityId: id,\n        meta: { action: banned ? \"banned\" : \"unbanned\" },\n      });\n\n      res.json({ ...user, passwordHash: undefined });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // First-time password change (for users with forcePasswordReset)\n  app.post(\"/api/auth/change-password\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { newPassword } = z.object({\n        newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n      }).parse(req.body);\n\n      if (!req.user) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n      }\n\n      if (!req.user.forcePasswordReset) {\n        return res.status(400).json({ error: { code: \"BAD_REQUEST\", message: \"Password change not required\" } });\n      }\n\n      const passwordHash = await bcrypt.hash(newPassword, 10);\n      const updated = await storage.updateUser(req.user.id, { passwordHash, forcePasswordReset: false });\n\n      res.json({ user: { ...updated, passwordHash: undefined } });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Search clients (or get all if no query)\n  app.get(\"/api/clients\", authenticateToken, async (req, res, next) => {\n    try {\n      const { q } = req.query;\n      \n      // If no query or query too short, return all clients\n      const clients = q && (q as string).length >= 2 \n        ? await storage.searchClients(q as string)\n        : await storage.getAllClients();\n        \n      res.json(clients.map(c => ({ ...c, passwordHash: undefined })));\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Error handler\n  app.use(errorHandler);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41731},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient, getQueryFn } from \"./queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<{ requiresPasswordReset?: boolean; user?: User; role?: string }>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  resetPassword: (oldPassword: string, newPassword: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      const data = await response.json();\n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem(\"auth_token\", data.token);\n      }\n      return data;\n    },\n    onSuccess: async () => {\n      // Wait for the auth query to refetch and update before proceeding\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      localStorage.removeItem(\"auth_token\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", { email, password });\n      const data = await response.json();\n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem(\"auth_token\", data.token);\n      }\n      return data;\n    },\n    onSuccess: async () => {\n      // Wait for the auth query to refetch and update before proceeding\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ oldPassword, newPassword }: { oldPassword: string; newPassword: string }) => {\n      await apiRequest(\"POST\", \"/api/auth/reset-password\", { oldPassword, newPassword });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        login: (username, password) => loginMutation.mutateAsync({ username, password }),\n        logout: () => logoutMutation.mutateAsync(),\n        register: (email, password) => registerMutation.mutateAsync({ email, password }),\n        resetPassword: (oldPassword, newPassword) => resetPasswordMutation.mutateAsync({ oldPassword, newPassword }),\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3601},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/lib/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"base44-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1603},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex flex-col bg-gray-50\">\n      <div className=\"flex-1 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex mb-4 gap-2\">\n              <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n            </div>\n\n            <p className=\"mt-4 text-sm text-gray-600\">\n              Did you forget to add the page to the router?\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":861},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/lib/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":670},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/middleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\n// In production, JWT_SECRET must be set. In development, generate a random one.\nlet JWT_SECRET: string;\n\nif (process.env.JWT_SECRET) {\n  JWT_SECRET = process.env.JWT_SECRET;\n} else if (process.env.NODE_ENV === 'production') {\n  throw new Error(\"JWT_SECRET environment variable is required in production\");\n} else {\n  // Development mode: generate a random secret (will change on restart)\n  JWT_SECRET = `dev-${Math.random().toString(36).substring(2)}${Math.random().toString(36).substring(2)}${Math.random().toString(36).substring(2)}`;\n  console.warn(\"⚠️  Using generated JWT_SECRET in development. Tokens will be invalid after restart.\");\n}\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\nexport function authenticateToken(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"No token provided\" } });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n    storage.getUserById(decoded.userId).then((user) => {\n      if (!user) {\n        return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"User not found\" } });\n      }\n      req.user = user;\n      next();\n    });\n  } catch (error) {\n    return res.status(403).json({ error: { code: \"FORBIDDEN\", message: \"Invalid token\" } });\n  }\n}\n\nexport function requireRole(...roles: string[]) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: { code: \"UNAUTHORIZED\", message: \"Not authenticated\" } });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ \n        error: { \n          code: \"FORBIDDEN\", \n          message: `Requires one of: ${roles.join(\", \")}` \n        } \n      });\n    }\n\n    next();\n  };\n}\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\nexport function errorHandler(err: any, req: Request, res: Response, next: NextFunction) {\n  console.error(err);\n\n  if (err.name === \"ZodError\") {\n    return res.status(400).json({\n      error: {\n        code: \"VALIDATION_ERROR\",\n        message: \"Invalid request data\",\n        details: err.errors,\n      },\n    });\n  }\n\n  if (err.code === \"23505\") { // PostgreSQL unique violation\n    return res.status(409).json({\n      error: {\n        code: \"CONFLICT\",\n        message: \"Resource already exists\",\n      },\n    });\n  }\n\n  res.status(500).json({\n    error: {\n      code: \"INTERNAL_ERROR\",\n      message: err.message || \"An unexpected error occurred\",\n    },\n  });\n}\n","size_bytes":2906},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/admin-hostesses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, MapPin, Upload, Edit2, X } from \"lucide-react\";\nimport type { Hostess } from \"@shared/schema\";\n\nconst hostessSchema = z.object({\n  slug: z.string().min(1).regex(/^[a-z0-9-]+$/, \"Only lowercase, numbers, and hyphens\"),\n  displayName: z.string().min(1),\n  locations: z.array(z.enum([\"DOWNTOWN\", \"WEST_END\"])).min(1, \"At least one location is required\"),\n  bio: z.string().optional(),\n  specialties: z.string().optional(),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\ntype HostessFormData = z.infer<typeof hostessSchema>;\n\nexport default function AdminHostesses() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [uploadHostessId, setUploadHostessId] = useState<string | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [editSpecialtiesHostess, setEditSpecialtiesHostess] = useState<Hostess | null>(null);\n  const [specialtiesInput, setSpecialtiesInput] = useState(\"\");\n  const [currentSpecialties, setCurrentSpecialties] = useState<string[]>([]);\n\n  const { data: hostesses, isLoading } = useQuery<Hostess[]>({\n    queryKey: [\"/api/hostesses\"],\n  });\n\n  const createHostessMutation = useMutation({\n    mutationFn: async (data: HostessFormData) => {\n      const payload = {\n        ...data,\n        specialties: data.specialties ? data.specialties.split(',').map(s => s.trim()) : [],\n      };\n      return apiRequest(\"POST\", \"/api/hostesses\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n      toast({ title: \"Hostess created successfully\" });\n      setIsCreateOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create hostess\",\n        description: error.message,\n      });\n    },\n  });\n\n  const uploadPhotoMutation = useMutation({\n    mutationFn: async ({ hostessId, file }: { hostessId: string; file: File }) => {\n      const formData = new FormData();\n      formData.append(\"photo\", file);\n      \n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/hostesses/${hostessId}/photo`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error?.message || \"Upload failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n      toast({ title: \"Photo uploaded successfully\" });\n      setUploadHostessId(null);\n      setSelectedFile(null);\n      setPreviewUrl(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to upload photo\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateSpecialtiesMutation = useMutation({\n    mutationFn: async ({ hostessId, specialties }: { hostessId: string; specialties: string[] }) => {\n      return apiRequest(\"PATCH\", `/api/hostesses/${hostessId}`, { specialties });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n      toast({ title: \"Specialties updated successfully\" });\n      setEditSpecialtiesHostess(null);\n      setCurrentSpecialties([]);\n      setSpecialtiesInput(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update specialties\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewUrl(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleUpload = () => {\n    if (uploadHostessId && selectedFile) {\n      uploadPhotoMutation.mutate({ hostessId: uploadHostessId, file: selectedFile });\n    }\n  };\n\n  const handleOpenEditSpecialties = (hostess: Hostess) => {\n    setEditSpecialtiesHostess(hostess);\n    setCurrentSpecialties(hostess.specialties || []);\n    setSpecialtiesInput(\"\");\n  };\n\n  const handleAddSpecialty = () => {\n    const trimmed = specialtiesInput.trim();\n    if (trimmed && !currentSpecialties.includes(trimmed)) {\n      setCurrentSpecialties([...currentSpecialties, trimmed]);\n      setSpecialtiesInput(\"\");\n    }\n  };\n\n  const handleRemoveSpecialty = (specialty: string) => {\n    setCurrentSpecialties(currentSpecialties.filter(s => s !== specialty));\n  };\n\n  const handleSaveSpecialties = () => {\n    if (editSpecialtiesHostess) {\n      updateSpecialtiesMutation.mutate({\n        hostessId: editSpecialtiesHostess.id,\n        specialties: currentSpecialties,\n      });\n    }\n  };\n\n  const handleSpecialtiesKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleAddSpecialty();\n    }\n  };\n\n  const form = useForm<HostessFormData>({\n    resolver: zodResolver(hostessSchema),\n    defaultValues: {\n      slug: \"\",\n      displayName: \"\",\n      locations: [\"DOWNTOWN\"],\n      bio: \"\",\n      specialties: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = (data: HostessFormData) => {\n    createHostessMutation.mutate(data);\n  };\n\n  const sortedHostesses = hostesses?.slice().sort((a, b) => \n    (a.displayName || \"\").localeCompare(b.displayName || \"\")\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-section-title font-semibold\">Hostess Management</h1>\n            <p className=\"text-muted-foreground\">Manage hostess profiles and availability</p>\n          </div>\n          \n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-hostess\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Hostess\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Hostess</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"displayName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Display Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Jane Doe\" data-testid=\"input-name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"slug\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Slug (URL)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"jane-doe\" data-testid=\"input-slug\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"locations\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Locations</FormLabel>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"location-downtown\"\n                              checked={field.value?.includes(\"DOWNTOWN\")}\n                              onChange={(e) => {\n                                const checked = e.target.checked;\n                                const current = field.value || [];\n                                field.onChange(\n                                  checked\n                                    ? [...current, \"DOWNTOWN\"]\n                                    : current.filter((l) => l !== \"DOWNTOWN\")\n                                );\n                              }}\n                              className=\"h-4 w-4\"\n                              data-testid=\"checkbox-downtown\"\n                            />\n                            <Label htmlFor=\"location-downtown\">Downtown</Label>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"location-westend\"\n                              checked={field.value?.includes(\"WEST_END\")}\n                              onChange={(e) => {\n                                const checked = e.target.checked;\n                                const current = field.value || [];\n                                field.onChange(\n                                  checked\n                                    ? [...current, \"WEST_END\"]\n                                    : current.filter((l) => l !== \"WEST_END\")\n                                );\n                              }}\n                              className=\"h-4 w-4\"\n                              data-testid=\"checkbox-westend\"\n                            />\n                            <Label htmlFor=\"location-westend\">West End</Label>\n                          </div>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Staff Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"staff@example.com\" data-testid=\"input-email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Staff Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Min 8 characters\" data-testid=\"input-password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"bio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Bio (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Tell us about yourself...\" data-testid=\"input-bio\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"specialties\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Specialties (Optional, comma-separated)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Massage, Aromatherapy, Meditation\" data-testid=\"input-specialties\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createHostessMutation.isPending}>\n                    {createHostessMutation.isPending ? \"Creating...\" : \"Create Hostess\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Hostesses</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Profile</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Location</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Specialties</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedHostesses.map((hostess) => (\n                    <TableRow key={hostess.id} data-testid={`hostess-${hostess.id}`}>\n                      <TableCell>\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={hostess.photoUrl || undefined} />\n                          <AvatarFallback>\n                            {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{hostess.displayName}</TableCell>\n                      <TableCell>\n                        {hostess.locations && hostess.locations.length > 0 && (\n                          <div className=\"flex gap-1 flex-wrap\">\n                            {hostess.locations.map((loc, idx) => (\n                              <Badge key={idx} variant=\"outline\" className=\"gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={hostess.active ? \"default\" : \"secondary\"}>\n                          {hostess.active ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {hostess.specialties?.slice(0, 2).map((specialty) => (\n                            <Badge key={specialty} variant=\"outline\" className=\"text-xs\">\n                              {specialty}\n                            </Badge>\n                          ))}\n                          {hostess.specialties && hostess.specialties.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{hostess.specialties.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => setUploadHostessId(hostess.id)}\n                            data-testid={`button-upload-photo-${hostess.id}`}\n                          >\n                            <Upload className=\"h-4 w-4 mr-2\" />\n                            Photo\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleOpenEditSpecialties(hostess)}\n                            data-testid={`button-edit-specialties-${hostess.id}`}\n                          >\n                            <Edit2 className=\"h-4 w-4 mr-2\" />\n                            Specialties\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Photo Upload Dialog */}\n        <Dialog open={!!uploadHostessId} onOpenChange={(open) => !open && setUploadHostessId(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload Hostess Photo</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"flex flex-col items-center gap-4\">\n                {previewUrl ? (\n                  <Avatar className=\"h-32 w-32\">\n                    <AvatarImage src={previewUrl} />\n                  </Avatar>\n                ) : (\n                  <div className=\"h-32 w-32 rounded-full bg-muted flex items-center justify-center\">\n                    <Upload className=\"h-12 w-12 text-muted-foreground\" />\n                  </div>\n                )}\n                <Input\n                  type=\"file\"\n                  accept=\"image/jpeg,image/png,image/webp,image/gif\"\n                  onChange={handleFileSelect}\n                  data-testid=\"input-photo-file\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Maximum file size: 5MB. Supported formats: JPEG, PNG, WebP, GIF\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  className=\"flex-1\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setUploadHostessId(null);\n                    setSelectedFile(null);\n                    setPreviewUrl(null);\n                  }}\n                  data-testid=\"button-cancel-upload\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={handleUpload}\n                  disabled={!selectedFile || uploadPhotoMutation.isPending}\n                  data-testid=\"button-confirm-upload\"\n                >\n                  {uploadPhotoMutation.isPending ? \"Uploading...\" : \"Upload\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Specialties Dialog */}\n        <Dialog open={!!editSpecialtiesHostess} onOpenChange={(open) => !open && setEditSpecialtiesHostess(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Specialties - {editSpecialtiesHostess?.displayName}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Add Specialty</label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Enter a specialty (e.g., Massage, Aromatherapy)\"\n                    value={specialtiesInput}\n                    onChange={(e) => setSpecialtiesInput(e.target.value)}\n                    onKeyDown={handleSpecialtiesKeyDown}\n                    data-testid=\"input-specialty\"\n                  />\n                  <Button\n                    onClick={handleAddSpecialty}\n                    disabled={!specialtiesInput.trim()}\n                    data-testid=\"button-add-specialty\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Current Specialties</label>\n                <div className=\"min-h-[100px] p-4 border rounded-md bg-muted/50\">\n                  {currentSpecialties.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground text-center py-4\">\n                      No specialties yet. Add some above!\n                    </p>\n                  ) : (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {currentSpecialties.map((specialty) => (\n                        <Badge\n                          key={specialty}\n                          variant=\"secondary\"\n                          className=\"gap-1 pr-1\"\n                          data-testid={`badge-specialty-${specialty}`}\n                        >\n                          {specialty}\n                          <button\n                            onClick={() => handleRemoveSpecialty(specialty)}\n                            className=\"ml-1 rounded-full hover-elevate p-0.5\"\n                            data-testid={`button-remove-specialty-${specialty}`}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  className=\"flex-1\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setEditSpecialtiesHostess(null);\n                    setCurrentSpecialties([]);\n                    setSpecialtiesInput(\"\");\n                  }}\n                  data-testid=\"button-cancel-specialties\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  className=\"flex-1\"\n                  onClick={handleSaveSpecialties}\n                  disabled={updateSpecialtiesMutation.isPending}\n                  data-testid=\"button-save-specialties\"\n                >\n                  {updateSpecialtiesMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24215},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Users, FileUp, FileDown, Clock, Settings, MapPin, QrCode } from \"lucide-react\";\nimport { formatTimeRange, formatDate, getCurrentDateToronto } from \"@/lib/time-utils\";\nimport type { BookingWithDetails } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const today = getCurrentDateToronto();\n\n  const { data: todaysBookings } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/day\", today],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      const res = await fetch(`/api/bookings/day?date=${today}`, { headers, credentials: \"include\" });\n      if (!res.ok) throw new Error(`${res.status}: ${await res.text()}`);\n      return res.json();\n    },\n  });\n\n  const { data: upcomingBookings } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/upcoming\"],\n  });\n\n  const downtownCount = todaysBookings?.filter(b => b.hostess.locations?.includes(\"DOWNTOWN\") && b.status !== \"CANCELED\").length || 0;\n  const westEndCount = todaysBookings?.filter(b => b.hostess.locations?.includes(\"WEST_END\") && b.status !== \"CANCELED\").length || 0;\n\n  const quickActions = [\n    { title: \"Calendar View\", icon: Calendar, href: \"/admin/calendar\" },\n    { title: \"Import Schedule\", icon: FileUp, href: \"/admin/import\" },\n    { title: \"Export Schedule\", icon: FileDown, href: \"/admin/export\" },\n    { title: \"Manage Users\", icon: Users, href: \"/admin/users\" },\n    { title: \"Block Time Off\", icon: Clock, href: \"/admin/timeoff\" },\n    { title: \"Services\", icon: Settings, href: \"/admin/services\" },\n  ];\n\n  const handleDownloadQR = () => {\n    const clientPortalUrl = `${window.location.origin}/hostesses`;\n    const qrUrl = `/api/qr?url=${encodeURIComponent(clientPortalUrl)}`;\n    \n    // Open in new tab to download\n    window.open(qrUrl, '_blank');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <div>\n          <h1 className=\"text-dashboard-metric font-bold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage bookings, staff, and schedules</p>\n        </div>\n\n        {/* Today's Appointments */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                Downtown Appointments Today\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-dashboard-metric font-bold text-primary\">{downtownCount}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                West End Appointments Today\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-dashboard-metric font-bold text-primary\">{westEndCount}</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n            <CardTitle>Quick Actions</CardTitle>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleDownloadQR}\n              className=\"gap-2\"\n              data-testid=\"button-download-qr\"\n            >\n              <QrCode className=\"h-4 w-4\" />\n              QR for Client Portal\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              {quickActions.map((action) => (\n                <Button\n                  key={action.href}\n                  variant=\"outline\"\n                  className=\"h-auto py-6 flex-col gap-2\"\n                  onClick={() => setLocation(action.href)}\n                  data-testid={`action-${action.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <action.icon className=\"h-6 w-6\" />\n                  <span className=\"text-sm font-medium\">{action.title}</span>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Appointments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Appointments</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!upcomingBookings || upcomingBookings.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\">No upcoming appointments</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingBookings.slice(0, 10).map((booking) => (\n                  <div\n                    key={booking.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n                    data-testid={`booking-${booking.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <p className=\"font-medium\">{booking.hostess.displayName}</p>\n                        {booking.hostess.locations && booking.hostess.locations.length > 0 && (\n                          <div className=\"flex gap-1\">\n                            {booking.hostess.locations.map((loc, idx) => (\n                              <Badge key={idx} variant=\"outline\">\n                                {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                        <Badge\n                          variant={\n                            booking.status === \"CONFIRMED\" ? \"default\" :\n                            booking.status === \"PENDING\" ? \"secondary\" :\n                            \"outline\"\n                          }\n                        >\n                          {booking.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-4 mt-1 text-sm text-muted-foreground\">\n                        <span>{formatDate(booking.date)}</span>\n                        <span className=\"font-mono\">\n                          {formatTimeRange(booking.startTime, booking.endTime)}\n                        </span>\n                        <span>{booking.client.email}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7174},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"auth_token\");\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"auth_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: true, // Refresh data when user returns to tab\n      staleTime: 2 * 60 * 1000, // 2 minutes - reasonable default for booking data\n      gcTime: 5 * 60 * 1000, // 5 minutes - keep unused queries in cache\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1917},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"replit.md":{"content":"# Club Alpha Booking Platform\n\n## Overview\nClub Alpha is a production-ready, multi-location hostess booking platform designed to manage appointments across Downtown and West End locations. It features advanced scheduling, real-time conflict detection, double-booking prevention, role-based access control, comprehensive admin tools, bulk client import, automatic privacy-focused cleanup of client booking history, a complete staff portal with dashboard and weekly schedule views, and a secure messaging system with admin content moderation. Hostesses can work at multiple locations simultaneously (not mutually exclusive), providing flexibility in scheduling and service coverage across both venues. The platform aims to streamline booking operations, enhance client experience, provide robust management capabilities, and maintain a safe communication environment through automated content monitoring.\n\n## User Preferences\nI want the agent to use simple language.\nI want iterative development.\nI want detailed explanations.\nAsk before making major changes.\nDo not make changes to the folder `Z`.\nDo not make changes to the file `Y`.\n\n## System Architecture\nThe platform is built with a React 18, TypeScript, Vite frontend using TanStack Query, Wouter routing, Tailwind CSS, and shadcn/ui. The backend is a Node.js 20 Express application with Drizzle ORM and Zod validation, connecting to a PostgreSQL database (Supabase). Authentication is handled via JWT with role-based access for ADMIN, STAFF, RECEPTION, and CLIENT. Time management consistently uses `date-fns` and `date-fns-tz` (America/Toronto timezone), storing all times as minutes from midnight.\n\n### UI/UX Decisions\n- **Admin/Reception Interface**: Primarily dark mode with a background of `hsl(220 15% 12%)` and surface `hsl(220 14% 16%)`. Status colors are muted teal for available, vibrant blue for booked, warm amber for time-off, and clear red for conflicts.\n- **Client-Facing Interface**: Primarily light mode with a background of `hsl(0 0% 100%)` and surface `hsl(220 20% 98%)`. Features a sophisticated blue as the primary color (`hsl(210 90% 45%)`), generous whitespace, and friendly micro-copy.\n- **Typography**: Uses Inter for primary text and Roboto Mono for all time displays.\n- **Layout**: Consistent spacing with Tailwind units, fixed grid time column (80px), hostess columns with a minimum width of 200px, and cell height of 48px for 15-minute slots. Max width for admin is 1800px and client is 1280px.\n\n### Technical Implementations\n- **Database Schema**: Core entities include `users`, `hostesses`, `services`, `bookings`, `timeOff`, `weeklySchedule`, `photoUploads`, and `auditLog`. Hostesses use a `locations` text array field (not mutually exclusive) supporting \"DOWNTOWN\" and/or \"WEST_END\" values.\n- **Username-Based Authentication**: The platform uses username-based login instead of email-based authentication. Usernames are automatically extracted from email addresses during user creation (the part before @). For example, \"admin@clubalpha.ca\" becomes username \"admin\". All login flows (home page, dedicated login page) accept username + password credentials. The `users` table has a unique, non-nullable `username` column alongside the existing `email` column for backward compatibility.\n- **Automatic Data Cleanup**: Client booking history older than 2 weeks is automatically deleted every 24 hours to maintain privacy and database cleanliness. This cleanup runs on server startup and continues in the background.\n- **Time System**: All times are stored as minutes from midnight (0-1439). The system operates on a 10:00-23:00 grid in 15-minute increments, with a default timezone of America/Toronto.\n- **Double-Booking Prevention**: Utilizes serializable transactions with advisory locks per `(hostessId, date)`, validating against existing bookings, time-off blocks, and weekly schedules to prevent conflicts.\n- **Admin Daily Grid**: Features sticky time and hostess headers, horizontal scrolling, color-coded cells, quick booking modal integration, and 3-level zoom controls.\n- **Quick Booking Modal**: Dual-mode interface with tabs for creating bookings or marking time off. Booking mode: pre-fills details, offers client dropdown/autocomplete with all registered clients, service selection, notes field, and validates conflicts. Time Off mode: allows marking time slots as unavailable with duration selection (15min-4hrs) and reason, displayed as red blocks on the calendar.\n- **Client Booking Flow**: Allows browsing hostesses by location, viewing profiles, selecting dates, choosing services, picking available time slots, adding notes, and confirming bookings. Service prices are prominently displayed on service cards and in the booking form dropdown.\n- **Bulk Client Import**: High-performance batch processing system supports importing 14,000+ clients in 2-3 minutes. Processes clients in batches of 100 with 10ms delay between batches. Maximum 20,000 clients per import. Features username-based default passwords (username extracted from email is used as initial password), mandatory password change on first login (forcePasswordReset flag), comprehensive UI with template download (10 example emails), instructions, duplicate detection, indeterminate progress bar during import, success/failure counts display, failed accounts list with download option, and automatic cache invalidation for immediate updates.\n- **Import/Export Schedules**: Supports CSV import and export of weekly schedules. Format: `id,hostess,monday,tuesday,wednesday,thursday,friday,saturday,sunday` with time ranges like \"10:00-18:00\". Idempotent upserts by (hostessId, weekday) with row-by-row error capture.\n- **Role-Based Access Control**: Defines distinct permissions for ADMIN, RECEPTION, STAFF, and CLIENT roles, including specific dashboard views and functionalities.\n- **Password Reset**: Admins and receptionists can reset passwords for any user (clients, staff/hostesses), requiring 8+ characters and bcrypt hashing, with all actions logged. Password reset buttons are available on both the Users and Clients management pages.\n- **Photo Upload & Approval**: STAFF users can upload profile photos for their linked hostess via a secure endpoint. Uploads are stored with PENDING status in the `photoUploads` table. ADMIN users review pending uploads at `/admin/photo-approvals` and can approve or reject them. When approved, the photo is applied to the hostess profile and status changes to APPROVED. The system enforces ownership verification to ensure staff can only upload for their own linked hostess.\n- **Service Pricing**: Services store prices as integer cents (priceCents) in the database and display as dollars with 2 decimal places. ADMIN users can easily create and edit service prices through the Services Management page. Prices are prominently displayed to clients on service cards (hostess profile page) and in the booking form dropdown.\n- **Demo Login Credentials**: The home page displays demo credentials for all four user roles (ADMIN, RECEPTION, STAFF, CLIENT) to allow easy exploration of the platform. STAFF demo user is linked to the first hostess (Sophia) for testing staff features like photo uploads and schedule management.\n- **Multi-Location Support**: Hostesses can work at multiple locations (Downtown and/or West End). Admin form uses checkboxes for location selection. Frontend displays multiple location badges. Backend filtering uses PostgreSQL array contains operator (`@>`) to include hostesses in location-specific queries. Analytics counts bookings where the hostess's locations array includes the specified location.\n- **Staff Portal**: Comprehensive staff portal with two main pages: (1) Dashboard showing welcome message, stat cards for today's/tomorrow's appointments and today's time-off, and profile section with working days and photo; (2) Weekly Schedule view showing day-by-day breakdown with color-coded borders (purple for today, green for working days, gray for days off), \"Today\" badge, navigation between weeks, and display of bookings, time-off, or day-off status for each day.\n- **Analytics Dashboard**: Provides revenue metrics, booking trends, and cancellation rates with `recharts` visualization.\n- **Performance Optimizations**: The platform is optimized for speed and efficiency through several key improvements: (1) Combined `/api/staff/overview` endpoint that consolidates 6 separate API calls into 1 request using Promise.all() for parallel database queries; (2) React Query cache configuration with 2-minute staleTime and automatic refetch-on-window-focus for balanced freshness and performance; (3) Database indexes on `bookings(hostessId, date)` and `timeOff(hostessId, date)` for fast queries; (4) Efficient SQL joins in all booking queries to prevent N+1 query patterns; (5) Compact UI design throughout staff portal for efficient use of screen space.\n- **Upcoming Schedule Preview**: A dedicated system for uploading and displaying preview schedules that clients can view but cannot book directly through the platform. ADMIN and RECEPTION users can upload upcoming schedules via CSV import at `/admin/upcoming-schedule`, specifying date, hostess, time range, service, and notes for each slot. The data is stored in a separate `upcomingSchedule` table distinct from regular bookings. Clients access a read-only calendar view at `/upcoming-schedule` displaying the preview schedule with a prominent \"Call to book\" disclaimer, emphasizing that appointments must be made by phone. The system supports bulk CSV uploads with template download, real-time upload progress, success/failure reporting, and one-click clear all functionality with confirmation. This feature allows the business to showcase availability for the upcoming week while maintaining control over the booking process through direct client contact.\n- **Secure Messaging System**: A comprehensive messaging platform enabling direct communication between clients and hostesses with automated content moderation. The system consists of four main components: (1) Client messaging interface at `/messages` allowing clients to start conversations with hostesses and send messages; (2) Staff messaging interface at `/staff/messages` enabling hostesses to view and respond to client messages for their linked profile; (3) Admin trigger word management at `/admin/trigger-words` where administrators configure monitored words and phrases; (4) Admin flagged conversations dashboard at `/admin/flagged-conversations` displaying conversations that contain trigger words, with tabs for pending review and reviewed items. The database schema includes `conversations` (unique client-hostess pairs), `messages` (message content and timestamps), `triggerWords` (admin-managed monitoring list), and `flaggedConversations` (auto-flagged conversations with review status). Trigger word detection is case-insensitive and occurs automatically when messages are sent, immediately flagging conversations for admin review. Each client-hostess pair maintains a single conversation thread enforced by database unique constraints. The system uses React Query for efficient data fetching with 2-minute cache staleness, automatic auth header injection, and real-time cache invalidation after mutations. All messaging endpoints are protected by JWT authentication with role-based access control ensuring clients can only message hostesses, staff can only access their linked hostess's conversations, and admins have full monitoring access.\n\n## External Dependencies\n- **PostgreSQL**: Used as the primary database, managed via Supabase.\n- **Node.js/Express**: Backend framework.\n- **React/Vite**: Frontend framework and build tool.\n- **Drizzle ORM**: Object-Relational Mapper for database interactions.\n- **Zod**: Schema declaration and validation library.\n- **JWT**: For secure authentication and authorization.\n- **date-fns / date-fns-tz**: For robust date and time manipulation and timezone handling.\n- **Tailwind CSS**: Utility-first CSS framework.\n- **shadcn/ui**: UI component library.\n- **TanStack Query**: For data fetching, caching, and state management.\n- **Wouter**: For client-side routing.\n- **Multer**: For handling `multipart/form-data`, primarily for file uploads (hostess photos).\n- **bcrypt**: For password hashing.\n- **recharts**: For data visualization in the analytics dashboard.\n- **Resend/SendGrid**: Email notification services (integration ready, requires API keys).\n- **Twilio**: SMS notification service (integration ready, requires API credentials).","size_bytes":12555},"client/src/pages/admin-services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Pencil, Trash2, Clock } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\n\nconst serviceSchema = z.object({\n  name: z.string().min(1, \"Service name is required\"),\n  durationMin: z.coerce.number().int().positive(\"Duration must be positive\"),\n  priceCents: z.coerce.number().int().nonnegative(\"Price must be non-negative\"),\n});\n\ntype ServiceFormData = z.infer<typeof serviceSchema>;\n\nexport default function AdminServices() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const sortedServices = services?.slice().sort((a, b) => a.durationMin - b.durationMin) || [];\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: ServiceFormData) => {\n      return apiRequest(\"POST\", \"/api/services\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service created successfully\" });\n      setIsCreateOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create service\",\n        description: error.message,\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ServiceFormData }) => {\n      return apiRequest(\"PATCH\", `/api/services/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service updated successfully\" });\n      setEditingService(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update service\",\n        description: error.message,\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/services/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to delete service\",\n        description: error.message,\n      });\n    },\n  });\n\n  const createForm = useForm<ServiceFormData>({\n    resolver: zodResolver(serviceSchema),\n    defaultValues: {\n      name: \"\",\n      durationMin: 60,\n      priceCents: 0,\n    },\n  });\n\n  const editForm = useForm<ServiceFormData>({\n    resolver: zodResolver(serviceSchema),\n  });\n\n  const onCreateSubmit = (data: ServiceFormData) => {\n    createServiceMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: ServiceFormData) => {\n    if (editingService) {\n      updateServiceMutation.mutate({ id: editingService.id, data });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-section-title font-semibold\">Services Management</h1>\n            <p className=\"text-muted-foreground\">Manage available services and pricing</p>\n          </div>\n          \n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-service\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Service\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Service</DialogTitle>\n              </DialogHeader>\n              <Form {...createForm}>\n                <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Service Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Standard Session\" data-testid=\"input-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"durationMin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (minutes)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"60\" data-testid=\"input-duration\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"priceCents\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price ($)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            placeholder=\"100.00\" \n                            data-testid=\"input-price\" \n                            {...field}\n                            onChange={(e) => field.onChange(Math.round(parseFloat(e.target.value) * 100))}\n                            value={field.value ? (field.value / 100).toFixed(2) : \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button type=\"submit\" className=\"w-full\" disabled={createServiceMutation.isPending}>\n                    {createServiceMutation.isPending ? \"Creating...\" : \"Create Service\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Services</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : sortedServices.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">No services yet</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Service Name</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Price</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedServices.map((service) => (\n                    <TableRow key={service.id} data-testid={`service-${service.id}`}>\n                      <TableCell className=\"font-medium\">{service.name}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                          {service.durationMin} min\n                        </div>\n                      </TableCell>\n                      <TableCell>${(service.priceCents / 100).toFixed(2)}</TableCell>\n                      <TableCell className=\"text-right space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => {\n                            editForm.reset({\n                              name: service.name,\n                              durationMin: service.durationMin,\n                              priceCents: service.priceCents,\n                            });\n                            setEditingService(service);\n                          }}\n                          data-testid={`button-edit-${service.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => {\n                            if (confirm(\"Are you sure you want to delete this service?\")) {\n                              deleteServiceMutation.mutate(service.id);\n                            }\n                          }}\n                          data-testid={`button-delete-${service.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Dialog */}\n        <Dialog open={!!editingService} onOpenChange={(open) => !open && setEditingService(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Service</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"durationMin\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration (minutes)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"priceCents\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price ($)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\"\n                          {...field}\n                          onChange={(e) => field.onChange(Math.round(parseFloat(e.target.value) * 100))}\n                          value={field.value ? (field.value / 100).toFixed(2) : \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={updateServiceMutation.isPending}>\n                  {updateServiceMutation.isPending ? \"Updating...\" : \"Update Service\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12484},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  timestamp, \n  pgEnum,\n  boolean,\n  integer,\n  date,\n  jsonb,\n  index,\n  unique\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['ADMIN', 'STAFF', 'RECEPTION', 'CLIENT']);\nexport const locationEnum = pgEnum('location', ['DOWNTOWN', 'WEST_END']);\nexport const bookingStatusEnum = pgEnum('booking_status', ['PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELED']);\nexport const photoUploadStatusEnum = pgEnum('photo_upload_status', ['PENDING', 'APPROVED', 'REJECTED']);\nexport const reviewStatusEnum = pgEnum('review_status', ['PENDING', 'APPROVED', 'REJECTED']);\n\n// Users Table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('CLIENT'),\n  forcePasswordReset: boolean(\"force_password_reset\").notNull().default(false),\n  banned: boolean(\"banned\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Hostesses Table\nexport const hostesses = pgTable(\"hostesses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: text(\"slug\").notNull().unique(),\n  displayName: text(\"display_name\").notNull(),\n  bio: text(\"bio\"),\n  specialties: text(\"specialties\").array(),\n  locations: text(\"locations\").array().notNull().default(sql`ARRAY[]::text[]`),\n  photoUrl: text(\"photo_url\"),\n  active: boolean(\"active\").notNull().default(true),\n  userId: varchar(\"user_id\").references(() => users.id), // Link to staff user\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Services Table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  durationMin: integer(\"duration_min\").notNull(),\n  priceCents: integer(\"price_cents\").notNull(),\n});\n\n// Bookings Table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: date(\"date\").notNull(),\n  startTime: integer(\"start_time\").notNull(), // minutes from midnight\n  endTime: integer(\"end_time\").notNull(), // minutes from midnight\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  clientId: varchar(\"client_id\").notNull().references(() => users.id),\n  serviceId: varchar(\"service_id\").notNull().references(() => services.id),\n  status: bookingStatusEnum(\"status\").notNull().default('PENDING'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  hostessDateIdx: index(\"bookings_hostess_date_idx\").on(table.hostessId, table.date),\n  clientDateIdx: index(\"bookings_client_date_idx\").on(table.clientId, table.date),\n  uniqueSlot: unique(\"unique_booking_slot\").on(table.hostessId, table.date, table.startTime),\n}));\n\n// Time Off Table\nexport const timeOff = pgTable(\"time_off\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  date: date(\"date\").notNull(),\n  startTime: integer(\"start_time\").notNull(),\n  endTime: integer(\"end_time\").notNull(),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  hostessDateIdx: index(\"timeoff_hostess_date_idx\").on(table.hostessId, table.date),\n}));\n\n// Weekly Schedule Table\nexport const weeklySchedule = pgTable(\"weekly_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  weekday: integer(\"weekday\").notNull(), // 0=Sun, 1=Mon, ..., 6=Sat\n  startTime: integer(\"start_time\"), // Shift start (minutes from midnight)\n  endTime: integer(\"end_time\"), // Shift end (minutes from midnight)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  uniqueHostessWeekday: unique(\"unique_hostess_weekday\").on(table.hostessId, table.weekday),\n}));\n\n// Audit Log Table\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  entity: text(\"entity\").notNull(),\n  entityId: text(\"entity_id\").notNull(),\n  meta: jsonb(\"meta\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  createdAtIdx: index(\"audit_log_created_at_idx\").on(table.createdAt),\n  entityIdx: index(\"audit_log_entity_idx\").on(table.entity, table.entityId),\n}));\n\n// Photo Uploads Table\nexport const photoUploads = pgTable(\"photo_uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  photoUrl: text(\"photo_url\").notNull(),\n  status: photoUploadStatusEnum(\"status\").notNull().default('PENDING'),\n  uploadedAt: timestamp(\"uploaded_at\").notNull().defaultNow(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n}, (table) => ({\n  hostessIdx: index(\"photo_uploads_hostess_idx\").on(table.hostessId),\n  statusIdx: index(\"photo_uploads_status_idx\").on(table.status),\n}));\n\n// Upcoming Schedule Table (Preview-only schedule for clients to view)\nexport const upcomingSchedule = pgTable(\"upcoming_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: date(\"date\").notNull(),\n  startTime: integer(\"start_time\").notNull(), // minutes from midnight\n  endTime: integer(\"end_time\").notNull(), // minutes from midnight\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  serviceId: varchar(\"service_id\").references(() => services.id), // Optional service indicator\n  notes: text(\"notes\"), // Optional display note\n  uploadedBy: varchar(\"uploaded_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  hostessDateIdx: index(\"upcoming_schedule_hostess_date_idx\").on(table.hostessId, table.date),\n  dateIdx: index(\"upcoming_schedule_date_idx\").on(table.date),\n}));\n\n// Conversations Table (messaging between clients and hostesses)\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => users.id),\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  lastMessageAt: timestamp(\"last_message_at\").notNull().defaultNow(),\n  clientLastReadAt: timestamp(\"client_last_read_at\"),\n  hostessLastReadAt: timestamp(\"hostess_last_read_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  clientIdx: index(\"conversations_client_idx\").on(table.clientId),\n  hostessIdx: index(\"conversations_hostess_idx\").on(table.hostessId),\n  uniqueClientHostess: unique(\"unique_client_hostess\").on(table.clientId, table.hostessId),\n}));\n\n// Messages Table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: 'cascade' }),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  conversationIdx: index(\"messages_conversation_idx\").on(table.conversationId),\n  createdAtIdx: index(\"messages_created_at_idx\").on(table.createdAt),\n}));\n\n// Trigger Words Table (admin-managed words for monitoring)\nexport const triggerWords = pgTable(\"trigger_words\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: text(\"word\").notNull().unique(),\n  addedBy: varchar(\"added_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  wordIdx: index(\"trigger_words_word_idx\").on(table.word),\n}));\n\n// Flagged Conversations Table\nexport const flaggedConversations = pgTable(\"flagged_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: 'cascade' }),\n  messageId: varchar(\"message_id\").notNull().references(() => messages.id, { onDelete: 'cascade' }),\n  triggeredWord: text(\"triggered_word\").notNull(),\n  reviewed: boolean(\"reviewed\").notNull().default(false),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  flaggedAt: timestamp(\"flagged_at\").notNull().defaultNow(),\n}, (table) => ({\n  conversationIdx: index(\"flagged_conversations_conversation_idx\").on(table.conversationId),\n  reviewedIdx: index(\"flagged_conversations_reviewed_idx\").on(table.reviewed),\n}));\n\n// Reviews Table (client reviews for hostesses)\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostessId: varchar(\"hostess_id\").notNull().references(() => hostesses.id),\n  clientId: varchar(\"client_id\").notNull().references(() => users.id),\n  bookingId: varchar(\"booking_id\").notNull().references(() => bookings.id),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  comment: text(\"comment\"),\n  status: reviewStatusEnum(\"status\").notNull().default('PENDING'),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  hostessIdx: index(\"reviews_hostess_idx\").on(table.hostessId),\n  clientIdx: index(\"reviews_client_idx\").on(table.clientId),\n  bookingIdx: index(\"reviews_booking_idx\").on(table.bookingId),\n  statusIdx: index(\"reviews_status_idx\").on(table.status),\n  uniqueBookingReview: unique(\"unique_booking_review\").on(table.bookingId),\n}));\n\n// Zod Schemas for Validation\nexport const insertUserSchema = createInsertSchema(users, {\n  username: z.string().min(1),\n  email: z.string().email(),\n  passwordHash: z.string().min(1),\n  role: z.enum(['ADMIN', 'STAFF', 'RECEPTION', 'CLIENT']),\n}).omit({ id: true, createdAt: true });\n\nexport const insertHostessSchema = createInsertSchema(hostesses, {\n  slug: z.string().min(1).regex(/^[a-z0-9-]+$/),\n  displayName: z.string().min(1),\n  locations: z.array(z.enum(['DOWNTOWN', 'WEST_END'])).min(1, \"At least one location is required\"),\n}).omit({ id: true, createdAt: true });\n\nexport const insertServiceSchema = createInsertSchema(services, {\n  name: z.string().min(1),\n  durationMin: z.number().int().positive(),\n  priceCents: z.number().int().nonnegative(),\n}).omit({ id: true });\n\nexport const insertBookingSchema = createInsertSchema(bookings, {\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n  startTime: z.number().int().min(0).max(1439),\n  endTime: z.number().int().min(0).max(1439),\n  status: z.enum(['PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELED']),\n}).omit({ id: true, createdAt: true });\n\nexport const insertTimeOffSchema = createInsertSchema(timeOff, {\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n  startTime: z.number().int().min(0).max(1439),\n  endTime: z.number().int().min(0).max(1439),\n}).omit({ id: true, createdAt: true });\n\nexport const insertWeeklyScheduleSchema = createInsertSchema(weeklySchedule, {\n  weekday: z.number().int().min(0).max(6),\n}).omit({ id: true, createdAt: true });\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({ id: true, createdAt: true });\n\nexport const insertPhotoUploadSchema = createInsertSchema(photoUploads, {\n  photoUrl: z.string().url(),\n  status: z.enum(['PENDING', 'APPROVED', 'REJECTED']),\n}).omit({ id: true, uploadedAt: true, reviewedBy: true, reviewedAt: true });\n\nexport const insertUpcomingScheduleSchema = createInsertSchema(upcomingSchedule, {\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n  startTime: z.number().int().min(0).max(1439),\n  endTime: z.number().int().min(0).max(1439),\n}).omit({ id: true, createdAt: true });\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({ \n  id: true, \n  createdAt: true, \n  lastMessageAt: true,\n  clientLastReadAt: true,\n  hostessLastReadAt: true\n});\n\nexport const insertMessageSchema = createInsertSchema(messages, {\n  content: z.string().min(1).max(5000),\n}).omit({ id: true, createdAt: true });\n\nexport const insertTriggerWordSchema = createInsertSchema(triggerWords, {\n  word: z.string().min(1).max(100).toLowerCase(),\n}).omit({ id: true, createdAt: true });\n\nexport const insertFlaggedConversationSchema = createInsertSchema(flaggedConversations).omit({ \n  id: true, \n  flaggedAt: true,\n  reviewed: true,\n  reviewedBy: true,\n  reviewedAt: true\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews, {\n  rating: z.number().int().min(1).max(5),\n  comment: z.string().max(1000).optional(),\n  status: z.enum(['PENDING', 'APPROVED', 'REJECTED']),\n}).omit({ id: true, createdAt: true, reviewedBy: true, reviewedAt: true, status: true });\n\n// TypeScript Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Hostess = typeof hostesses.$inferSelect;\nexport type InsertHostess = z.infer<typeof insertHostessSchema>;\n\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type TimeOff = typeof timeOff.$inferSelect;\nexport type InsertTimeOff = z.infer<typeof insertTimeOffSchema>;\n\nexport type WeeklySchedule = typeof weeklySchedule.$inferSelect;\nexport type InsertWeeklySchedule = z.infer<typeof insertWeeklyScheduleSchema>;\n\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\nexport type PhotoUpload = typeof photoUploads.$inferSelect;\nexport type InsertPhotoUpload = z.infer<typeof insertPhotoUploadSchema>;\n\nexport type UpcomingSchedule = typeof upcomingSchedule.$inferSelect;\nexport type InsertUpcomingSchedule = z.infer<typeof insertUpcomingScheduleSchema>;\n\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type TriggerWord = typeof triggerWords.$inferSelect;\nexport type InsertTriggerWord = z.infer<typeof insertTriggerWordSchema>;\n\nexport type FlaggedConversation = typeof flaggedConversations.$inferSelect;\nexport type InsertFlaggedConversation = z.infer<typeof insertFlaggedConversationSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\n// Additional types for API responses\nexport type BookingWithDetails = Booking & {\n  hostess: Hostess;\n  client: User;\n  service: Service;\n};\n\nexport type HostessWithSchedule = Hostess & {\n  weeklySchedule: WeeklySchedule[];\n  timeOff: TimeOff[];\n};\n\nexport type PhotoUploadWithDetails = PhotoUpload & {\n  hostess: Hostess;\n  reviewer?: User;\n};\n\nexport type UpcomingScheduleWithDetails = UpcomingSchedule & {\n  hostess: Hostess;\n  service?: Service;\n  uploader: User;\n};\n\nexport type ConversationWithDetails = Conversation & {\n  client: User;\n  hostess: Hostess;\n  lastMessage?: Message;\n  unreadCount?: number;\n};\n\nexport type MessageWithSender = Message & {\n  sender: User;\n};\n\nexport type TriggerWordWithDetails = TriggerWord & {\n  addedByUser: User;\n};\n\nexport type FlaggedConversationWithDetails = FlaggedConversation & {\n  conversation: ConversationWithDetails;\n  message: Message;\n  reviewer?: User;\n};\n\nexport type ReviewWithDetails = Review & {\n  client: User;\n  hostess: Hostess;\n  booking: Booking;\n  reviewer?: User;\n};\n","size_bytes":16092},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/hostess-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MapPin, Clock, ArrowLeft, CheckCircle2 } from \"lucide-react\";\nimport { getCurrentDateToronto, getDayOfWeek, generateTimeSlots, minutesToTime, parseTimeToMinutes, GRID_START_TIME, GRID_END_TIME, SLOT_DURATION } from \"@/lib/time-utils\";\nimport { Footer } from \"@/components/footer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { HostessWithSchedule, Service } from \"@shared/schema\";\n\nconst bookingFormSchema = z.object({\n  serviceId: z.string().min(1, \"Please select a service\"),\n  startTime: z.string().min(1, \"Please select a time slot\"),\n  notes: z.string().optional(),\n});\n\ntype BookingFormData = z.infer<typeof bookingFormSchema>;\n\nexport default function HostessProfile() {\n  const params = useParams<{ slug: string }>();\n  const slug = params.slug || \"\";\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n\n  const { data: hostess, isLoading } = useQuery<HostessWithSchedule>({\n    queryKey: [`/api/hostesses/${slug}`],\n    enabled: !!slug,\n  });\n\n  const { data: services } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const sortedServices = services?.slice().sort((a, b) => a.durationMin - b.durationMin) || [];\n\n  // Fetch available slots for the selected date\n  const { data: availability } = useQuery({\n    queryKey: [\"/api/bookings/availability\", hostess?.id, selectedDate ? format(selectedDate, \"yyyy-MM-dd\") : \"\"],\n    queryFn: async () => {\n      if (!selectedDate || !hostess) return { bookedSlots: [] };\n      \n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n\n      const url = `/api/bookings/availability?hostessId=${hostess.id}&date=${format(selectedDate, \"yyyy-MM-dd\")}`;\n      const res = await fetch(url, { headers, credentials: \"include\" });\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${await res.text()}`);\n      }\n      \n      return await res.json();\n    },\n    enabled: !!selectedDate && !!hostess,\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      if (!selectedDate || !selectedService || !hostess) return;\n      \n      const startMinutes = parseTimeToMinutes(data.startTime);\n      const endMinutes = startMinutes + selectedService.durationMin;\n\n      return apiRequest(\"POST\", \"/api/bookings\", {\n        hostessId: hostess.id,\n        serviceId: data.serviceId,\n        date: format(selectedDate, \"yyyy-MM-dd\"),\n        startTime: startMinutes,\n        endTime: endMinutes,\n        notes: data.notes || null,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/bookings/my\"] });\n      toast({\n        title: \"Booking created\",\n        description: \"Your appointment has been scheduled successfully. You can message your hostess from My Bookings.\",\n      });\n      setLocation(\"/bookings\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Booking failed\",\n        description: error.message || \"Could not create booking\",\n      });\n    },\n  });\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      serviceId: \"\",\n      startTime: \"\",\n      notes: \"\",\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    createBookingMutation.mutate(data);\n  };\n\n  const availableSlots = generateTimeSlots(GRID_START_TIME, GRID_END_TIME, SLOT_DURATION);\n  const bookedSlots = availability?.bookedSlots || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-8\">\n        <div className=\"max-w-5xl mx-auto\">\n          <Card className=\"animate-pulse\">\n            <CardContent className=\"p-12\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"w-40 h-40 bg-muted rounded-full\" />\n                <div className=\"h-8 bg-muted rounded w-48\" />\n                <div className=\"h-4 bg-muted rounded w-32\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hostess) {\n    return (\n      <div className=\"min-h-screen bg-background p-8\">\n        <div className=\"max-w-5xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <p className=\"text-muted-foreground\">Hostess not found</p>\n              <Button onClick={() => setLocation(\"/hostesses\")} className=\"mt-4\">\n                Back to Hostesses\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"max-w-6xl mx-auto p-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/hostesses\")}\n            className=\"mb-6\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Hostesses\n          </Button>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Profile Info */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader className=\"items-center pb-4\">\n                  <Avatar className=\"w-40 h-40\">\n                    <AvatarImage src={hostess.photoUrl || undefined} alt={hostess.displayName} />\n                    <AvatarFallback className=\"text-3xl\">\n                      {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <h1 className=\"text-hostess-name font-semibold mb-2\">\n                      {hostess.displayName}\n                    </h1>\n                    {hostess.locations && hostess.locations.length > 0 && (\n                      <div className=\"flex gap-1 flex-wrap justify-center\">\n                        {hostess.locations.map((loc, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {hostess.bio && (\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">About</h3>\n                      <p className=\"text-sm text-muted-foreground\">{hostess.bio}</p>\n                    </div>\n                  )}\n\n                  {hostess.specialties && hostess.specialties.length > 0 && (\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">Specialties</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {hostess.specialties.map((specialty) => (\n                          <Badge key={specialty} variant=\"secondary\">\n                            {specialty}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Weekly Schedule */}\n                  {hostess.weeklySchedule && hostess.weeklySchedule.length > 0 && (\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">Weekly Schedule</h3>\n                      <div className=\"space-y-1 text-sm\">\n                        {hostess.weeklySchedule.map((schedule) => {\n                          const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n                          return (\n                            <div key={schedule.id} className=\"flex items-center gap-2\">\n                              <span className=\"font-medium w-12\">{days[schedule.weekday]}:</span>\n                              <span className=\"text-muted-foreground font-mono text-xs\">\n                                {schedule.startTime && schedule.endTime\n                                  ? `${Math.floor(schedule.startTime / 60)}:${(schedule.startTime % 60).toString().padStart(2, '0')}–${Math.floor(schedule.endTime / 60)}:${(schedule.endTime % 60).toString().padStart(2, '0')}`\n                                  : \"Closed\"}\n                              </span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Booking Flow - Single Page */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Book an Appointment</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                    {/* Step 1: Select a Date */}\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-4\">\n                        <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground font-semibold text-sm\">\n                          1\n                        </div>\n                        <h3 className=\"text-lg font-semibold\">Select a Date</h3>\n                      </div>\n                      <Calendar\n                        mode=\"single\"\n                        selected={selectedDate}\n                        onSelect={(date) => {\n                          setSelectedDate(date);\n                          // Clear time selection when date changes to prevent stale/invalid slot bookings\n                          form.setValue(\"startTime\", \"\");\n                        }}\n                        disabled={(date) => date < new Date(new Date().setHours(0, 0, 0, 0))}\n                        className=\"border rounded-md p-3\"\n                        data-testid=\"calendar-date-picker\"\n                      />\n                    </div>\n\n                    {/* Step 2: Choose Your Service */}\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-4\">\n                        <div className={`flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${\n                          selectedDate \n                            ? 'bg-primary text-primary-foreground' \n                            : 'bg-muted text-muted-foreground'\n                        }`}>\n                          2\n                        </div>\n                        <h3 className=\"text-lg font-semibold\">Choose Your Service</h3>\n                      </div>\n\n                      {!selectedDate ? (\n                        <div className=\"p-8 text-center border-2 border-dashed rounded-lg bg-muted/20\">\n                          <p className=\"text-muted-foreground\">\n                            Please select a date first to view available services\n                          </p>\n                        </div>\n                      ) : (\n                        <RadioGroup\n                          onValueChange={(value) => {\n                            form.setValue(\"serviceId\", value);\n                            const service = sortedServices.find(s => s.id === value);\n                            setSelectedService(service || null);\n                            form.setValue(\"startTime\", \"\"); // Reset time when service changes\n                          }}\n                          value={form.watch(\"serviceId\")}\n                          className=\"grid grid-cols-1 md:grid-cols-2 gap-3\"\n                        >\n                          {sortedServices.map((service) => {\n                            const isSelected = form.watch(\"serviceId\") === service.id;\n                            return (\n                              <div key={service.id} className=\"relative\">\n                                <RadioGroupItem\n                                  value={service.id}\n                                  id={`service-${service.id}`}\n                                  className=\"peer sr-only\"\n                                  data-testid={`radio-service-${service.id}`}\n                                />\n                                <Label\n                                  htmlFor={`service-${service.id}`}\n                                  className=\"cursor-pointer block peer-focus-visible:ring-2 peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2 rounded-md\"\n                                  data-testid={`service-card-${service.id}`}\n                                >\n                                  <Card\n                                    className={`transition-all hover-elevate active-elevate-2 ${\n                                      isSelected \n                                        ? 'border-primary border-2 bg-primary/5' \n                                        : ''\n                                    }`}\n                                  >\n                                    <CardContent className=\"p-4\">\n                                      <div className=\"flex items-start justify-between gap-2\">\n                                        <div className=\"flex-1 min-w-0\">\n                                          <h4 className=\"font-semibold text-base mb-2 flex items-center gap-2\">\n                                            {service.name}\n                                            {isSelected && (\n                                              <CheckCircle2 className=\"h-4 w-4 text-primary flex-shrink-0\" />\n                                            )}\n                                          </h4>\n                                          <div className=\"flex flex-col gap-1.5\">\n                                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                                              <Clock className=\"h-4 w-4 flex-shrink-0\" />\n                                              <span>{service.durationMin} minutes</span>\n                                            </div>\n                                            <div className=\"flex items-center gap-2\">\n                                              <span className=\"text-lg font-bold text-primary\">\n                                                ${(service.priceCents / 100).toFixed(2)}\n                                              </span>\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </CardContent>\n                                  </Card>\n                                </Label>\n                              </div>\n                            );\n                          })}\n                        </RadioGroup>\n                      )}\n                      {form.formState.errors.serviceId && (\n                        <p className=\"text-sm text-destructive mt-2\">\n                          {form.formState.errors.serviceId.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Step 3: Pick Available Time */}\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-4\">\n                        <div className={`flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${\n                          selectedService \n                            ? 'bg-primary text-primary-foreground' \n                            : 'bg-muted text-muted-foreground'\n                        }`}>\n                          3\n                        </div>\n                        <h3 className=\"text-lg font-semibold\">Select a Time</h3>\n                        {selectedService && (\n                          <Badge variant=\"secondary\" className=\"ml-auto\">\n                            {selectedService.durationMin} min session\n                          </Badge>\n                        )}\n                      </div>\n\n                      {!selectedService ? (\n                        <div className=\"p-8 text-center border-2 border-dashed rounded-lg bg-muted/20\">\n                          <p className=\"text-muted-foreground\">\n                            Please select a service first to view available time slots\n                          </p>\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-4 md:grid-cols-6 gap-2\">\n                          {availableSlots.map((slot) => {\n                            const timeStr = minutesToTime(slot);\n                            const isBooked = bookedSlots.includes(slot);\n                            const isSelected = form.watch(\"startTime\") === timeStr;\n\n                            return (\n                              <Button\n                                key={slot}\n                                type=\"button\"\n                                variant={isSelected ? \"default\" : \"outline\"}\n                                disabled={isBooked}\n                                onClick={() => form.setValue(\"startTime\", timeStr)}\n                                className=\"font-mono\"\n                                data-testid={`slot-${timeStr}`}\n                              >\n                                {timeStr}\n                              </Button>\n                            );\n                          })}\n                        </div>\n                      )}\n                      {form.formState.errors.startTime && (\n                        <p className=\"text-sm text-destructive mt-2\">\n                          {form.formState.errors.startTime.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Step 4: Add Notes (Optional) */}\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-4\">\n                        <div className={`flex items-center justify-center w-8 h-8 rounded-full font-semibold text-sm ${\n                          form.watch(\"notes\") \n                            ? 'bg-primary text-primary-foreground' \n                            : 'bg-muted text-muted-foreground'\n                        }`}>\n                          4\n                        </div>\n                        <h3 className=\"text-lg font-semibold\">\n                          Add Notes <span className=\"text-sm font-normal text-muted-foreground\">(Optional)</span>\n                        </h3>\n                      </div>\n                      <Textarea\n                        placeholder=\"Any special requests or preferences...\"\n                        data-testid=\"input-notes\"\n                        {...form.register(\"notes\")}\n                      />\n                    </div>\n\n                    {/* Submit Button */}\n                    <div className=\"pt-4\">\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        size=\"lg\"\n                        disabled={createBookingMutation.isPending || !selectedDate || !selectedService || !form.watch(\"startTime\")}\n                        data-testid=\"button-confirm-booking\"\n                      >\n                        {createBookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":20929},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, and, gte, lte, or, desc, asc, inArray, sql } from \"drizzle-orm\";\nimport type {\n  User,\n  InsertUser,\n  Hostess,\n  InsertHostess,\n  Service,\n  InsertService,\n  Booking,\n  InsertBooking,\n  BookingWithDetails,\n  TimeOff,\n  InsertTimeOff,\n  WeeklySchedule,\n  InsertWeeklySchedule,\n  AuditLog,\n  InsertAuditLog,\n  HostessWithSchedule,\n  PhotoUpload,\n  InsertPhotoUpload,\n  PhotoUploadWithDetails,\n  UpcomingSchedule,\n  InsertUpcomingSchedule,\n  UpcomingScheduleWithDetails,\n  Conversation,\n  InsertConversation,\n  ConversationWithDetails,\n  Message,\n  InsertMessage,\n  MessageWithSender,\n  TriggerWord,\n  InsertTriggerWord,\n  TriggerWordWithDetails,\n  FlaggedConversation,\n  InsertFlaggedConversation,\n  FlaggedConversationWithDetails,\n  Review,\n  InsertReview,\n  ReviewWithDetails,\n} from \"@shared/schema\";\nimport {\n  users,\n  hostesses,\n  services,\n  bookings,\n  timeOff,\n  weeklySchedule,\n  auditLog,\n  photoUploads,\n  upcomingSchedule,\n  conversations,\n  messages,\n  triggerWords,\n  flaggedConversations,\n  reviews,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n\n  // Hostess operations\n  getHostessById(id: string): Promise<Hostess | undefined>;\n  getHostessBySlug(slug: string): Promise<Hostess | undefined>;\n  getHostessWithSchedule(id: string): Promise<HostessWithSchedule | undefined>;\n  getHostesses(location?: string): Promise<Hostess[]>;\n  createHostess(hostess: InsertHostess): Promise<Hostess>;\n  updateHostess(id: string, data: Partial<Hostess>): Promise<Hostess>;\n\n  // Service operations\n  getAllServices(): Promise<Service[]>;\n  getServiceById(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, data: Partial<Service>): Promise<Service>;\n  deleteService(id: string): Promise<void>;\n  getBookingsByService(serviceId: string): Promise<Booking[]>;\n\n  // Booking operations\n  getBookingById(id: string): Promise<Booking | undefined>;\n  getBookingWithDetails(id: string): Promise<BookingWithDetails | undefined>;\n  getBookingsByDate(date: string, location?: string): Promise<BookingWithDetails[]>;\n  getBookingsByDateRange(startDate: string, endDate: string, location?: string): Promise<BookingWithDetails[]>;\n  getBookingsByClient(clientId: string): Promise<BookingWithDetails[]>;\n  getUpcomingBookings(limit?: number): Promise<BookingWithDetails[]>;\n  getAllBookings(): Promise<BookingWithDetails[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, data: Partial<Booking>): Promise<Booking>;\n  deleteAllClientBookings(): Promise<number>;\n\n  // Time Off operations\n  getTimeOffByHostess(hostessId: string, date?: string): Promise<TimeOff[]>;\n  createTimeOff(data: InsertTimeOff): Promise<TimeOff>;\n\n  // Weekly Schedule operations\n  getWeeklyScheduleByHostess(hostessId: string): Promise<WeeklySchedule[]>;\n  upsertWeeklySchedule(data: InsertWeeklySchedule): Promise<WeeklySchedule>;\n\n  // Audit Log operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(filters?: { entity?: string; entityId?: string; userId?: string }): Promise<AuditLog[]>;\n\n  // Photo Upload operations\n  getPhotoUploadById(id: string): Promise<PhotoUpload | undefined>;\n  getPhotoUploadWithDetails(id: string): Promise<PhotoUploadWithDetails | undefined>;\n  getPendingPhotoUploads(): Promise<PhotoUploadWithDetails[]>;\n  getPhotoUploadsByHostess(hostessId: string): Promise<PhotoUpload[]>;\n  createPhotoUpload(data: InsertPhotoUpload): Promise<PhotoUpload>;\n  approvePhotoUpload(id: string, reviewerId: string): Promise<PhotoUpload>;\n  rejectPhotoUpload(id: string, reviewerId: string): Promise<PhotoUpload>;\n\n  // Search operations\n  getAllClients(): Promise<User[]>;\n  searchClients(query: string): Promise<User[]>;\n\n  // Upcoming Schedule operations\n  getUpcomingSchedule(startDate: string, endDate: string): Promise<UpcomingScheduleWithDetails[]>;\n  createUpcomingSchedule(data: InsertUpcomingSchedule): Promise<UpcomingSchedule>;\n  deleteUpcomingSchedule(id: string): Promise<void>;\n  clearUpcomingSchedule(): Promise<void>;\n  getServices(): Promise<Service[]>;\n\n  // Hostess lookup by userId\n  getHostessByUserId(userId: string): Promise<Hostess | undefined>;\n\n  // Messaging operations\n  getConversations(userId: string): Promise<ConversationWithDetails[]>;\n  getConversationById(id: string): Promise<Conversation | undefined>;\n  getOrCreateConversation(clientId: string, hostessId: string): Promise<ConversationWithDetails>;\n  updateConversationLastMessage(id: string): Promise<void>;\n  markConversationAsRead(conversationId: string, userId: string): Promise<void>;\n  \n  getMessages(conversationId: string): Promise<MessageWithSender[]>;\n  createMessage(data: InsertMessage): Promise<Message>;\n\n  // Trigger Words operations (admin)\n  getTriggerWords(): Promise<TriggerWord[]>;\n  getTriggerWordsWithDetails(): Promise<TriggerWordWithDetails[]>;\n  createTriggerWord(data: InsertTriggerWord): Promise<TriggerWord>;\n  deleteTriggerWord(id: string): Promise<void>;\n\n  // Flagged Conversations operations (admin)\n  getFlaggedConversations(reviewed?: boolean): Promise<FlaggedConversationWithDetails[]>;\n  createFlaggedConversation(data: InsertFlaggedConversation): Promise<FlaggedConversation>;\n  markFlaggedConversationAsReviewed(id: string, reviewerId: string): Promise<void>;\n\n  // Review operations\n  getReviewsByHostess(hostessId: string, approvedOnly?: boolean): Promise<ReviewWithDetails[]>;\n  getReviewsByClient(clientId: string): Promise<ReviewWithDetails[]>;\n  getReviewById(id: string): Promise<ReviewWithDetails | undefined>;\n  canClientReview(bookingId: string, clientId: string): Promise<boolean>;\n  createReview(data: InsertReview): Promise<Review>;\n  getPendingReviews(): Promise<ReviewWithDetails[]>;\n  approveReview(id: string, reviewerId: string): Promise<Review>;\n  rejectReview(id: string, reviewerId: string): Promise<Review>;\n  getHostessAverageRating(hostessId: string): Promise<{ average: number; count: number }>;\n}\n\nexport class DbStorage implements IStorage {\n  // User operations\n  async getUserById(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    const result = await db.update(users).set(data).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Hostess operations\n  async getHostessById(id: string): Promise<Hostess | undefined> {\n    const result = await db.select().from(hostesses).where(eq(hostesses.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getHostessBySlug(slug: string): Promise<Hostess | undefined> {\n    const result = await db.select().from(hostesses).where(eq(hostesses.slug, slug)).limit(1);\n    return result[0];\n  }\n\n  async getHostessWithSchedule(id: string): Promise<HostessWithSchedule | undefined> {\n    const hostess = await this.getHostessById(id);\n    if (!hostess) return undefined;\n\n    const schedule = await this.getWeeklyScheduleByHostess(id);\n    const timeOffData = await this.getTimeOffByHostess(id);\n\n    return {\n      ...hostess,\n      weeklySchedule: schedule,\n      timeOff: timeOffData,\n    };\n  }\n\n  async getHostesses(location?: string): Promise<Hostess[]> {\n    if (location) {\n      return await db.select().from(hostesses).where(sql`${hostesses.locations} @> ARRAY[${location}]::text[]`);\n    }\n    return await db.select().from(hostesses);\n  }\n\n  async createHostess(hostess: InsertHostess): Promise<Hostess> {\n    const result = await db.insert(hostesses).values(hostess).returning();\n    return result[0];\n  }\n\n  async updateHostess(id: string, data: Partial<Hostess>): Promise<Hostess> {\n    const result = await db.update(hostesses).set(data).where(eq(hostesses.id, id)).returning();\n    return result[0];\n  }\n\n  // Service operations\n  async getAllServices(): Promise<Service[]> {\n    return await db.select().from(services).orderBy(asc(services.durationMin));\n  }\n\n  async getServiceById(id: string): Promise<Service | undefined> {\n    const result = await db.select().from(services).where(eq(services.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const result = await db.insert(services).values(service).returning();\n    return result[0];\n  }\n\n  async updateService(id: string, data: Partial<Service>): Promise<Service> {\n    const result = await db.update(services).set(data).where(eq(services.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteService(id: string): Promise<void> {\n    await db.delete(services).where(eq(services.id, id));\n  }\n\n  async getBookingsByService(serviceId: string): Promise<Booking[]> {\n    return await db.select().from(bookings).where(eq(bookings.serviceId, serviceId));\n  }\n\n  // Booking operations\n  async getBookingById(id: string): Promise<Booking | undefined> {\n    const result = await db.select().from(bookings).where(eq(bookings.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getBookingWithDetails(id: string): Promise<BookingWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .where(eq(bookings.id, id))\n      .limit(1);\n\n    if (!result[0] || !result[0].hostesses || !result[0].users || !result[0].services) {\n      return undefined;\n    }\n\n    return {\n      ...result[0].bookings,\n      hostess: result[0].hostesses,\n      client: result[0].users,\n      service: result[0].services,\n    };\n  }\n\n  async getBookingsByDate(date: string, location?: string): Promise<BookingWithDetails[]> {\n    let query = db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .where(eq(bookings.date, date));\n\n    const result = await query;\n\n    return result\n      .filter(r => r.hostesses && r.users && r.services)\n      .filter(r => !location || r.hostesses?.locations?.includes(location))\n      .map(r => ({\n        ...r.bookings,\n        hostess: r.hostesses!,\n        client: r.users!,\n        service: r.services!,\n      }));\n  }\n\n  async getBookingsByDateRange(startDate: string, endDate: string, location?: string): Promise<BookingWithDetails[]> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .where(and(gte(bookings.date, startDate), lte(bookings.date, endDate)));\n\n    return result\n      .filter(r => r.hostesses && r.users && r.services)\n      .filter(r => !location || r.hostesses?.locations?.includes(location))\n      .map(r => ({\n        ...r.bookings,\n        hostess: r.hostesses!,\n        client: r.users!,\n        service: r.services!,\n      }));\n  }\n\n  async getBookingsByClient(clientId: string): Promise<BookingWithDetails[]> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .where(eq(bookings.clientId, clientId))\n      .orderBy(desc(bookings.date));\n\n    return result\n      .filter(r => r.hostesses && r.users && r.services)\n      .map(r => ({\n        ...r.bookings,\n        hostess: r.hostesses!,\n        client: r.users!,\n        service: r.services!,\n      }));\n  }\n\n  async getUpcomingBookings(limit: number = 10): Promise<BookingWithDetails[]> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .where(gte(bookings.date, today))\n      .orderBy(asc(bookings.date), asc(bookings.startTime))\n      .limit(limit);\n\n    return result\n      .filter(r => r.hostesses && r.users && r.services)\n      .map(r => ({\n        ...r.bookings,\n        hostess: r.hostesses!,\n        client: r.users!,\n        service: r.services!,\n      }));\n  }\n\n  async getAllBookings(): Promise<BookingWithDetails[]> {\n    const result = await db\n      .select()\n      .from(bookings)\n      .leftJoin(hostesses, eq(bookings.hostessId, hostesses.id))\n      .leftJoin(users, eq(bookings.clientId, users.id))\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .orderBy(asc(bookings.date), asc(bookings.startTime));\n\n    return result\n      .filter(r => r.hostesses && r.users && r.services)\n      .map(r => ({\n        ...r.bookings,\n        hostess: r.hostesses!,\n        client: r.users!,\n        service: r.services!,\n      }));\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const result = await db.insert(bookings).values(booking).returning();\n    return result[0];\n  }\n\n  async updateBooking(id: string, data: Partial<Booking>): Promise<Booking> {\n    const result = await db.update(bookings).set(data).where(eq(bookings.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteAllClientBookings(): Promise<number> {\n    // Get all CLIENT user IDs\n    const clientUsers = await db.select({ id: users.id }).from(users).where(eq(users.role, \"CLIENT\"));\n    const clientIds = clientUsers.map(u => u.id);\n    \n    if (clientIds.length === 0) {\n      return 0;\n    }\n    \n    // Delete all bookings made by CLIENT users\n    const result = await db.delete(bookings).where(\n      inArray(bookings.clientId, clientIds)\n    ).returning();\n    \n    return result.length;\n  }\n\n  // Time Off operations\n  async getTimeOffByHostess(hostessId: string, date?: string): Promise<TimeOff[]> {\n    if (date) {\n      return await db\n        .select()\n        .from(timeOff)\n        .where(and(eq(timeOff.hostessId, hostessId), eq(timeOff.date, date)));\n    }\n    return await db.select().from(timeOff).where(eq(timeOff.hostessId, hostessId));\n  }\n\n  async createTimeOff(data: InsertTimeOff): Promise<TimeOff> {\n    const result = await db.insert(timeOff).values(data).returning();\n    return result[0];\n  }\n\n  // Weekly Schedule operations\n  async getWeeklyScheduleByHostess(hostessId: string): Promise<WeeklySchedule[]> {\n    return await db\n      .select()\n      .from(weeklySchedule)\n      .where(eq(weeklySchedule.hostessId, hostessId))\n      .orderBy(asc(weeklySchedule.weekday));\n  }\n\n  async upsertWeeklySchedule(data: InsertWeeklySchedule): Promise<WeeklySchedule> {\n    const existing = await db\n      .select()\n      .from(weeklySchedule)\n      .where(\n        and(\n          eq(weeklySchedule.hostessId, data.hostessId),\n          eq(weeklySchedule.weekday, data.weekday)\n        )\n      )\n      .limit(1);\n\n    if (existing[0]) {\n      const result = await db\n        .update(weeklySchedule)\n        .set(data)\n        .where(eq(weeklySchedule.id, existing[0].id))\n        .returning();\n      return result[0];\n    }\n\n    const result = await db.insert(weeklySchedule).values(data).returning();\n    return result[0];\n  }\n\n  // Audit Log operations\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const result = await db.insert(auditLog).values(log).returning();\n    return result[0];\n  }\n\n  async getAuditLogs(filters?: { entity?: string; entityId?: string; userId?: string }): Promise<AuditLog[]> {\n    let query = db.select().from(auditLog);\n\n    const conditions = [];\n    if (filters?.entity) conditions.push(eq(auditLog.entity, filters.entity));\n    if (filters?.entityId) conditions.push(eq(auditLog.entityId, filters.entityId));\n    if (filters?.userId) conditions.push(eq(auditLog.userId, filters.userId));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    return await query.orderBy(desc(auditLog.createdAt));\n  }\n\n  // Photo Upload operations\n  async getPhotoUploadById(id: string): Promise<PhotoUpload | undefined> {\n    const result = await db.select().from(photoUploads).where(eq(photoUploads.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPhotoUploadWithDetails(id: string): Promise<PhotoUploadWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(photoUploads)\n      .leftJoin(hostesses, eq(photoUploads.hostessId, hostesses.id))\n      .leftJoin(users, eq(photoUploads.reviewedBy, users.id))\n      .where(eq(photoUploads.id, id))\n      .limit(1);\n    \n    if (!result[0] || !result[0].hostesses) return undefined;\n    \n    return {\n      ...result[0].photo_uploads,\n      hostess: result[0].hostesses,\n      reviewer: result[0].users || undefined,\n    };\n  }\n\n  async getPendingPhotoUploads(): Promise<PhotoUploadWithDetails[]> {\n    const results = await db\n      .select()\n      .from(photoUploads)\n      .leftJoin(hostesses, eq(photoUploads.hostessId, hostesses.id))\n      .leftJoin(users, eq(photoUploads.reviewedBy, users.id))\n      .where(eq(photoUploads.status, 'PENDING'))\n      .orderBy(desc(photoUploads.uploadedAt));\n    \n    return results\n      .filter(r => r.hostesses)\n      .map(r => ({\n        ...r.photo_uploads,\n        hostess: r.hostesses!,\n        reviewer: r.users || undefined,\n      }));\n  }\n\n  async getPhotoUploadsByHostess(hostessId: string): Promise<PhotoUpload[]> {\n    return await db\n      .select()\n      .from(photoUploads)\n      .where(eq(photoUploads.hostessId, hostessId))\n      .orderBy(desc(photoUploads.uploadedAt));\n  }\n\n  async createPhotoUpload(data: InsertPhotoUpload): Promise<PhotoUpload> {\n    const result = await db.insert(photoUploads).values(data).returning();\n    return result[0];\n  }\n\n  async approvePhotoUpload(id: string, reviewerId: string): Promise<PhotoUpload> {\n    // Get the upload\n    const upload = await this.getPhotoUploadById(id);\n    if (!upload) {\n      throw new Error('Photo upload not found');\n    }\n\n    // Update the upload status\n    const updatedUpload = await db\n      .update(photoUploads)\n      .set({ \n        status: 'APPROVED', \n        reviewedBy: reviewerId, \n        reviewedAt: new Date() \n      })\n      .where(eq(photoUploads.id, id))\n      .returning();\n\n    // Update the hostess photoUrl\n    await db\n      .update(hostesses)\n      .set({ photoUrl: upload.photoUrl })\n      .where(eq(hostesses.id, upload.hostessId));\n\n    return updatedUpload[0];\n  }\n\n  async rejectPhotoUpload(id: string, reviewerId: string): Promise<PhotoUpload> {\n    const result = await db\n      .update(photoUploads)\n      .set({ \n        status: 'REJECTED', \n        reviewedBy: reviewerId, \n        reviewedAt: new Date() \n      })\n      .where(eq(photoUploads.id, id))\n      .returning();\n    \n    return result[0];\n  }\n\n  // Search operations\n  async getAllClients(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, 'CLIENT'))\n      .orderBy(users.email);\n  }\n\n  async searchClients(query: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(and(eq(users.role, 'CLIENT'), eq(users.email, query)))\n      .limit(10);\n  }\n\n  // Upcoming Schedule operations\n  async getUpcomingSchedule(startDate: string, endDate: string): Promise<UpcomingScheduleWithDetails[]> {\n    const results = await db\n      .select()\n      .from(upcomingSchedule)\n      .leftJoin(hostesses, eq(upcomingSchedule.hostessId, hostesses.id))\n      .leftJoin(services, eq(upcomingSchedule.serviceId, services.id))\n      .leftJoin(users, eq(upcomingSchedule.uploadedBy, users.id))\n      .where(and(\n        gte(upcomingSchedule.date, startDate),\n        lte(upcomingSchedule.date, endDate)\n      ))\n      .orderBy(upcomingSchedule.date, upcomingSchedule.startTime);\n\n    return results.map(row => ({\n      ...row.upcoming_schedule!,\n      hostess: row.hostesses!,\n      service: row.services || undefined,\n      uploader: row.users!,\n    }));\n  }\n\n  async createUpcomingSchedule(data: InsertUpcomingSchedule): Promise<UpcomingSchedule> {\n    const result = await db.insert(upcomingSchedule).values(data).returning();\n    return result[0];\n  }\n\n  async deleteUpcomingSchedule(id: string): Promise<void> {\n    await db.delete(upcomingSchedule).where(eq(upcomingSchedule.id, id));\n  }\n\n  async clearUpcomingSchedule(): Promise<void> {\n    await db.delete(upcomingSchedule);\n  }\n\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services);\n  }\n\n  // Hostess lookup by userId\n  async getHostessByUserId(userId: string): Promise<Hostess | undefined> {\n    const result = await db\n      .select()\n      .from(hostesses)\n      .where(eq(hostesses.userId, userId))\n      .limit(1);\n    return result[0];\n  }\n\n  // Messaging operations\n  async getConversations(userId: string): Promise<ConversationWithDetails[]> {\n    // Get conversations where user is either the client or the hostess (via staff userId)\n    const staffHostess = await this.getHostessByUserId(userId);\n    \n    const results = await db\n      .select()\n      .from(conversations)\n      .leftJoin(users, eq(conversations.clientId, users.id))\n      .leftJoin(hostesses, eq(conversations.hostessId, hostesses.id))\n      .where(\n        staffHostess \n          ? or(eq(conversations.clientId, userId), eq(conversations.hostessId, staffHostess.id))!\n          : eq(conversations.clientId, userId)\n      )\n      .orderBy(desc(conversations.lastMessageAt));\n\n    // Get last message and unread count for each conversation\n    const conversationsWithDetails: ConversationWithDetails[] = [];\n    \n    for (const row of results) {\n      const conversation = row.conversations;\n      \n      // Get last message\n      const lastMessageResult = await db\n        .select()\n        .from(messages)\n        .where(eq(messages.conversationId, conversation.id))\n        .orderBy(desc(messages.createdAt))\n        .limit(1);\n\n      // Calculate unread count\n      const isClient = conversation.clientId === userId;\n      const lastReadAt = isClient ? conversation.clientLastReadAt : conversation.hostessLastReadAt;\n      \n      let unreadCount = 0;\n      if (lastReadAt) {\n        const unreadResult = await db\n          .select({ count: sql<number>`count(*)` })\n          .from(messages)\n          .where(and(\n            eq(messages.conversationId, conversation.id),\n            gte(messages.createdAt, lastReadAt)\n          ));\n        unreadCount = Number(unreadResult[0]?.count || 0);\n      } else {\n        // If never read, count all messages not sent by this user\n        const unreadResult = await db\n          .select({ count: sql<number>`count(*)` })\n          .from(messages)\n          .where(and(\n            eq(messages.conversationId, conversation.id),\n            sql`${messages.senderId} != ${userId}`\n          ));\n        unreadCount = Number(unreadResult[0]?.count || 0);\n      }\n\n      conversationsWithDetails.push({\n        ...conversation,\n        client: row.users!,\n        hostess: row.hostesses!,\n        lastMessage: lastMessageResult[0] || undefined,\n        unreadCount,\n      });\n    }\n\n    return conversationsWithDetails;\n  }\n\n  async getConversationById(id: string): Promise<Conversation | undefined> {\n    const result = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getOrCreateConversation(clientId: string, hostessId: string): Promise<ConversationWithDetails> {\n    // Try to find existing conversation\n    const existingResults = await db\n      .select()\n      .from(conversations)\n      .leftJoin(users, eq(conversations.clientId, users.id))\n      .leftJoin(hostesses, eq(conversations.hostessId, hostesses.id))\n      .where(and(\n        eq(conversations.clientId, clientId),\n        eq(conversations.hostessId, hostessId)\n      ))\n      .limit(1);\n\n    if (existingResults.length > 0) {\n      const row = existingResults[0];\n      return {\n        ...row.conversations,\n        client: row.users!,\n        hostess: row.hostesses!,\n      };\n    }\n\n    // Create new conversation\n    const newConvResult = await db\n      .insert(conversations)\n      .values({ clientId, hostessId })\n      .returning();\n\n    const newConv = newConvResult[0];\n\n    // Fetch client and hostess data\n    const client = await this.getUserById(clientId);\n    const hostess = await this.getHostessById(hostessId);\n\n    return {\n      ...newConv,\n      client: client!,\n      hostess: hostess!,\n    };\n  }\n\n  async updateConversationLastMessage(id: string): Promise<void> {\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(conversations.id, id));\n  }\n\n  async markConversationAsRead(conversationId: string, userId: string): Promise<void> {\n    // Check if user is the client or hostess (via staff userId)\n    const conversation = await this.getConversationById(conversationId);\n    if (!conversation) return;\n\n    const staffHostess = await this.getHostessByUserId(userId);\n    const isClient = conversation.clientId === userId;\n    const isHostess = staffHostess && conversation.hostessId === staffHostess.id;\n\n    if (!isClient && !isHostess) return;\n\n    // Update the appropriate lastReadAt timestamp using SQL NOW() to avoid Date serialization issues\n    await db\n      .update(conversations)\n      .set(isClient ? { clientLastReadAt: sql`NOW()` } : { hostessLastReadAt: sql`NOW()` })\n      .where(eq(conversations.id, conversationId));\n  }\n\n  async getMessages(conversationId: string): Promise<MessageWithSender[]> {\n    const results = await db\n      .select()\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(asc(messages.createdAt));\n\n    return results.map(row => ({\n      ...row.messages,\n      sender: row.users!,\n    }));\n  }\n\n  async createMessage(data: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(data).returning();\n    return result[0];\n  }\n\n  // Trigger Words operations\n  async getTriggerWords(): Promise<TriggerWord[]> {\n    return await db.select().from(triggerWords).orderBy(triggerWords.word);\n  }\n\n  async getTriggerWordsWithDetails(): Promise<TriggerWordWithDetails[]> {\n    const results = await db\n      .select()\n      .from(triggerWords)\n      .leftJoin(users, eq(triggerWords.addedBy, users.id))\n      .orderBy(triggerWords.word);\n\n    return results.map(row => ({\n      ...row.trigger_words,\n      addedByUser: row.users!,\n    }));\n  }\n\n  async createTriggerWord(data: InsertTriggerWord): Promise<TriggerWord> {\n    const result = await db.insert(triggerWords).values(data).returning();\n    return result[0];\n  }\n\n  async deleteTriggerWord(id: string): Promise<void> {\n    await db.delete(triggerWords).where(eq(triggerWords.id, id));\n  }\n\n  // Flagged Conversations operations\n  async getFlaggedConversations(reviewed?: boolean): Promise<FlaggedConversationWithDetails[]> {\n    const conditions = reviewed !== undefined ? eq(flaggedConversations.reviewed, reviewed) : undefined;\n\n    const results = await db\n      .select()\n      .from(flaggedConversations)\n      .leftJoin(conversations, eq(flaggedConversations.conversationId, conversations.id))\n      .leftJoin(messages, eq(flaggedConversations.messageId, messages.id))\n      .leftJoin(users, eq(flaggedConversations.reviewedBy, users.id))\n      .where(conditions)\n      .orderBy(desc(flaggedConversations.flaggedAt));\n\n    // Enrich conversations with client and hostess data\n    const enriched: FlaggedConversationWithDetails[] = [];\n\n    for (const row of results) {\n      const client = await this.getUserById(row.conversations!.clientId);\n      const hostess = await this.getHostessById(row.conversations!.hostessId);\n\n      enriched.push({\n        ...row.flagged_conversations,\n        conversation: {\n          ...row.conversations!,\n          client: client!,\n          hostess: hostess!,\n        },\n        message: row.messages!,\n        reviewer: row.users || undefined,\n      });\n    }\n\n    return enriched;\n  }\n\n  async createFlaggedConversation(data: InsertFlaggedConversation): Promise<FlaggedConversation> {\n    const result = await db.insert(flaggedConversations).values(data).returning();\n    return result[0];\n  }\n\n  async markFlaggedConversationAsReviewed(id: string, reviewerId: string): Promise<void> {\n    await db\n      .update(flaggedConversations)\n      .set({ \n        reviewed: true, \n        reviewedBy: reviewerId, \n        reviewedAt: new Date() \n      })\n      .where(eq(flaggedConversations.id, id));\n  }\n\n  // Review operations\n  async getReviewsByHostess(hostessId: string, approvedOnly: boolean = false): Promise<ReviewWithDetails[]> {\n    const conditions = approvedOnly \n      ? and(eq(reviews.hostessId, hostessId), eq(reviews.status, 'APPROVED'))\n      : eq(reviews.hostessId, hostessId);\n\n    const results = await db\n      .select()\n      .from(reviews)\n      .leftJoin(users, eq(reviews.clientId, users.id))\n      .leftJoin(hostesses, eq(reviews.hostessId, hostesses.id))\n      .leftJoin(bookings, eq(reviews.bookingId, bookings.id))\n      .where(conditions)\n      .orderBy(desc(reviews.createdAt));\n\n    return results.map(row => ({\n      ...row.reviews,\n      client: row.users!,\n      hostess: row.hostesses!,\n      booking: row.bookings!,\n      reviewer: undefined,\n    }));\n  }\n\n  async getReviewsByClient(clientId: string): Promise<ReviewWithDetails[]> {\n    const results = await db\n      .select()\n      .from(reviews)\n      .leftJoin(users, eq(reviews.clientId, users.id))\n      .leftJoin(hostesses, eq(reviews.hostessId, hostesses.id))\n      .leftJoin(bookings, eq(reviews.bookingId, bookings.id))\n      .where(eq(reviews.clientId, clientId))\n      .orderBy(desc(reviews.createdAt));\n\n    return results.map(row => ({\n      ...row.reviews,\n      client: row.users!,\n      hostess: row.hostesses!,\n      booking: row.bookings!,\n      reviewer: undefined,\n    }));\n  }\n\n  async getReviewById(id: string): Promise<ReviewWithDetails | undefined> {\n    const results = await db\n      .select()\n      .from(reviews)\n      .leftJoin(users, eq(reviews.clientId, users.id))\n      .leftJoin(hostesses, eq(reviews.hostessId, hostesses.id))\n      .leftJoin(bookings, eq(reviews.bookingId, bookings.id))\n      .where(eq(reviews.id, id))\n      .limit(1);\n\n    if (results.length === 0) return undefined;\n\n    const row = results[0];\n    return {\n      ...row.reviews,\n      client: row.users!,\n      hostess: row.hostesses!,\n      booking: row.bookings!,\n      reviewer: undefined,\n    };\n  }\n\n  async canClientReview(bookingId: string, clientId: string): Promise<boolean> {\n    // Check if booking exists and belongs to client\n    const booking = await db.select().from(bookings)\n      .where(and(eq(bookings.id, bookingId), eq(bookings.clientId, clientId)))\n      .limit(1);\n\n    if (booking.length === 0) return false;\n\n    // Check if review already exists for this booking\n    const existingReview = await db.select().from(reviews)\n      .where(eq(reviews.bookingId, bookingId))\n      .limit(1);\n\n    return existingReview.length === 0;\n  }\n\n  async createReview(data: InsertReview): Promise<Review> {\n    const result = await db.insert(reviews).values(data).returning();\n    return result[0];\n  }\n\n  async getPendingReviews(): Promise<ReviewWithDetails[]> {\n    const results = await db\n      .select()\n      .from(reviews)\n      .leftJoin(users, eq(reviews.clientId, users.id))\n      .leftJoin(hostesses, eq(reviews.hostessId, hostesses.id))\n      .leftJoin(bookings, eq(reviews.bookingId, bookings.id))\n      .where(eq(reviews.status, 'PENDING'))\n      .orderBy(desc(reviews.createdAt));\n\n    return results.map(row => ({\n      ...row.reviews,\n      client: row.users!,\n      hostess: row.hostesses!,\n      booking: row.bookings!,\n      reviewer: undefined,\n    }));\n  }\n\n  async approveReview(id: string, reviewerId: string): Promise<Review> {\n    const result = await db\n      .update(reviews)\n      .set({ \n        status: 'APPROVED', \n        reviewedBy: reviewerId, \n        reviewedAt: sql`NOW()` \n      })\n      .where(eq(reviews.id, id))\n      .returning();\n    \n    return result[0];\n  }\n\n  async rejectReview(id: string, reviewerId: string): Promise<Review> {\n    const result = await db\n      .update(reviews)\n      .set({ \n        status: 'REJECTED', \n        reviewedBy: reviewerId, \n        reviewedAt: sql`NOW()` \n      })\n      .where(eq(reviews.id, id))\n      .returning();\n    \n    return result[0];\n  }\n\n  async getHostessAverageRating(hostessId: string): Promise<{ average: number; count: number }> {\n    const result = await db\n      .select({\n        average: sql<number>`COALESCE(AVG(${reviews.rating}), 0)`,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(reviews)\n      .where(and(\n        eq(reviews.hostessId, hostessId),\n        eq(reviews.status, 'APPROVED')\n      ));\n\n    return {\n      average: Number(result[0]?.average || 0),\n      count: Number(result[0]?.count || 0),\n    };\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":34457},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/time-utils.ts":{"content":"import { format, parse, addDays, startOfDay } from \"date-fns\";\nimport { toZonedTime, formatInTimeZone } from \"date-fns-tz\";\n\nconst APP_TIMEZONE = \"America/Toronto\";\n\n/**\n * Convert HH:mm string to minutes from midnight\n */\nexport function parseTimeToMinutes(time: string): number {\n  const [hours, minutes] = time.split(\":\").map(Number);\n  return hours * 60 + minutes;\n}\n\n/**\n * Convert minutes from midnight to HH:mm string (24-hour format)\n */\nexport function minutesToTime(minutes: number): string {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours.toString().padStart(2, \"0\")}:${mins.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Generate time slots in 15-minute increments\n */\nexport function generateTimeSlots(\n  startMinutes: number,\n  endMinutes: number,\n  stepMinutes: number = 15\n): number[] {\n  const slots: number[] = [];\n  for (let i = startMinutes; i < endMinutes; i += stepMinutes) {\n    slots.push(i);\n  }\n  return slots;\n}\n\n/**\n * Check if two time ranges overlap\n * Returns true if there's ANY overlap (edge touch is OK)\n */\nexport function hasTimeConflict(\n  start1: number,\n  end1: number,\n  start2: number,\n  end2: number\n): boolean {\n  // Edge touch is OK: end1 === start2 or end2 === start1\n  return start1 < end2 && start2 < end1;\n}\n\n/**\n * Format time range for display\n */\nexport function formatTimeRange(startMinutes: number, endMinutes: number): string {\n  return `${minutesToTime(startMinutes)}–${minutesToTime(endMinutes)}`;\n}\n\n/**\n * Get current date in Toronto timezone as YYYY-MM-DD\n */\nexport function getCurrentDateToronto(): string {\n  const now = new Date();\n  const torontoDate = toZonedTime(now, APP_TIMEZONE);\n  return format(torontoDate, \"yyyy-MM-dd\");\n}\n\n/**\n * Get tomorrow's date in Toronto timezone as YYYY-MM-DD\n */\nexport function getTomorrowDateToronto(): string {\n  const now = new Date();\n  const torontoDate = toZonedTime(now, APP_TIMEZONE);\n  const tomorrow = addDays(torontoDate, 1);\n  return format(tomorrow, \"yyyy-MM-dd\");\n}\n\n/**\n * Format date for display\n */\nexport function formatDate(dateString: string): string {\n  const date = parse(dateString, \"yyyy-MM-dd\", new Date());\n  return format(date, \"MMM d, yyyy\");\n}\n\n/**\n * Get day of week (0=Sun, 6=Sat) for a date string\n */\nexport function getDayOfWeek(dateString: string): number {\n  const date = parse(dateString, \"yyyy-MM-dd\", new Date());\n  return date.getDay();\n}\n\n/**\n * Get dates 14 days ago (for reception history limit)\n */\nexport function get14DaysAgo(): string {\n  const now = new Date();\n  const torontoDate = toZonedTime(now, APP_TIMEZONE);\n  const past = addDays(torontoDate, -14);\n  return format(past, \"yyyy-MM-dd\");\n}\n\n/**\n * Check if date is within reception's allowed range (last 14 days)\n */\nexport function isWithinReceptionRange(dateString: string): boolean {\n  const cutoff = get14DaysAgo();\n  return dateString >= cutoff;\n}\n\n/**\n * Grid constants\n */\nexport const GRID_START_TIME = 10 * 60; // 10:00 AM\nexport const GRID_END_TIME = 23 * 60; // 11:00 PM\nexport const SLOT_DURATION = 15; // minutes\n","size_bytes":3068},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/lib/theme-provider\";\nimport { AuthProvider, useAuth } from \"@/lib/auth-context\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Footer } from \"@/components/footer\";\n\n// Auth pages\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport ChangePassword from \"@/pages/change-password\";\n\n// Client pages\nimport Hostesses from \"@/pages/hostesses\";\nimport HostessProfile from \"@/pages/hostess-profile\";\nimport MyBookings from \"@/pages/my-bookings\";\nimport ClientMessages from \"@/pages/client-messages\";\n\n// Admin pages\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminCalendar from \"@/pages/admin-calendar\";\nimport AdminServices from \"@/pages/admin-services\";\nimport AdminAnalytics from \"@/pages/admin-analytics\";\nimport AdminImport from \"@/pages/admin-import\";\nimport AdminExport from \"@/pages/admin-export\";\nimport AdminUsers from \"@/pages/admin-users\";\nimport AdminClients from \"@/pages/admin-clients\";\nimport AdminHostesses from \"@/pages/admin-hostesses\";\nimport AdminHostessImport from \"@/pages/admin-hostess-import\";\nimport AdminClientImport from \"@/pages/admin-client-import\";\nimport AdminCSVSplitter from \"@/pages/admin-csv-splitter\";\nimport AdminPhotoApprovals from \"@/pages/admin-photo-approvals\";\nimport AdminUpcomingSchedule from \"@/pages/admin-upcoming-schedule\";\nimport AdminTriggerWords from \"@/pages/admin-trigger-words\";\nimport AdminFlaggedConversations from \"@/pages/admin-flagged-conversations\";\nimport ClientUpcomingSchedule from \"@/pages/client-upcoming-schedule\";\n\n// Reception pages\nimport ReceptionCalendar from \"@/pages/reception-calendar\";\nimport ReceptionWeekly from \"@/pages/reception-weekly\";\n\n// Staff pages\nimport StaffDashboard from \"@/pages/staff-dashboard\";\nimport StaffSchedule from \"@/pages/staff-schedule\";\nimport StaffMessages from \"@/pages/staff-messages\";\n\n// Shared\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\n\nfunction ProtectedRoute({ children, allowedRoles }: { children: React.ReactNode; allowedRoles?: string[] }) {\n  const { user, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  // Redirect to change password if required, but not if already on that page\n  if (user.forcePasswordReset && location !== \"/change-password\") {\n    return <Redirect to=\"/change-password\" />;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction AppRouter() {\n  const { user, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  // Determine default route based on user role\n  const getDefaultRoute = () => {\n    if (!user) return \"/hostesses\";\n    \n    switch (user.role) {\n      case \"ADMIN\":\n        return \"/admin/dashboard\";\n      case \"RECEPTION\":\n        return \"/reception/calendar\";\n      case \"STAFF\":\n        return \"/staff/dashboard\";\n      default:\n        return \"/hostesses\";\n    }\n  };\n\n  const sidebarStyle = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  } as React.CSSProperties;\n\n  const needsSidebar = user && (\n    [\"/admin\", \"/reception\", \"/staff\"].some(path => location.startsWith(path)) ||\n    location.startsWith(\"/hostesses\") ||\n    location.startsWith(\"/hostess/\") ||\n    location.startsWith(\"/bookings\") ||\n    location.startsWith(\"/my-bookings\") ||\n    location.startsWith(\"/upcoming-schedule\") ||\n    location.startsWith(\"/messages\")\n  );\n\n  // Show loading state if we're on a protected route and auth is still loading\n  if (isLoading && [\"/admin\", \"/reception\", \"/staff\"].some(path => location.startsWith(path))) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (needsSidebar) {\n    return (\n      <SidebarProvider style={sidebarStyle}>\n        <div className=\"flex h-screen w-full\">\n          <div className=\"relative z-50\">\n            <AppSidebar />\n          </div>\n          <div className=\"flex flex-col flex-1\">\n            <header className=\"flex items-center justify-between p-3 border-b bg-card\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <ThemeToggle />\n            </header>\n            <main className=\"flex-1 overflow-auto\">\n              <Switch>\n                <Route path=\"/\">\n                  <Redirect to={getDefaultRoute()} />\n                </Route>\n                \n                {/* Admin routes */}\n                <Route path=\"/admin/dashboard\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminDashboard />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/calendar\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminCalendar />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/weekly\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <ReceptionWeekly />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/services\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminServices />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/analytics\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminAnalytics />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/users\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminUsers />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/clients\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminClients />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/hostesses\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminHostesses />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/hostess-import\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminHostessImport />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/client-import\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminClientImport />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/csv-splitter\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminCSVSplitter />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/import\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminImport />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/export\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminExport />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/photo-approvals\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminPhotoApprovals />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/upcoming-schedule\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\"]}>\n                    <AdminUpcomingSchedule />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/trigger-words\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminTriggerWords />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/admin/flagged-conversations\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\"]}>\n                    <AdminFlaggedConversations />\n                  </ProtectedRoute>\n                </Route>\n\n                {/* Reception routes */}\n                <Route path=\"/reception/calendar\">\n                  <ProtectedRoute allowedRoles={[\"RECEPTION\"]}>\n                    <ReceptionCalendar />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/hostesses\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\", \"CLIENT\"]}>\n                    <Hostesses />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/hostess/:slug\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\", \"CLIENT\"]}>\n                    <HostessProfile />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/upcoming-schedule\">\n                  <ProtectedRoute allowedRoles={[\"ADMIN\", \"RECEPTION\", \"CLIENT\"]}>\n                    <ClientUpcomingSchedule />\n                  </ProtectedRoute>\n                </Route>\n\n                {/* Staff routes */}\n                <Route path=\"/staff/dashboard\">\n                  <ProtectedRoute allowedRoles={[\"STAFF\"]}>\n                    <StaffDashboard />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/staff/schedule\">\n                  <ProtectedRoute allowedRoles={[\"STAFF\"]}>\n                    <StaffSchedule />\n                  </ProtectedRoute>\n                </Route>\n                <Route path=\"/staff/messages\">\n                  <ProtectedRoute allowedRoles={[\"STAFF\"]}>\n                    <StaffMessages />\n                  </ProtectedRoute>\n                </Route>\n\n                {/* Client messaging route (in sidebar section) */}\n                <Route path=\"/messages\">\n                  <ProtectedRoute allowedRoles={[\"CLIENT\"]}>\n                    <ClientMessages />\n                  </ProtectedRoute>\n                </Route>\n\n                <Route component={NotFound} />\n              </Switch>\n            </main>\n            <Footer />\n          </div>\n        </div>\n      </SidebarProvider>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/change-password\">\n        <ProtectedRoute>\n          <ChangePassword />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reset-password\">\n        <ProtectedRoute>\n          <ResetPassword />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Client routes */}\n      <Route path=\"/hostesses\" component={Hostesses} />\n      <Route path=\"/hostess/:slug\" component={HostessProfile} />\n      <Route path=\"/bookings\">\n        <ProtectedRoute>\n          <MyBookings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/my-bookings\">\n        <ProtectedRoute>\n          <MyBookings />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Public upcoming schedule - no authentication required */}\n      <Route path=\"/upcoming-schedule\" component={ClientUpcomingSchedule} />\n\n      {/* Default route - show homepage for unauthenticated, redirect for authenticated */}\n      <Route path=\"/\">\n        {isLoading ? (\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"animate-pulse text-muted-foreground\">Loading...</div>\n          </div>\n        ) : user ? (\n          <Redirect to={getDefaultRoute()} />\n        ) : (\n          <Home />\n        )}\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <AuthProvider>\n            <AppRouter />\n            <Toaster />\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":12857},"server/routes-extended.ts":{"content":"import type { Express } from \"express\";\nimport { z } from \"zod\";\nimport QRCode from \"qrcode\";\nimport Papa from \"papaparse\";\nimport rateLimit from \"express-rate-limit\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireRole, type AuthRequest } from \"./middleware\";\nimport { insertTimeOffSchema, insertWeeklyScheduleSchema } from \"@shared/schema\";\nimport { parseTimeToMinutes, minutesToTime, hasTimeConflict, getDayOfWeek } from \"../client/src/lib/time-utils\";\n\nexport function registerExtendedRoutes(app: Express) {\n  const importLimiter = rateLimit({\n    windowMs: 60 * 1000,\n    max: 3,\n    message: { error: { code: \"RATE_LIMIT\", message: \"Too many import requests\" } },\n    validate: { trustProxy: false },\n  });\n\n  // ==================== TIME OFF ENDPOINTS ====================\n  \n  // Create time-off (admin/reception only)\n  app.post(\"/api/timeoff\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const data = insertTimeOffSchema.parse(req.body);\n      const timeOff = await storage.createTimeOff(data);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"timeoff\",\n        entityId: timeOff.id,\n        meta: { data },\n      });\n\n      res.json(timeOff);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get time-off for hostess\n  app.get(\"/api/timeoff/:hostessId\", async (req, res, next) => {\n    try {\n      const { hostessId } = req.params;\n      const { date } = req.query;\n      const timeOff = await storage.getTimeOffByHostess(hostessId, date as string);\n      res.json(timeOff);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== WEEKLY SCHEDULE ENDPOINTS ====================\n  \n  // Import schedule CSV (admin/reception)\n  app.post(\"/api/schedule/import\", importLimiter, authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const results: any[] = [];\n\n      for (const row of parsed.data as any[]) {\n        try {\n          const hostessName = row.hostess?.trim();\n          if (!hostessName) {\n            results.push({ row, success: false, error: \"Missing hostess name\" });\n            continue;\n          }\n\n          // Find hostess by display name\n          const allHostesses = await storage.getHostesses();\n          const hostess = allHostesses.find(h => \n            h.displayName.toLowerCase().includes(hostessName.toLowerCase())\n          );\n\n          if (!hostess) {\n            results.push({ row, success: false, error: `Hostess not found: ${hostessName}` });\n            continue;\n          }\n\n          // Parse weekly schedule for each day\n          const days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n          \n          for (let i = 0; i < days.length; i++) {\n            const dayValue = row[days[i]]?.trim();\n\n            const parseTimeSlot = (slot: string) => {\n              if (!slot) return null;\n              const match = slot.match(/(\\d{1,2}):(\\d{2})-(\\d{1,2}):(\\d{2})/);\n              if (!match) return null;\n              const start = parseInt(match[1]) * 60 + parseInt(match[2]);\n              const end = parseInt(match[3]) * 60 + parseInt(match[4]);\n              return { start, end };\n            };\n\n            const timeSlot = parseTimeSlot(dayValue);\n\n            await storage.upsertWeeklySchedule({\n              hostessId: hostess.id,\n              weekday: i,\n              startTime: timeSlot?.start || null,\n              endTime: timeSlot?.end || null,\n            });\n          }\n\n          results.push({ row, success: true });\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message });\n        }\n\n        // Small delay to prevent DB spam\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"IMPORT\",\n        entity: \"schedule\",\n        entityId: \"bulk\",\n        meta: { results },\n      });\n\n      res.json({ results, total: results.length });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Export schedule CSV\n  app.get(\"/api/schedule/export\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req, res, next) => {\n    try {\n      const { location } = req.query;\n      const hostesses = await storage.getHostesses(location as string);\n      \n      const sorted = hostesses.sort((a, b) => \n        (a.displayName || \"\").localeCompare(b.displayName || \"\")\n      );\n\n      const csvRows: string[] = [];\n      csvRows.push(\"id,hostess,monday,tuesday,wednesday,thursday,friday,saturday,sunday\");\n\n      for (const hostess of sorted) {\n        const schedule = await storage.getWeeklyScheduleByHostess(hostess.id);\n        const row: string[] = [hostess.id, hostess.displayName];\n\n        const days = [1, 2, 3, 4, 5, 6, 0]; // Mon-Sun\n        for (const day of days) {\n          const daySchedule = schedule.find(s => s.weekday === day);\n          \n          const formatSlot = (start: number | null, end: number | null) => {\n            if (!start || !end) return \"\";\n            return `${minutesToTime(start)}-${minutesToTime(end)}`;\n          };\n\n          row.push(formatSlot(daySchedule?.startTime || null, daySchedule?.endTime || null));\n        }\n\n        csvRows.push(row.join(\",\"));\n      }\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=schedule-${location || \"all\"}.csv`);\n      res.send(csvRows.join(\"\\n\"));\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== BULK CLIENT IMPORT WITH REAL-TIME PROGRESS ====================\n  \n  // Real-time import with chunked responses for progress updates\n  app.post(\"/api/clients/bulk-import-stream\", importLimiter, authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      // Set headers for streaming response\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Transfer-Encoding', 'chunked');\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const rows = parsed.data as any[];\n      const results: any[] = [];\n      \n      // Send total count\n      res.write(JSON.stringify({ type: 'total', count: rows.length }) + '\\n');\n      \n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        \n        try {\n          let email = row.email?.trim() || row.Email?.trim() || row.EMAIL?.trim();\n          \n          if (!email) {\n            const values = Object.values(row).filter(v => v && typeof v === 'string' && v.trim());\n            email = values[0]?.toString().trim();\n          }\n          \n          const username = email?.split('@')[0]?.toLowerCase();\n          \n          if (!email || !email.includes(\"@\") || !username) {\n            results.push({ row, success: false, error: \"Invalid email format\", email: email || \"missing\" });\n            res.write(JSON.stringify({ type: 'progress', index: i + 1, email, success: false, error: 'Invalid email format' }) + '\\n');\n            continue;\n          }\n\n          const existing = await storage.getUserByEmail(email);\n          if (existing) {\n            results.push({ row, success: false, error: \"User already exists\", email });\n            res.write(JSON.stringify({ type: 'progress', index: i + 1, email, success: false, error: 'Already exists' }) + '\\n');\n            continue;\n          }\n\n          const passwordHash = await bcrypt.hash(username, 10);\n\n          await storage.createUser({\n            username,\n            email,\n            passwordHash,\n            role: \"CLIENT\",\n            forcePasswordReset: true,\n          });\n\n          results.push({ row, success: true, email });\n          res.write(JSON.stringify({ type: 'progress', index: i + 1, email, success: true }) + '\\n');\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message, email: row.email?.trim() || \"unknown\" });\n          res.write(JSON.stringify({ type: 'progress', index: i + 1, email: row.email?.trim() || \"unknown\", success: false, error: error.message }) + '\\n');\n        }\n      }\n\n      // Send completion\n      res.write(JSON.stringify({ \n        type: 'complete', \n        total: results.length,\n        imported: results.filter(r => r.success).length,\n        failed: results.filter(r => !r.success).length,\n        results \n      }) + '\\n');\n      \n      res.end();\n      \n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"BULK_IMPORT\",\n        entity: \"client\",\n        entityId: \"bulk\",\n        meta: { \n          total: results.length,\n          imported: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n      });\n    } catch (error) {\n      res.write(JSON.stringify({ type: 'error', message: (error as Error).message }) + '\\n');\n      res.end();\n    }\n  });\n  \n  // ==================== BULK CLIENT IMPORT (LEGACY) ====================\n  \n  // Optimized for large datasets (e.g., 14,000+ records)\n  app.post(\"/api/clients/bulk-import\", importLimiter, authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    // Extend timeout for large imports (5 minutes)\n    req.setTimeout(300000);\n    res.setTimeout(300000);\n    \n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const results: any[] = [];\n\n      // Process sequentially to avoid memory/connection issues with large datasets\n      const rows = parsed.data as any[];\n      \n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        \n        try {\n          // Try to find email in row - check common column names and first value\n          let email = row.email?.trim() || row.Email?.trim() || row.EMAIL?.trim();\n          \n          // If no email column found, use the first non-empty value in the row\n          if (!email) {\n            const values = Object.values(row).filter(v => v && typeof v === 'string' && v.trim());\n            email = values[0]?.toString().trim();\n          }\n          \n          // Extract username from email (part before @)\n          const username = email?.split('@')[0]?.toLowerCase();\n          \n          if (!email || !email.includes(\"@\") || !username) {\n            results.push({ row, success: false, error: \"Invalid email format\", email: email || \"missing\" });\n            continue;\n          }\n\n          // Check if exists\n          const existing = await storage.getUserByEmail(email);\n          if (existing) {\n            results.push({ row, success: false, error: \"User already exists\", email });\n            continue;\n          }\n\n          // Use username as default password and hash it for each user\n          const passwordHash = await bcrypt.hash(username, 10);\n\n          await storage.createUser({\n            username,\n            email,\n            passwordHash,\n            role: \"CLIENT\",\n            forcePasswordReset: true,\n          });\n\n          results.push({ row, success: true, email });\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message, email: row.email?.trim() || \"unknown\" });\n        }\n        \n        // Small delay every 50 clients to prevent overwhelming the server\n        if ((i + 1) % 50 === 0) {\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"BULK_IMPORT\",\n        entity: \"client\",\n        entityId: \"bulk\",\n        meta: { \n          total: results.length,\n          imported: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length\n        },\n      });\n\n      res.json({ \n        results, \n        total: results.length, \n        imported: results.filter(r => r.success).length,\n        failed: results.filter(r => !r.success).length\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== QR CODE ENDPOINT ====================\n  \n  app.get(\"/api/qr\", async (req, res, next) => {\n    try {\n      const { url } = z.object({ url: z.string().url() }).parse(req.query);\n      \n      const qrDataURL = await QRCode.toDataURL(url, { width: 300, margin: 2 });\n      const base64Data = qrDataURL.replace(/^data:image\\/png;base64,/, \"\");\n      const buffer = Buffer.from(base64Data, \"base64\");\n\n      res.setHeader(\"Content-Type\", \"image/png\");\n      res.send(buffer);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== BULK USER IMPORT ====================\n  \n  app.post(\"/api/admin/users/bulk-import\", importLimiter, authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const results: any[] = [];\n\n      for (const row of parsed.data as any[]) {\n        try {\n          const email = row.email?.trim();\n          const role = row.role?.trim().toUpperCase() || \"CLIENT\";\n          // Generate unique password for each user if not provided\n          const password = row.password?.trim() || Math.random().toString(36).slice(-12) + Math.random().toString(36).slice(-8);\n\n          // Validate email\n          if (!email || !email.includes(\"@\")) {\n            results.push({ row, success: false, error: \"Invalid email\" });\n            continue;\n          }\n\n          // Validate role\n          if (![\"ADMIN\", \"STAFF\", \"RECEPTION\", \"CLIENT\"].includes(role)) {\n            results.push({ row, success: false, error: `Invalid role: ${role}. Must be ADMIN, STAFF, RECEPTION, or CLIENT` });\n            continue;\n          }\n\n          // Check if user already exists\n          const existing = await storage.getUserByEmail(email);\n          if (existing) {\n            results.push({ row, success: false, error: \"User already exists\" });\n            continue;\n          }\n\n          // Hash password\n          const passwordHash = await bcrypt.hash(password, 10);\n\n          // Extract username from email (part before @)\n          const username = email.split('@')[0];\n\n          // Create user\n          await storage.createUser({\n            username,\n            email,\n            passwordHash,\n            role: role as \"ADMIN\" | \"STAFF\" | \"RECEPTION\" | \"CLIENT\",\n            forcePasswordReset: !row.password, // Force reset if password was auto-generated\n          });\n\n          results.push({ row, success: true, generatedPassword: !row.password ? password : undefined });\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message });\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"BULK_IMPORT\",\n        entity: \"user\",\n        entityId: \"bulk\",\n        meta: { results, count: results.filter(r => r.success).length },\n      });\n\n      res.json({ \n        results, \n        total: results.length, \n        imported: results.filter(r => r.success).length \n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== HOSTESS IMPORT ENDPOINT ====================\n  \n  app.post(\"/api/hostesses/import\", importLimiter, authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const results: any[] = [];\n\n      for (const row of parsed.data as any[]) {\n        try {\n          const displayName = row.display_name?.trim() || row.name?.trim();\n          if (!displayName) {\n            results.push({ row, success: false, error: \"Missing display_name\" });\n            continue;\n          }\n\n          const location = row.location?.trim().toUpperCase();\n          if (!location || ![\"DOWNTOWN\", \"WEST_END\"].includes(location)) {\n            results.push({ row, success: false, error: \"Invalid location (must be DOWNTOWN or WEST_END)\" });\n            continue;\n          }\n\n          // Parse specialties (comma-separated or array)\n          let specialties: string[] = [];\n          if (row.specialties) {\n            if (typeof row.specialties === 'string') {\n              specialties = row.specialties.split(',').map((s: string) => s.trim()).filter(Boolean);\n            } else if (Array.isArray(row.specialties)) {\n              specialties = row.specialties;\n            }\n          }\n\n          // Generate slug from display name\n          const slug = displayName.toLowerCase()\n            .replace(/[^a-z0-9]+/g, '-')\n            .replace(/^-+|-+$/g, '') + '-' + location.toLowerCase().replace('_', '-');\n\n          // Check if hostess already exists by slug\n          const existingHostesses = await storage.getHostesses();\n          const existingHostess = existingHostesses.find(h => h.slug === slug);\n\n          if (existingHostess) {\n            // Update existing hostess\n            await storage.updateHostess(existingHostess.id, {\n              displayName,\n              bio: row.bio?.trim() || existingHostess.bio,\n              specialties: specialties.length > 0 ? specialties : existingHostess.specialties,\n              locations: [location as \"DOWNTOWN\" | \"WEST_END\"],\n              active: row.active !== undefined ? row.active === 'true' || row.active === true : existingHostess.active,\n            });\n            results.push({ row, success: true, action: 'updated', hostess: displayName });\n          } else {\n            // Create new hostess\n            await storage.createHostess({\n              slug,\n              displayName,\n              bio: row.bio?.trim() || null,\n              specialties: specialties.length > 0 ? specialties : [],\n              locations: [location as \"DOWNTOWN\" | \"WEST_END\"],\n              active: row.active !== undefined ? row.active === 'true' || row.active === true : true,\n              userId: null,\n            });\n            results.push({ row, success: true, action: 'created', hostess: displayName });\n          }\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message });\n        }\n\n        // Small delay to prevent DB spam\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"IMPORT\",\n        entity: \"hostess\",\n        entityId: \"bulk\",\n        meta: { results },\n      });\n\n      res.json({ results, total: results.length });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== AVAILABILITY ENDPOINT ====================\n  \n  app.get(\"/api/bookings/availability\", async (req, res, next) => {\n    try {\n      const { hostessId, date } = req.query;\n      \n      if (!hostessId || !date) {\n        return res.status(400).json({ error: { code: \"VALIDATION_ERROR\", message: \"hostessId and date required\" } });\n      }\n\n      const bookings = await storage.getBookingsByDate(date as string);\n      const hostessBookings = bookings.filter(b => \n        b.hostessId === hostessId && b.status !== \"CANCELED\"\n      );\n\n      const bookedSlots = hostessBookings.flatMap(b => {\n        const slots: number[] = [];\n        for (let t = b.startTime; t < b.endTime; t += 15) {\n          slots.push(t);\n        }\n        return slots;\n      });\n\n      res.json({ bookedSlots });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== UPCOMING SCHEDULE ENDPOINTS ====================\n  \n  // Get upcoming schedule by date range\n  app.get(\"/api/upcoming-schedule\", async (req, res, next) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const schedule = await storage.getUpcomingSchedule(\n        startDate as string, \n        endDate as string\n      );\n      res.json(schedule);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Bulk upload upcoming schedule (admin/reception only)\n  app.post(\"/api/upcoming-schedule/bulk\", importLimiter, authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { csvData } = z.object({ csvData: z.string() }).parse(req.body);\n      \n      const parsed = Papa.parse(csvData, { header: true, skipEmptyLines: true });\n      const results: any[] = [];\n\n      for (const row of parsed.data as any[]) {\n        try {\n          const { date, hostess, startTime, endTime, service, notes } = row;\n          \n          if (!date || !hostess || !startTime || !endTime) {\n            results.push({ row, success: false, error: \"Missing required fields\" });\n            continue;\n          }\n\n          // Find hostess by display name\n          const allHostesses = await storage.getHostesses();\n          const foundHostess = allHostesses.find(h => \n            h.displayName.toLowerCase() === hostess.trim().toLowerCase()\n          );\n\n          if (!foundHostess) {\n            results.push({ row, success: false, error: `Hostess not found: ${hostess}` });\n            continue;\n          }\n\n          // Find service if provided\n          let serviceId = null;\n          if (service) {\n            const allServices = await storage.getServices();\n            const foundService = allServices.find(s => \n              s.name.toLowerCase() === service.trim().toLowerCase()\n            );\n            serviceId = foundService?.id || null;\n          }\n\n          // Parse times\n          const start = parseTimeToMinutes(startTime.trim());\n          const end = parseTimeToMinutes(endTime.trim());\n\n          // Create schedule entry\n          await storage.createUpcomingSchedule({\n            date: date.trim(),\n            startTime: start,\n            endTime: end,\n            hostessId: foundHostess.id,\n            serviceId,\n            notes: notes?.trim() || null,\n            uploadedBy: req.user!.id,\n          });\n\n          results.push({ row, success: true, hostess: foundHostess.displayName });\n        } catch (error: any) {\n          results.push({ row, success: false, error: error.message });\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"IMPORT\",\n        entity: \"upcoming_schedule\",\n        entityId: \"bulk\",\n        meta: { results },\n      });\n\n      res.json({ results, total: results.length });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Clear all upcoming schedule (admin/reception only)\n  app.delete(\"/api/upcoming-schedule/clear\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      await storage.clearUpcomingSchedule();\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"DELETE\",\n        entity: \"upcoming_schedule\",\n        entityId: \"all\",\n        meta: {},\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Delete single upcoming schedule entry (admin/reception only)\n  app.delete(\"/api/upcoming-schedule/:id\", authenticateToken, requireRole(\"ADMIN\", \"RECEPTION\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUpcomingSchedule(id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"DELETE\",\n        entity: \"upcoming_schedule\",\n        entityId: id,\n        meta: {},\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== MESSAGING ENDPOINTS ====================\n  \n  // Get conversations for current user (client or staff)\n  app.get(\"/api/conversations\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const userId = req.user!.id;\n      const conversations = await storage.getConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get or create conversation between client and hostess\n  app.post(\"/api/conversations\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { hostessId } = z.object({ hostessId: z.string() }).parse(req.body);\n      const userId = req.user!.id;\n      const userRole = req.user!.role;\n\n      let clientId: string;\n      let actualHostessId: string;\n\n      if (userRole === \"CLIENT\") {\n        clientId = userId;\n        actualHostessId = hostessId;\n      } else if (userRole === \"STAFF\") {\n        // Staff user messaging a client - hostessId is actually clientId\n        const staffHostess = await storage.getHostessByUserId(userId);\n        if (!staffHostess) {\n          return res.status(403).json({ error: \"Staff user not linked to hostess\" });\n        }\n        actualHostessId = staffHostess.id;\n        clientId = hostessId; // In this case, hostessId param is actually the client's ID\n      } else {\n        return res.status(403).json({ error: \"Invalid role for messaging\" });\n      }\n\n      const conversation = await storage.getOrCreateConversation(clientId, actualHostessId);\n      res.json(conversation);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Mark conversation as read\n  app.post(\"/api/conversations/:conversationId/read\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { conversationId } = req.params;\n      const userId = req.user!.id;\n      \n      await storage.markConversationAsRead(conversationId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get messages for a conversation\n  app.get(\"/api/conversations/:conversationId/messages\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { conversationId } = req.params;\n      const userId = req.user!.id;\n      \n      // Verify user is part of this conversation\n      const conversation = await storage.getConversationById(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      // Check if user is the client or the staff user linked to the hostess\n      let isAuthorized = conversation.clientId === userId;\n      if (!isAuthorized && req.user!.role === \"STAFF\") {\n        const staffHostess = await storage.getHostessByUserId(userId);\n        if (staffHostess && staffHostess.id === conversation.hostessId) {\n          isAuthorized = true;\n        }\n      }\n\n      if (!isAuthorized && req.user!.role !== \"ADMIN\") {\n        return res.status(403).json({ error: \"Not authorized to view this conversation\" });\n      }\n\n      const messages = await storage.getMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Send a message\n  app.post(\"/api/messages\", authenticateToken, async (req: AuthRequest, res, next) => {\n    try {\n      const { conversationId, content } = z.object({\n        conversationId: z.string(),\n        content: z.string().min(1).max(5000),\n      }).parse(req.body);\n\n      const userId = req.user!.id;\n\n      // Verify user is part of this conversation\n      const conversation = await storage.getConversationById(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      let isAuthorized = conversation.clientId === userId;\n      if (!isAuthorized && req.user!.role === \"STAFF\") {\n        const staffHostess = await storage.getHostessByUserId(userId);\n        if (staffHostess && staffHostess.id === conversation.hostessId) {\n          isAuthorized = true;\n        }\n      }\n\n      if (!isAuthorized) {\n        return res.status(403).json({ error: \"Not authorized to send messages in this conversation\" });\n      }\n\n      // Create message\n      const message = await storage.createMessage({\n        conversationId,\n        senderId: userId,\n        content,\n      });\n\n      // Update conversation last message timestamp\n      await storage.updateConversationLastMessage(conversationId);\n\n      // Check for trigger words\n      const triggerWords = await storage.getTriggerWords();\n      const contentLower = content.toLowerCase();\n      \n      for (const tw of triggerWords) {\n        if (contentLower.includes(tw.word.toLowerCase())) {\n          // Flag the conversation\n          await storage.createFlaggedConversation({\n            conversationId,\n            messageId: message.id,\n            triggeredWord: tw.word,\n          });\n          break; // Only flag once per message\n        }\n      }\n\n      res.json(message);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== ADMIN: TRIGGER WORDS MANAGEMENT ====================\n  \n  // Get all trigger words (admin only)\n  app.get(\"/api/admin/trigger-words\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const triggerWords = await storage.getTriggerWordsWithDetails();\n      res.json(triggerWords);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Add trigger word (admin only)\n  app.post(\"/api/admin/trigger-words\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { word } = z.object({ word: z.string().min(1).max(100) }).parse(req.body);\n      \n      const triggerWord = await storage.createTriggerWord({\n        word: word.toLowerCase().trim(),\n        addedBy: req.user!.id,\n      });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"trigger_word\",\n        entityId: triggerWord.id,\n        meta: { word: triggerWord.word },\n      });\n\n      res.json(triggerWord);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Delete trigger word (admin only)\n  app.delete(\"/api/admin/trigger-words/:id\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTriggerWord(id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"DELETE\",\n        entity: \"trigger_word\",\n        entityId: id,\n        meta: {},\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== ADMIN: FLAGGED CONVERSATIONS ====================\n  \n  // Get flagged conversations (admin only)\n  app.get(\"/api/admin/flagged-conversations\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { reviewed } = req.query;\n      const flaggedConversations = await storage.getFlaggedConversations(\n        reviewed === \"true\" ? true : reviewed === \"false\" ? false : undefined\n      );\n      res.json(flaggedConversations);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Mark flagged conversation as reviewed (admin only)\n  app.patch(\"/api/admin/flagged-conversations/:id/review\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      await storage.markFlaggedConversationAsReviewed(id, req.user!.id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"flagged_conversation\",\n        entityId: id,\n        meta: { reviewed: true },\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== REVIEWS ====================\n  \n  // Submit a review (CLIENT only, for completed bookings)\n  app.post(\"/api/reviews\", authenticateToken, requireRole(\"CLIENT\"), async (req: AuthRequest, res, next) => {\n    try {\n      const parsed = req.body;\n      \n      // Verify client can review this booking\n      const canReview = await storage.canClientReview(parsed.bookingId, req.user!.id);\n      if (!canReview) {\n        return res.status(403).json({ error: \"You cannot review this booking (either it doesn't exist, doesn't belong to you, or you've already reviewed it)\" });\n      }\n\n      // Create the review with PENDING status\n      const review = await storage.createReview({\n        ...parsed,\n        clientId: req.user!.id,\n      });\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"CREATE\",\n        entity: \"review\",\n        entityId: review.id,\n        meta: { bookingId: parsed.bookingId, rating: parsed.rating },\n      });\n\n      res.status(201).json(review);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get reviews for a specific hostess (approved reviews only for non-admins)\n  app.get(\"/api/reviews/hostess/:hostessId\", async (req: AuthRequest, res, next) => {\n    try {\n      const { hostessId } = req.params;\n      const approvedOnly = !req.user || req.user.role !== \"ADMIN\";\n      \n      const reviews = await storage.getReviewsByHostess(hostessId, approvedOnly);\n      res.json(reviews);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get hostess average rating and review count\n  app.get(\"/api/hostesses/:id/rating\", async (req, res, next) => {\n    try {\n      const { id } = req.params;\n      const rating = await storage.getHostessAverageRating(id);\n      res.json(rating);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get all pending reviews (ADMIN only)\n  app.get(\"/api/admin/reviews/pending\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const reviews = await storage.getPendingReviews();\n      res.json(reviews);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Approve a review (ADMIN only)\n  app.post(\"/api/admin/reviews/:id/approve\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const review = await storage.approveReview(id, req.user!.id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"review\",\n        entityId: id,\n        meta: { status: \"APPROVED\" },\n      });\n\n      res.json(review);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Reject a review (ADMIN only)\n  app.post(\"/api/admin/reviews/:id/reject\", authenticateToken, requireRole(\"ADMIN\"), async (req: AuthRequest, res, next) => {\n    try {\n      const { id } = req.params;\n      const review = await storage.rejectReview(id, req.user!.id);\n\n      await storage.createAuditLog({\n        userId: req.user?.id,\n        action: \"UPDATE\",\n        entity: \"review\",\n        entityId: id,\n        meta: { status: \"REJECTED\" },\n      });\n\n      res.json(review);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get current user's reviews (CLIENT only)\n  app.get(\"/api/reviews/my-reviews\", authenticateToken, requireRole(\"CLIENT\"), async (req: AuthRequest, res, next) => {\n    try {\n      const reviews = await storage.getReviewsByClient(req.user!.id);\n      res.json(reviews);\n    } catch (error) {\n      next(error);\n    }\n  });\n}\n","size_bytes":35639},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/app-sidebar.tsx":{"content":"import { Calendar, Users, Settings, LayoutDashboard, UserCog, Clock, FileUp, FileDown, LogOut, BarChart3, ImageIcon, UserCircle, CalendarClock, MessageCircle, Shield, AlertTriangle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport logoUrl from \"@assets/club-alpha-badge (1)_1760718368973.png\";\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n\n  const adminItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/admin/dashboard\",\n      icon: LayoutDashboard,\n    },\n    {\n      title: \"Calendar\",\n      url: \"/admin/calendar\",\n      icon: Calendar,\n    },\n    {\n      title: \"Analytics\",\n      url: \"/admin/analytics\",\n      icon: BarChart3,\n    },\n    {\n      title: \"Users\",\n      url: \"/admin/users\",\n      icon: UserCog,\n    },\n    {\n      title: \"Clients\",\n      url: \"/admin/clients\",\n      icon: UserCircle,\n    },\n    {\n      title: \"Hostesses\",\n      url: \"/admin/hostesses\",\n      icon: Users,\n    },\n    {\n      title: \"Services\",\n      url: \"/admin/services\",\n      icon: Settings,\n    },\n    {\n      title: \"Photo Approvals\",\n      url: \"/admin/photo-approvals\",\n      icon: ImageIcon,\n    },\n    {\n      title: \"Upcoming Schedule\",\n      url: \"/admin/upcoming-schedule\",\n      icon: CalendarClock,\n    },\n    {\n      title: \"Trigger Words\",\n      url: \"/admin/trigger-words\",\n      icon: Shield,\n    },\n    {\n      title: \"Flagged Conversations\",\n      url: \"/admin/flagged-conversations\",\n      icon: AlertTriangle,\n    },\n    {\n      title: \"Import Schedule\",\n      url: \"/admin/import\",\n      icon: FileUp,\n    },\n    {\n      title: \"Export Schedule\",\n      url: \"/admin/export\",\n      icon: FileDown,\n    },\n  ];\n\n  const receptionItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/reception/calendar\",\n      icon: LayoutDashboard,\n    },\n    {\n      title: \"Daily Calendar\",\n      url: \"/admin/calendar\",\n      icon: Calendar,\n    },\n    {\n      title: \"Browse Hostesses\",\n      url: \"/hostesses\",\n      icon: Users,\n    },\n    {\n      title: \"Manage Hostesses\",\n      url: \"/admin/hostesses\",\n      icon: Settings,\n    },\n    {\n      title: \"Clients\",\n      url: \"/admin/clients\",\n      icon: UserCircle,\n    },\n    {\n      title: \"Photo Approvals\",\n      url: \"/admin/photo-approvals\",\n      icon: ImageIcon,\n    },\n    {\n      title: \"Upcoming Schedule\",\n      url: \"/admin/upcoming-schedule\",\n      icon: CalendarClock,\n    },\n    {\n      title: \"Import Schedule\",\n      url: \"/admin/import\",\n      icon: FileUp,\n    },\n    {\n      title: \"Export Schedule\",\n      url: \"/admin/export\",\n      icon: FileDown,\n    },\n  ];\n\n  const staffItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/staff/dashboard\",\n      icon: LayoutDashboard,\n    },\n    {\n      title: \"My Schedule\",\n      url: \"/staff/schedule\",\n      icon: Calendar,\n    },\n    {\n      title: \"Messages\",\n      url: \"/staff/messages\",\n      icon: MessageCircle,\n    },\n  ];\n\n  const clientItems = [\n    {\n      title: \"Find Hostess\",\n      url: \"/hostesses\",\n      icon: Users,\n    },\n    {\n      title: \"My Bookings\",\n      url: \"/bookings\",\n      icon: Calendar,\n    },\n    {\n      title: \"Messages\",\n      url: \"/messages\",\n      icon: MessageCircle,\n    },\n    {\n      title: \"Upcoming Schedule\",\n      url: \"/upcoming-schedule\",\n      icon: CalendarClock,\n    },\n  ];\n\n  const getMenuItems = () => {\n    if (!user) return clientItems;\n    switch (user.role) {\n      case \"ADMIN\":\n        return adminItems;\n      case \"RECEPTION\":\n        return receptionItems;\n      case \"STAFF\":\n        return staffItems;\n      default:\n        return clientItems;\n    }\n  };\n\n  const menuItems = getMenuItems();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <img src={logoUrl} alt=\"Club Alpha\" className=\"h-10 w-10\" />\n          <div>\n            <h2 className=\"font-semibold text-lg\">Club Alpha</h2>\n            <p className=\"text-xs text-muted-foreground\">Booking Platform</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <button onClick={() => setLocation(item.url)}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      \n      {user && (\n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild>\n                <button \n                  onClick={async () => {\n                    await logout();\n                    window.location.href = \"/\";\n                  }} \n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                  <span>Logout</span>\n                </button>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n      )}\n    </Sidebar>\n  );\n}\n","size_bytes":5931},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/db.ts":{"content":"import postgres from \"postgres\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Use standard PostgreSQL driver for Replit/Supabase\nconst queryClient = postgres(process.env.DATABASE_URL, {\n  ssl: process.env.NODE_ENV === 'production' ? 'require' : 'prefer',\n  max: 10,\n});\n\nexport const db = drizzle(queryClient, { schema });\n","size_bytes":479},"client/src/components/quick-booking-form.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { minutesToTime } from \"@/lib/time-utils\";\nimport { ChevronDown, Calendar, BanIcon } from \"lucide-react\";\nimport type { User, Service } from \"@shared/schema\";\n\nconst quickBookingSchema = z.object({\n  clientEmail: z.string().email(\"Invalid email\"),\n  serviceId: z.string().min(1, \"Please select a service\"),\n  notes: z.string().optional(),\n});\n\nconst timeOffSchema = z.object({\n  reason: z.string().min(1, \"Please provide a reason\"),\n  duration: z.number().min(15, \"Minimum 15 minutes\"),\n});\n\ntype QuickBookingFormData = z.infer<typeof quickBookingSchema>;\ntype TimeOffFormData = z.infer<typeof timeOffSchema>;\n\ninterface QuickBookingFormProps {\n  hostessId: string;\n  date: string;\n  startTime: number;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function QuickBookingForm({ hostessId, date, startTime, onSuccess, onCancel }: QuickBookingFormProps) {\n  const { toast } = useToast();\n  const [mode, setMode] = useState<\"booking\" | \"timeoff\">(\"booking\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { data: allClients } = useQuery<User[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: services } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const sortedServices = services?.slice().sort((a, b) => a.durationMin - b.durationMin) || [];\n\n  const filteredClients = allClients?.filter(client => \n    client.email.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: QuickBookingFormData) => {\n      if (!selectedService) return;\n      \n      const endTime = startTime + selectedService.durationMin;\n\n      return apiRequest(\"POST\", \"/api/bookings\", {\n        hostessId,\n        clientEmail: data.clientEmail,\n        serviceId: data.serviceId,\n        date,\n        startTime,\n        endTime,\n        notes: data.notes || null,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({\n        title: \"Booking created\",\n        description: \"Appointment scheduled successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Booking failed\",\n        description: error.message || \"Could not create booking\",\n      });\n    },\n  });\n\n  const createTimeOffMutation = useMutation({\n    mutationFn: async (data: TimeOffFormData) => {\n      const endTime = startTime + data.duration;\n\n      return apiRequest(\"POST\", \"/api/timeoff\", {\n        hostessId,\n        date,\n        startTime,\n        endTime,\n        reason: data.reason,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && (key.startsWith('/api/bookings') || key.startsWith('/api/hostesses'));\n        }\n      });\n      toast({\n        title: \"Time off created\",\n        description: \"Time slot marked as unavailable\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Time off failed\",\n        description: error.message || \"Could not create time off\",\n      });\n    },\n  });\n\n  const bookingForm = useForm<QuickBookingFormData>({\n    resolver: zodResolver(quickBookingSchema),\n    defaultValues: {\n      clientEmail: \"\",\n      serviceId: \"\",\n      notes: \"\",\n    },\n  });\n\n  const timeOffForm = useForm<TimeOffFormData>({\n    resolver: zodResolver(timeOffSchema),\n    defaultValues: {\n      reason: \"\",\n      duration: 60,\n    },\n  });\n\n  const onBookingSubmit = (data: QuickBookingFormData) => {\n    createBookingMutation.mutate(data);\n  };\n\n  const onTimeOffSubmit = (data: TimeOffFormData) => {\n    createTimeOffMutation.mutate(data);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(event.target as Node)) {\n        setDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <Tabs value={mode} onValueChange={(v) => setMode(v as \"booking\" | \"timeoff\")} className=\"w-full\">\n      <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n        <TabsTrigger value=\"booking\" data-testid=\"tab-booking\">\n          <Calendar className=\"h-4 w-4 mr-2\" />\n          New Booking\n        </TabsTrigger>\n        <TabsTrigger value=\"timeoff\" data-testid=\"tab-timeoff\">\n          <BanIcon className=\"h-4 w-4 mr-2\" />\n          Time Off\n        </TabsTrigger>\n      </TabsList>\n\n      <div className=\"grid grid-cols-2 gap-4 p-4 bg-muted rounded-lg mb-6\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Date</p>\n          <p className=\"font-medium\">{date}</p>\n        </div>\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Start Time</p>\n          <p className=\"font-medium font-mono\">{minutesToTime(startTime)}</p>\n        </div>\n      </div>\n\n      <TabsContent value=\"booking\" className=\"mt-0\">\n        <Form {...bookingForm}>\n          <form onSubmit={bookingForm.handleSubmit(onBookingSubmit)} className=\"space-y-6\">\n            <FormField\n              control={bookingForm.control}\n              name=\"clientEmail\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Client Email</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\" ref={inputRef}>\n                      <div className=\"relative\">\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Search or enter client email...\"\n                          data-testid=\"input-client-email\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setSearchQuery(e.target.value);\n                            setDropdownOpen(true);\n                          }}\n                          onFocus={() => setDropdownOpen(true)}\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setDropdownOpen(!dropdownOpen)}\n                          className=\"absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                          data-testid=\"button-toggle-clients\"\n                        >\n                          <ChevronDown className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                      {dropdownOpen && (\n                        <div className=\"absolute top-full left-0 right-0 mt-1 bg-popover border rounded-md shadow-lg max-h-64 overflow-auto z-50\">\n                          {filteredClients.length > 0 ? (\n                            <>\n                              <div className=\"px-3 py-2 text-xs font-medium text-muted-foreground border-b bg-muted/50\">\n                                {filteredClients.length} client{filteredClients.length !== 1 ? 's' : ''} found\n                              </div>\n                              {filteredClients.map((client) => (\n                                <button\n                                  key={client.id}\n                                  type=\"button\"\n                                  className=\"w-full px-3 py-2.5 text-left text-sm hover-elevate border-b last:border-b-0\"\n                                  onClick={() => {\n                                    bookingForm.setValue(\"clientEmail\", client.email, { shouldValidate: true });\n                                    setSearchQuery(client.email);\n                                    setDropdownOpen(false);\n                                  }}\n                                  data-testid={`button-client-${client.id}`}\n                                >\n                                  <div className=\"font-medium\">{client.email}</div>\n                                </button>\n                              ))}\n                            </>\n                          ) : (\n                            <div className=\"px-3 py-8 text-center text-sm text-muted-foreground\">\n                              {searchQuery ? (\n                                <>\n                                  No clients found matching \"{searchQuery}\"\n                                  <div className=\"text-xs mt-1\">Type a new email to create a booking</div>\n                                </>\n                              ) : (\n                                \"No clients yet\"\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={bookingForm.control}\n              name=\"serviceId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Service</FormLabel>\n                  <Select \n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      const service = sortedServices.find(s => s.id === value);\n                      setSelectedService(service || null);\n                    }}\n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-service\">\n                        <SelectValue placeholder=\"Select a service\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {sortedServices.map((service) => (\n                        <SelectItem key={service.id} value={service.id}>\n                          {service.name} ({service.durationMin} min) - ${(service.priceCents / 100).toFixed(2)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={bookingForm.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Special requests or notes...\"\n                      data-testid=\"input-notes\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={createBookingMutation.isPending}\n                data-testid=\"button-create-booking\"\n              >\n                {createBookingMutation.isPending ? \"Creating...\" : \"Create Booking\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </TabsContent>\n\n      <TabsContent value=\"timeoff\" className=\"mt-0\">\n        <Form {...timeOffForm}>\n          <form onSubmit={timeOffForm.handleSubmit(onTimeOffSubmit)} className=\"space-y-6\">\n            <FormField\n              control={timeOffForm.control}\n              name=\"duration\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Duration</FormLabel>\n                  <Select \n                    onValueChange={(value) => field.onChange(Number(value))}\n                    value={field.value.toString()}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-duration\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"15\">15 minutes</SelectItem>\n                      <SelectItem value=\"30\">30 minutes</SelectItem>\n                      <SelectItem value=\"45\">45 minutes</SelectItem>\n                      <SelectItem value=\"60\">1 hour</SelectItem>\n                      <SelectItem value=\"90\">1.5 hours</SelectItem>\n                      <SelectItem value=\"120\">2 hours</SelectItem>\n                      <SelectItem value=\"180\">3 hours</SelectItem>\n                      <SelectItem value=\"240\">4 hours</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={timeOffForm.control}\n              name=\"reason\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Reason</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Break, lunch, personal time, etc...\"\n                      data-testid=\"input-timeoff-reason\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-timeoff\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"destructive\"\n                className=\"flex-1\"\n                disabled={createTimeOffMutation.isPending}\n                data-testid=\"button-create-timeoff\"\n              >\n                {createTimeOffMutation.isPending ? \"Creating...\" : \"Mark as Time Off\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </TabsContent>\n    </Tabs>\n  );\n}\n","size_bytes":15567},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 25% 15%;\n\n  --border: 220 15% 90%;\n\n  --card: 220 20% 98%;\n\n  --card-foreground: 220 25% 15%;\n\n  --card-border: 220 15% 95%;\n\n  --sidebar: 220 15% 95%;\n\n  --sidebar-foreground: 220 25% 15%;\n\n  --sidebar-border: 220 15% 92%;\n\n  --sidebar-primary: 210 90% 45%;\n\n  --sidebar-primary-foreground: 210 90% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 25% 20%;\n\n  --sidebar-ring: 210 90% 45%;\n\n  --popover: 220 15% 93%;\n\n  --popover-foreground: 220 25% 15%;\n\n  --popover-border: 220 15% 90%;\n\n  --primary: 210 90% 45%;\n\n  --primary-foreground: 210 90% 98%;\n\n  --secondary: 220 12% 88%;\n\n  --secondary-foreground: 220 25% 20%;\n\n  --muted: 220 10% 90%;\n\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 220 8% 87%;\n\n  --accent-foreground: 220 25% 20%;\n\n  --destructive: 0 75% 45%;\n\n  --destructive-foreground: 0 75% 98%;\n\n  --input: 220 20% 70%;\n  --ring: 210 90% 45%;\n  --chart-1: 210 85% 35%;\n  --chart-2: 280 60% 40%;\n  --chart-3: 145 55% 35%;\n  --chart-4: 25 75% 40%;\n  --chart-5: 180 65% 35%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Roboto Mono', 'SF Mono', Consolas, monospace;\n  --radius: .375rem; /* 6px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.08), 0px 2px 4px -2px hsl(220 15% 15% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.10), 0px 3px 6px -3px hsl(220 15% 15% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 15% / 0.12), 0px 4px 8px -4px hsl(220 15% 15% / 0.07);\n  --shadow-xl: 0px 20px 40px -8px hsl(220 15% 15% / 0.15), 0px 8px 16px -6px hsl(220 15% 15% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 15% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 12%;\n\n  --foreground: 220 10% 95%;\n\n  --border: 220 12% 18%;\n\n  --card: 220 14% 16%;\n\n  --card-foreground: 220 10% 95%;\n\n  --card-border: 220 13% 18%;\n\n  --sidebar: 220 13% 20%;\n\n  --sidebar-foreground: 220 10% 95%;\n\n  --sidebar-border: 220 12% 22%;\n\n  --sidebar-primary: 210 85% 55%;\n\n  --sidebar-primary-foreground: 210 90% 98%;\n\n  --sidebar-accent: 220 12% 24%;\n\n  --sidebar-accent-foreground: 220 8% 90%;\n\n  --sidebar-ring: 210 85% 55%;\n\n  --popover: 220 12% 24%;\n\n  --popover-foreground: 220 10% 95%;\n\n  --popover-border: 220 11% 26%;\n\n  --primary: 210 85% 55%;\n\n  --primary-foreground: 210 90% 98%;\n\n  --secondary: 220 12% 28%;\n\n  --secondary-foreground: 220 8% 90%;\n\n  --muted: 220 10% 18%;\n\n  --muted-foreground: 220 8% 70%;\n\n  --accent: 220 12% 22%;\n\n  --accent-foreground: 220 8% 90%;\n\n  --destructive: 0 75% 50%;\n\n  --destructive-foreground: 0 75% 98%;\n\n  --input: 220 12% 35%;\n  --ring: 210 85% 55%;\n  --chart-1: 145 55% 60%;\n  --chart-2: 280 60% 65%;\n  --chart-3: 210 85% 65%;\n  --chart-4: 25 75% 60%;\n  --chart-5: 180 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 25% 5% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 25% 5% / 0.50);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 25% 5% / 0.45), 0px 1px 2px -1px hsl(220 25% 5% / 0.35);\n  --shadow: 0px 4px 6px -1px hsl(220 25% 5% / 0.50), 0px 2px 4px -2px hsl(220 25% 5% / 0.40);\n  --shadow-md: 0px 6px 12px -2px hsl(220 25% 5% / 0.55), 0px 3px 6px -3px hsl(220 25% 5% / 0.45);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 25% 5% / 0.60), 0px 4px 8px -4px hsl(220 25% 5% / 0.50);\n  --shadow-xl: 0px 20px 40px -8px hsl(220 25% 5% / 0.65), 0px 8px 16px -6px hsl(220 25% 5% / 0.55);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 25% 5% / 0.70);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Marquee Animation */\n  @keyframes marquee {\n    0% {\n      transform: translateX(0);\n    }\n    100% {\n      transform: translateX(-50%);\n    }\n  }\n\n  .animate-marquee {\n    animation: marquee 40s linear infinite;\n  }\n\n  .animate-marquee:hover {\n    animation-play-state: paused;\n  }\n}","size_bytes":11747},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/admin-calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format, startOfWeek, endOfWeek, addWeeks, eachDayOfInterval, addDays } from \"date-fns\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { ChevronLeft, ChevronRight, MapPin, Clock, User, Mail, FileText, Calendar as CalendarIcon, ZoomIn, ZoomOut, LayoutGrid, CalendarDays } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { QuickBookingForm } from \"@/components/quick-booking-form\";\nimport { generateTimeSlots, minutesToTime, formatTimeRange, GRID_START_TIME, GRID_END_TIME, SLOT_DURATION, getCurrentDateToronto } from \"@/lib/time-utils\";\nimport type { Hostess, BookingWithDetails } from \"@shared/schema\";\n\ntype ZoomLevel = \"compact\" | \"normal\" | \"comfortable\";\ntype ViewMode = \"daily\" | \"weekly\";\n\nexport default function AdminCalendar() {\n  const [, setLocation] = useLocation();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<ViewMode>(\"daily\");\n  const [quickBookingOpen, setQuickBookingOpen] = useState(false);\n  const [editBookingOpen, setEditBookingOpen] = useState(false);\n  const [zoomLevel, setZoomLevel] = useState<ZoomLevel>(\"compact\");\n  const [columnWidths, setColumnWidths] = useState<Record<string, number>>({});\n  const [resizing, setResizing] = useState<{ hostessId: string; startX: number; startWidth: number } | null>(null);\n  const [selectedSlot, setSelectedSlot] = useState<{\n    hostessId: string;\n    date: string;\n    startTime: number;\n  } | null>(null);\n  const [selectedBooking, setSelectedBooking] = useState<BookingWithDetails | null>(null);\n\n  const dateStr = format(selectedDate, \"yyyy-MM-dd\");\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\n  const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\n  const weekStartStr = format(weekStart, \"yyyy-MM-dd\");\n  const weekEndStr = format(weekEnd, \"yyyy-MM-dd\");\n  const weekDays = eachDayOfInterval({ start: weekStart, end: weekEnd });\n\n  const { data: hostesses } = useQuery<Hostess[]>({\n    queryKey: locationFilter === \"all\"\n      ? [\"/api/hostesses\"]\n      : [\"/api/hostesses?location=\" + locationFilter],\n  });\n\n  // Daily bookings query\n  const { data: bookings, isLoading: isLoadingDaily } = useQuery<BookingWithDetails[]>({\n    queryKey: locationFilter === \"all\"\n      ? [`/api/bookings/day?date=${dateStr}`]\n      : [`/api/bookings/day?date=${dateStr}&location=${locationFilter}`],\n    enabled: viewMode === \"daily\",\n  });\n\n  // Weekly bookings query\n  const { data: weeklyBookings, isLoading: isLoadingWeekly } = useQuery<BookingWithDetails[]>({\n    queryKey: ['/api/bookings/range', weekStartStr, weekEndStr, locationFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        startDate: weekStartStr,\n        endDate: weekEndStr,\n      });\n      if (locationFilter !== \"all\") {\n        params.append(\"location\", locationFilter);\n      }\n      \n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch(`/api/bookings/range?${params}`, {\n        headers,\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch bookings\");\n      return response.json();\n    },\n    enabled: viewMode === \"weekly\",\n  });\n\n  const sortedHostesses = hostesses?.slice().sort((a, b) => \n    (a.displayName || \"\").localeCompare(b.displayName || \"\")\n  ) || [];\n\n  const timeSlots = generateTimeSlots(GRID_START_TIME, GRID_END_TIME, SLOT_DURATION);\n\n  // Zoom level configurations\n  const zoomConfig = {\n    compact: {\n      rowHeight: \"h-6\",\n      headerHeight: \"h-10\",\n      columnWidth: \"w-32\",\n      avatarSize: \"h-6 w-6\",\n      textSize: \"text-xs\",\n      badgeHeight: \"h-5\",\n    },\n    normal: {\n      rowHeight: \"h-10\",\n      headerHeight: \"h-14\",\n      columnWidth: \"w-44\",\n      avatarSize: \"h-8 w-8\",\n      textSize: \"text-sm\",\n      badgeHeight: \"h-6\",\n    },\n    comfortable: {\n      rowHeight: \"h-14\",\n      headerHeight: \"h-16\",\n      columnWidth: \"w-56\",\n      avatarSize: \"h-10 w-10\",\n      textSize: \"text-base\",\n      badgeHeight: \"h-7\",\n    },\n  };\n\n  const currentZoom = zoomConfig[zoomLevel];\n\n  const getBookingAtSlot = (hostessId: string, startTime: number) => {\n    return bookings?.find(\n      (b) => b.hostessId === hostessId && b.startTime <= startTime && b.endTime > startTime\n    );\n  };\n\n  // Get bookings for a specific hostess and day (weekly view)\n  const getBookingsForDay = (hostessId: string, date: Date) => {\n    const dateStr = format(date, \"yyyy-MM-dd\");\n    return weeklyBookings?.filter(\n      b => b.hostessId === hostessId && b.date === dateStr\n    ) || [];\n  };\n\n  const goToPreviousWeek = () => {\n    setSelectedDate(prev => addWeeks(prev, -1));\n  };\n\n  const goToNextWeek = () => {\n    setSelectedDate(prev => addWeeks(prev, 1));\n  };\n\n  const goToPreviousDay = () => {\n    setSelectedDate(prev => addDays(prev, -1));\n  };\n\n  const goToNextDay = () => {\n    setSelectedDate(prev => addDays(prev, 1));\n  };\n\n  const { toast } = useToast();\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bookings/${bookingId}/cancel`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({ title: \"Booking canceled successfully\" });\n      setEditBookingOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to cancel booking\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleCellClick = (hostessId: string, startTime: number) => {\n    const booking = getBookingAtSlot(hostessId, startTime);\n    if (!booking) {\n      setSelectedSlot({ hostessId, date: dateStr, startTime });\n      setQuickBookingOpen(true);\n    } else {\n      setSelectedBooking(booking);\n      setEditBookingOpen(true);\n    }\n  };\n\n  const handleResizeStart = (e: React.MouseEvent, hostessId: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const currentWidth = columnWidths[hostessId] || getDefaultColumnWidth();\n    setResizing({ hostessId, startX: e.clientX, startWidth: currentWidth });\n  };\n\n  const handleResizeMove = (e: MouseEvent) => {\n    if (!resizing) return;\n    const delta = e.clientX - resizing.startX;\n    const newWidth = Math.max(100, resizing.startWidth + delta);\n    setColumnWidths(prev => ({ ...prev, [resizing.hostessId]: newWidth }));\n  };\n\n  const handleResizeEnd = () => {\n    setResizing(null);\n  };\n\n  const getDefaultColumnWidth = () => {\n    const widthMap = { compact: 128, normal: 176, comfortable: 224 };\n    return widthMap[zoomLevel];\n  };\n\n  const getColumnWidth = (hostessId: string) => {\n    return columnWidths[hostessId] || getDefaultColumnWidth();\n  };\n\n  // Add mouse event listeners for resizing\n  useEffect(() => {\n    if (resizing) {\n      document.addEventListener('mousemove', handleResizeMove);\n      document.addEventListener('mouseup', handleResizeEnd);\n      return () => {\n        document.removeEventListener('mousemove', handleResizeMove);\n        document.removeEventListener('mouseup', handleResizeEnd);\n      };\n    }\n  }, [resizing]);\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <div className=\"border-b p-4 flex items-center justify-between bg-card\">\n        <div className=\"flex items-center gap-4\">\n          <h1 className=\"text-section-title font-semibold\">\n            {viewMode === \"daily\" ? \"Daily Calendar\" : \"Weekly Calendar\"}\n          </h1>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={viewMode === \"daily\" ? goToPreviousDay : goToPreviousWeek}\n              data-testid=\"button-calendar-prev\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-sm min-w-32 text-center\">\n              {viewMode === \"daily\" \n                ? format(selectedDate, \"MMM d, yyyy\")\n                : `${format(weekStart, \"MMM d\")} - ${format(weekEnd, \"MMM d, yyyy\")}`\n              }\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={viewMode === \"daily\" ? goToNextDay : goToNextWeek}\n              data-testid=\"button-calendar-next\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <Select value={locationFilter} onValueChange={setLocationFilter}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-calendar-location\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Locations</SelectItem>\n              <SelectItem value=\"DOWNTOWN\">Downtown</SelectItem>\n              <SelectItem value=\"WEST_END\">West End</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Status Legend */}\n          <div className=\"flex items-center gap-3 text-xs\">\n            <div className=\"flex items-center gap-1.5\">\n              <div className=\"w-3 h-3 rounded-sm bg-booked\" data-testid=\"legend-booked\" />\n              <span className=\"text-muted-foreground\">Booked</span>\n            </div>\n            <div className=\"flex items-center gap-1.5\">\n              <div className=\"w-3 h-3 rounded-sm bg-notes\" data-testid=\"legend-notes\" />\n              <span className=\"text-muted-foreground\">Notes Added</span>\n            </div>\n            <div className=\"flex items-center gap-1.5\">\n              <div className=\"w-3 h-3 rounded-sm bg-time-off\" data-testid=\"legend-timeoff\" />\n              <span className=\"text-muted-foreground\">Time Off</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center gap-1 border rounded-md p-1\">\n            <Button\n              variant={viewMode === \"daily\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"daily\")}\n              data-testid=\"button-view-daily\"\n              className=\"h-7\"\n            >\n              <CalendarIcon className=\"h-3.5 w-3.5 mr-1\" />\n              Daily\n            </Button>\n            <Button\n              variant={viewMode === \"weekly\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"weekly\")}\n              data-testid=\"button-view-weekly\"\n              className=\"h-7\"\n            >\n              <CalendarDays className=\"h-3.5 w-3.5 mr-1\" />\n              Weekly\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-1 border rounded-md p-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => {\n                if (zoomLevel === \"normal\") setZoomLevel(\"compact\");\n                if (zoomLevel === \"comfortable\") setZoomLevel(\"normal\");\n              }}\n              disabled={zoomLevel === \"compact\"}\n              data-testid=\"button-zoom-out\"\n              className=\"h-7 w-7\"\n            >\n              <ZoomOut className=\"h-4 w-4\" />\n            </Button>\n            <span className=\"text-xs text-muted-foreground px-2 min-w-20 text-center\" data-testid=\"text-zoom-level\">\n              {zoomLevel === \"compact\" && \"Compact\"}\n              {zoomLevel === \"normal\" && \"Normal\"}\n              {zoomLevel === \"comfortable\" && \"Comfortable\"}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => {\n                if (zoomLevel === \"compact\") setZoomLevel(\"normal\");\n                if (zoomLevel === \"normal\") setZoomLevel(\"comfortable\");\n              }}\n              disabled={zoomLevel === \"comfortable\"}\n              data-testid=\"button-zoom-in\"\n              className=\"h-7 w-7\"\n            >\n              <ZoomIn className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <Calendar\n            mode=\"single\"\n            selected={selectedDate}\n            onSelect={(date) => date && setSelectedDate(date)}\n            className=\"hidden\"\n          />\n        </div>\n      </div>\n\n      {/* Grid */}\n      {viewMode === \"daily\" ? (\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Time Column - Fixed on left */}\n          <div className=\"w-20 flex-shrink-0 border-r bg-card overflow-y-auto\">\n            <div className={`${currentZoom.headerHeight} border-b bg-card sticky top-0 z-10`} />\n            {timeSlots.map((slot) => (\n              <div\n                key={slot}\n                className={`${currentZoom.rowHeight} border-b flex items-center justify-center text-time-label text-muted-foreground ${currentZoom.textSize}`}\n              >\n                {formatTimeRange(slot, slot + SLOT_DURATION)}\n              </div>\n            ))}\n          </div>\n\n          {/* Scrollable Hostess Columns */}\n          <div className=\"flex-1 overflow-auto\">\n            <div className=\"inline-flex\">\n              {/* Hostess Columns */}\n              {sortedHostesses.map((hostess) => (\n                <div \n                  key={hostess.id} \n                  className=\"border-r flex-shrink-0 relative\"\n                  style={{ width: `${getColumnWidth(hostess.id)}px` }}\n                >\n                  {/* Header */}\n                  <div className={`${currentZoom.headerHeight} border-b bg-card flex items-center justify-between px-2 sticky top-0 z-20 relative`}>\n                    <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                      <Avatar className={currentZoom.avatarSize}>\n                        <AvatarImage src={hostess.photoUrl || undefined} />\n                        <AvatarFallback className={currentZoom.textSize}>\n                          {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className={`${currentZoom.textSize} truncate font-medium`}>\n                        {hostess.displayName}\n                      </span>\n                    </div>\n                    {hostess.locations && hostess.locations.length > 0 && (\n                      <div className=\"flex gap-0.5\">\n                        {hostess.locations.includes(\"DOWNTOWN\") && (\n                          <Badge variant=\"outline\" className={`${currentZoom.textSize} ${currentZoom.badgeHeight} px-1`}>D</Badge>\n                        )}\n                        {hostess.locations.includes(\"WEST_END\") && (\n                          <Badge variant=\"outline\" className={`${currentZoom.textSize} ${currentZoom.badgeHeight} px-1`}>W</Badge>\n                        )}\n                      </div>\n                    )}\n                    \n                    {/* Resize Handle */}\n                    <div\n                      className=\"absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-primary/50 transition-colors z-30\"\n                      onMouseDown={(e) => handleResizeStart(e, hostess.id)}\n                      data-testid={`resize-handle-${hostess.id}`}\n                    />\n                  </div>\n\n                  {/* Slots */}\n                  {timeSlots.map((slot) => {\n                    const booking = getBookingAtSlot(hostess.id, slot);\n                    const isAvailable = !booking;\n                    \n                    // Determine cell color\n                    let cellColor = \"bg-card hover:bg-muted/30\";\n                    if (!isAvailable) {\n                      if (booking.status === \"CANCELED\") {\n                        cellColor = \"bg-muted\";\n                      } else if (booking.notes && booking.notes.trim()) {\n                        cellColor = \"bg-notes\"; // Green for bookings with notes\n                      } else {\n                        cellColor = \"bg-booked\"; // Blue for regular bookings\n                      }\n                    }\n\n                    return (\n                      <div\n                        key={slot}\n                        className={`${currentZoom.rowHeight} border-b cursor-pointer transition-colors ${cellColor}`}\n                        onClick={() => handleCellClick(hostess.id, slot)}\n                        data-testid={`cell-${hostess.id}-${slot}`}\n                      >\n                        {booking && (\n                          <div className={`px-1 ${currentZoom.textSize} truncate text-white font-medium flex items-center h-full`}>\n                            {booking.client.email.split('@')[0]}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      ) : (\n        // WEEKLY VIEW\n        <div className=\"flex-1 overflow-auto p-4\">\n          {isLoadingWeekly ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <p className=\"text-muted-foreground\">Loading weekly schedule...</p>\n            </div>\n          ) : sortedHostesses.length === 0 ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <p className=\"text-muted-foreground\">No hostesses available</p>\n            </div>\n          ) : (\n            <div className=\"overflow-auto border rounded-lg bg-card\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b bg-card\">\n                    <th className=\"p-3 text-left font-semibold min-w-[150px] sticky left-0 z-20 bg-card border-r\">\n                      Hostess\n                    </th>\n                    {weekDays.map((day) => (\n                      <th key={day.toISOString()} className=\"p-3 text-center font-semibold min-w-[140px] border-r\">\n                        <div className=\"text-sm\">\n                          {format(day, \"EEE\")}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground font-normal\">\n                          {format(day, \"MMM d\")}\n                        </div>\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {sortedHostesses.map((hostess) => (\n                    <tr key={hostess.id} className=\"border-b hover-elevate\">\n                      <td className=\"p-3 sticky left-0 z-10 bg-card border-r\">\n                        <div className=\"flex items-center gap-2\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage src={hostess.photoUrl || undefined} />\n                            <AvatarFallback className=\"text-xs\">\n                              {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"text-sm font-medium truncate\">\n                              {hostess.displayName}\n                            </div>\n                            {hostess.locations && hostess.locations.length > 0 && (\n                              <div className=\"flex gap-1 mt-0.5\">\n                                {hostess.locations.includes(\"DOWNTOWN\") && (\n                                  <Badge variant=\"outline\" className=\"text-xs h-4 px-1\">D</Badge>\n                                )}\n                                {hostess.locations.includes(\"WEST_END\") && (\n                                  <Badge variant=\"outline\" className=\"text-xs h-4 px-1\">W</Badge>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </td>\n                      {weekDays.map((day) => {\n                        const dayBookings = getBookingsForDay(hostess.id, day);\n                        return (\n                          <td key={day.toISOString()} className=\"p-2 border-r align-top\">\n                            {dayBookings.length > 0 ? (\n                              <div className=\"space-y-1\">\n                                {dayBookings.map((booking) => (\n                                  <div\n                                    key={booking.id}\n                                    className={`rounded p-1.5 text-xs cursor-pointer transition-colors ${\n                                      booking.status === \"CANCELED\" \n                                        ? \"bg-muted border border-muted-foreground/20\" \n                                        : booking.notes && booking.notes.trim()\n                                        ? \"bg-notes/20 border border-notes/30\"\n                                        : \"bg-booked/20 border border-booked/30\"\n                                    }`}\n                                    onClick={() => {\n                                      setSelectedBooking(booking);\n                                      setEditBookingOpen(true);\n                                    }}\n                                    data-testid={`booking-${hostess.id}-${format(day, \"yyyy-MM-dd\")}-${booking.id}`}\n                                  >\n                                    <div className=\"font-semibold\">\n                                      {formatTimeRange(booking.startTime, booking.endTime)}\n                                    </div>\n                                    {booking.client && (\n                                      <div className=\"text-muted-foreground mt-0.5 truncate\">\n                                        {booking.client.email.split('@')[0]}\n                                      </div>\n                                    )}\n                                    {booking.service && (\n                                      <div className=\"font-medium mt-0.5 truncate\">\n                                        {booking.service.name}\n                                      </div>\n                                    )}\n                                    {booking.status === \"CANCELED\" && (\n                                      <Badge variant=\"outline\" className=\"text-xs mt-0.5\">Canceled</Badge>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            ) : (\n                              <div className=\"text-xs text-muted-foreground text-center py-2\">\n                                -\n                              </div>\n                            )}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Quick Booking Modal */}\n      <Dialog open={quickBookingOpen} onOpenChange={setQuickBookingOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Quick Booking</DialogTitle>\n          </DialogHeader>\n          {selectedSlot && (\n            <QuickBookingForm\n              hostessId={selectedSlot.hostessId}\n              date={selectedSlot.date}\n              startTime={selectedSlot.startTime}\n              onSuccess={() => setQuickBookingOpen(false)}\n              onCancel={() => setQuickBookingOpen(false)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Booking Modal */}\n      <Dialog open={editBookingOpen} onOpenChange={setEditBookingOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Booking Details</DialogTitle>\n            <DialogDescription>View and manage this booking</DialogDescription>\n          </DialogHeader>\n          {selectedBooking && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Client</span>\n                  </div>\n                  <div className=\"font-medium\">{selectedBooking.client.email}</div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Hostess</span>\n                  </div>\n                  <div className=\"font-medium\">{selectedBooking.hostess.displayName}</div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <CalendarIcon className=\"h-4 w-4\" />\n                    <span>Date</span>\n                  </div>\n                  <div className=\"font-medium\">{format(new Date(selectedBooking.date), \"MMM d, yyyy\")}</div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>Time</span>\n                  </div>\n                  <div className=\"font-medium\">\n                    {formatTimeRange(selectedBooking.startTime, selectedBooking.endTime)}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span>Service</span>\n                  </div>\n                  <div className=\"font-medium\">{selectedBooking.service.name}</div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>Location</span>\n                  </div>\n                  {selectedBooking.hostess.locations && selectedBooking.hostess.locations.length > 0 && (\n                    <div className=\"font-medium\">\n                      {selectedBooking.hostess.locations.map((loc, idx) => (\n                        <span key={idx}>\n                          {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                          {idx < selectedBooking.hostess.locations.length - 1 && \", \"}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {selectedBooking.notes && (\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Notes</div>\n                  <div className=\"p-3 bg-muted rounded-md text-sm\">{selectedBooking.notes}</div>\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-2\">\n                <Badge variant={\n                  selectedBooking.status === \"CONFIRMED\" ? \"default\" :\n                  selectedBooking.status === \"PENDING\" ? \"secondary\" :\n                  selectedBooking.status === \"CANCELED\" ? \"destructive\" :\n                  \"outline\"\n                }>\n                  {selectedBooking.status}\n                </Badge>\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4 border-t\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setEditBookingOpen(false)}\n                  data-testid=\"button-close-booking\"\n                >\n                  Close\n                </Button>\n                {selectedBooking.status !== \"CANCELED\" && (\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => cancelBookingMutation.mutate(selectedBooking.id)}\n                    disabled={cancelBookingMutation.isPending}\n                    data-testid=\"button-cancel-booking\"\n                  >\n                    {cancelBookingMutation.isPending ? \"Canceling...\" : \"Cancel Booking\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":29532},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Footer } from \"@/components/footer\";\nimport logoUrl from \"@assets/club-alpha-badge (1)_1760718368973.png\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const result = await login(data.username, data.password);\n      \n      if (result?.requiresPasswordReset) {\n        setLocation(\"/change-password\");\n      } else {\n        // Redirect based on user role\n        const userRole = result?.user?.role || result?.role;\n        switch (userRole) {\n          case \"ADMIN\":\n            setLocation(\"/admin/dashboard\");\n            break;\n          case \"RECEPTION\":\n            setLocation(\"/admin/calendar\");\n            break;\n          case \"STAFF\":\n            setLocation(\"/staff/schedule\");\n            break;\n          case \"CLIENT\":\n          default:\n            setLocation(\"/hostesses\");\n            break;\n        }\n      }\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"absolute top-4 right-4 z-10\">\n        <ThemeToggle />\n      </div>\n      \n      <div className=\"flex-1 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3\">\n          <div className=\"flex justify-center\">\n            <img src={logoUrl} alt=\"Club Alpha\" className=\"h-40 w-40\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-center\">Sign in to your Club Alpha account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"username\"\n                        data-testid=\"input-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            <span>Don't have an account? </span>\n            <button\n              onClick={() => setLocation(\"/register\")}\n              className=\"text-primary hover:underline\"\n              data-testid=\"link-register\"\n            >\n              Register\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5147},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/hostesses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MapPin, LayoutGrid, Calendar, LogOut, Search } from \"lucide-react\";\nimport { ClientDailyView } from \"@/components/client-daily-view\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { Footer } from \"@/components/footer\";\nimport type { Hostess } from \"@shared/schema\";\n\ntype ViewMode = \"gallery\" | \"daily\";\n\nexport default function Hostesses() {\n  const [, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<ViewMode>(\"gallery\");\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n\n  const { data: hostesses, isLoading } = useQuery<Hostess[]>({\n    queryKey: locationFilter === \"all\" \n      ? [\"/api/hostesses\"]\n      : [\"/api/hostesses?location=\" + locationFilter],\n  });\n\n  // Filter and sort hostesses\n  const filteredAndSortedHostesses = hostesses\n    ?.filter((hostess) => \n      hostess.displayName.toLowerCase().includes(searchQuery.toLowerCase())\n    )\n    .sort((a, b) => \n      (a.displayName || \"\").localeCompare(b.displayName || \"\")\n    ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1 max-w-7xl mx-auto p-8 w-full\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-hero font-bold mb-2\">Find Your Perfect Time</h1>\n          <p className=\"text-body-large text-muted-foreground\">\n            Browse our talented hostesses and book your appointment\n          </p>\n        </div>\n\n        <div className=\"mb-6 flex flex-wrap items-center gap-4\">\n          <div className=\"relative flex-1 min-w-64 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search hostesses by name...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search-hostess\"\n            />\n          </div>\n\n          <Select value={locationFilter} onValueChange={setLocationFilter}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-location-filter\">\n              <SelectValue placeholder=\"All Locations\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Locations</SelectItem>\n              <SelectItem value=\"DOWNTOWN\">Downtown</SelectItem>\n              <SelectItem value=\"WEST_END\">West End</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant={viewMode === \"gallery\" ? \"default\" : \"outline\"}\n              size=\"default\"\n              onClick={() => setViewMode(\"gallery\")}\n              className=\"gap-2\"\n              data-testid=\"button-view-gallery\"\n            >\n              <LayoutGrid className=\"h-4 w-4\" />\n              Gallery\n            </Button>\n            <Button\n              variant={viewMode === \"daily\" ? \"default\" : \"outline\"}\n              size=\"default\"\n              onClick={() => setViewMode(\"daily\")}\n              className=\"gap-2\"\n              data-testid=\"button-view-daily\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              Daily\n            </Button>\n          </div>\n\n          {user && (\n            <Button\n              variant=\"outline\"\n              size=\"default\"\n              onClick={() => {\n                logout();\n                setLocation(\"/login\");\n              }}\n              className=\"gap-2 ml-auto\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n              Logout\n            </Button>\n          )}\n        </div>\n\n        {viewMode === \"daily\" ? (\n          <ClientDailyView locationFilter={locationFilter} />\n        ) : isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader className=\"items-center\">\n                  <div className=\"w-32 h-32 bg-muted rounded-full\" />\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"h-6 bg-muted rounded w-3/4 mx-auto\" />\n                  <div className=\"h-4 bg-muted rounded w-1/2 mx-auto\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredAndSortedHostesses.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center text-muted-foreground\">\n              {searchQuery \n                ? `No hostesses found matching \"${searchQuery}\"`\n                : \"No hostesses available in this location\"\n              }\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {filteredAndSortedHostesses.map((hostess) => (\n              <Card \n                key={hostess.id} \n                className=\"hover-elevate cursor-pointer transition-all\"\n                onClick={() => setLocation(`/hostess/${hostess.slug}`)}\n                data-testid={`card-hostess-${hostess.slug}`}\n              >\n                <CardHeader className=\"items-center pb-4\">\n                  <Avatar className=\"w-32 h-32\">\n                    <AvatarImage src={hostess.photoUrl || undefined} alt={hostess.displayName} />\n                    <AvatarFallback className=\"text-2xl\">\n                      {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                </CardHeader>\n                <CardContent className=\"text-center space-y-3\">\n                  <h3 className=\"text-hostess-name font-semibold\">{hostess.displayName}</h3>\n                  \n                  {hostess.locations && hostess.locations.length > 0 && (\n                    <div className=\"flex gap-1 flex-wrap justify-center\">\n                      {hostess.locations.map((loc, idx) => (\n                        <Badge key={idx} variant=\"outline\" className=\"gap-1\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  {hostess.bio && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                      {hostess.bio}\n                    </p>\n                  )}\n\n                  {hostess.specialties && hostess.specialties.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 justify-center\">\n                      {hostess.specialties.slice(0, 3).map((specialty) => (\n                        <Badge key={specialty} variant=\"secondary\" className=\"text-xs\">\n                          {specialty}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  <Button className=\"w-full mt-4\" data-testid={`button-view-${hostess.slug}`}>\n                    View Profile\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7937},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/my-bookings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar, MapPin, Clock, MessageSquare, XCircle, Send } from \"lucide-react\";\nimport { formatDate, formatTimeRange } from \"@/lib/time-utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Footer } from \"@/components/footer\";\nimport type { BookingWithDetails } from \"@shared/schema\";\n\nexport default function MyBookings() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [notesBookingId, setNotesBookingId] = useState<string | null>(null);\n  const [notesText, setNotesText] = useState(\"\");\n  const [cancelBookingId, setCancelBookingId] = useState<string | null>(null);\n\n  const { data: bookings, isLoading } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/my\"],\n  });\n\n  const upcomingBookings = bookings?.filter(b => \n    b.status !== \"CANCELED\" && b.status !== \"COMPLETED\"\n  ) || [];\n\n  const pastBookings = bookings?.filter(b => \n    b.status === \"COMPLETED\" || b.status === \"CANCELED\"\n  ) || [];\n\n  const addNotesMutation = useMutation({\n    mutationFn: async ({ bookingId, notes }: { bookingId: string; notes: string }) => {\n      return apiRequest(\"PATCH\", `/api/bookings/${bookingId}/notes`, { notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({ title: \"Notes updated successfully\" });\n      setNotesBookingId(null);\n      setNotesText(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update notes\",\n        description: error.message,\n      });\n    },\n  });\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      return apiRequest(\"POST\", `/api/bookings/${bookingId}/cancel`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({ title: \"Booking cancelled successfully\" });\n      setCancelBookingId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to cancel booking\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleAddNotes = (booking: BookingWithDetails) => {\n    setNotesBookingId(booking.id);\n    setNotesText(booking.notes || \"\");\n  };\n\n  const handleCancelBooking = (bookingId: string) => {\n    setCancelBookingId(bookingId);\n  };\n\n  const handleMessageHostess = () => {\n    setLocation(\"/messages\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1 p-8\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n        <div>\n          <h1 className=\"text-hero font-bold mb-2\">My Bookings</h1>\n          <p className=\"text-body-large text-muted-foreground\">\n            View and manage your appointments\n          </p>\n        </div>\n\n        {/* Upcoming Bookings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Appointments</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : upcomingBookings.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No upcoming appointments</p>\n                <Button className=\"mt-4\" onClick={() => window.location.href = \"/hostesses\"}>\n                  Book Now\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingBookings.map((booking) => (\n                  <div\n                    key={booking.id}\n                    className=\"p-4 border rounded-lg hover-elevate\"\n                    data-testid={`booking-${booking.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-semibold\">{booking.hostess.displayName}</h3>\n                          <Badge\n                            variant={booking.status === \"CONFIRMED\" ? \"default\" : \"secondary\"}\n                          >\n                            {booking.status}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            {formatDate(booking.date)}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span className=\"font-mono\">\n                              {formatTimeRange(booking.startTime, booking.endTime)}\n                            </span>\n                          </div>\n                          {booking.hostess.locations && booking.hostess.locations.length > 0 && (\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"h-4 w-4\" />\n                              {booking.hostess.locations.map((loc, idx) => (\n                                <span key={idx}>\n                                  {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                                  {idx < booking.hostess.locations.length - 1 && \", \"}\n                                </span>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                          <p className=\"text-sm font-medium\">{booking.service.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {booking.service.durationMin} minutes - ${(booking.service.priceCents / 100).toFixed(2)}\n                          </p>\n                        </div>\n\n                        {booking.notes && (\n                          <div className=\"mt-2\">\n                            <p className=\"text-sm text-muted-foreground\">\n                              <span className=\"font-medium\">Notes:</span> {booking.notes}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex flex-col gap-2 ml-4\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          onClick={handleMessageHostess}\n                          data-testid={`button-message-${booking.id}`}\n                        >\n                          <Send className=\"h-4 w-4 mr-2\" />\n                          Message\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleAddNotes(booking)}\n                          data-testid={`button-add-notes-${booking.id}`}\n                        >\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n                          {booking.notes ? \"Edit Notes\" : \"Add Notes\"}\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleCancelBooking(booking.id)}\n                          data-testid={`button-cancel-${booking.id}`}\n                        >\n                          <XCircle className=\"h-4 w-4 mr-2\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Past Bookings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Past Appointments</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {pastBookings.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">No past appointments</div>\n            ) : (\n              <div className=\"space-y-3\">\n                {pastBookings.slice(0, 10).map((booking) => (\n                  <div\n                    key={booking.id}\n                    className=\"p-4 border rounded-lg opacity-60\"\n                    data-testid={`past-booking-${booking.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{booking.hostess.displayName}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {formatDate(booking.date)} • {formatTimeRange(booking.startTime, booking.endTime)}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\">{booking.status}</Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add Notes Dialog */}\n        <Dialog open={!!notesBookingId} onOpenChange={(open) => !open && setNotesBookingId(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add Notes to Booking</DialogTitle>\n              <DialogDescription>\n                Add or update notes for your appointment. These will be visible to the hostess.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Enter any special requests or preferences...\"\n                  value={notesText}\n                  onChange={(e) => setNotesText(e.target.value)}\n                  rows={4}\n                  data-testid=\"input-notes\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setNotesBookingId(null)}\n                data-testid=\"button-cancel-notes\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => notesBookingId && addNotesMutation.mutate({ bookingId: notesBookingId, notes: notesText })}\n                disabled={addNotesMutation.isPending}\n                data-testid=\"button-save-notes\"\n              >\n                {addNotesMutation.isPending ? \"Saving...\" : \"Save Notes\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Cancel Booking Dialog */}\n        <Dialog open={!!cancelBookingId} onOpenChange={(open) => !open && setCancelBookingId(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Cancel Booking</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to cancel this appointment? This action cannot be undone.\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCancelBookingId(null)}\n                data-testid=\"button-cancel-dialog\"\n              >\n                Keep Booking\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() => cancelBookingId && cancelBookingMutation.mutate(cancelBookingId)}\n                disabled={cancelBookingMutation.isPending}\n                data-testid=\"button-confirm-cancel\"\n              >\n                {cancelBookingMutation.isPending ? \"Cancelling...\" : \"Yes, Cancel Booking\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12980},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/reset-password.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Footer } from \"@/components/footer\";\n\nconst resetPasswordSchema = z.object({\n  oldPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"New password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const { resetPassword } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ResetPasswordFormData) => {\n    setIsLoading(true);\n    try {\n      await resetPassword(data.oldPassword, data.newPassword);\n      toast({\n        title: \"Password updated\",\n        description: \"Your password has been changed successfully\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Password reset failed\",\n        description: error.message || \"Could not update password\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">Reset Password</CardTitle>\n          <CardDescription>You must change your password before continuing</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"oldPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-old-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-new-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-reset\"\n              >\n                {isLoading ? \"Updating...\" : \"Update Password\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4936},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport helmet from \"helmet\";\nimport { registerRoutes } from \"./routes\";\nimport { registerExtendedRoutes } from \"./routes-extended\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { scheduleBookingCleanup } from \"./cleanup\";\n\nconst app = express();\n\n// Trust proxy for rate limiting and IP detection\napp.set('trust proxy', true);\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: false,\n}));\n\napp.use(cors({\n  origin: true,\n  credentials: true,\n}));\n\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  registerExtendedRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Schedule automatic cleanup of client booking history older than 2 weeks\n    scheduleBookingCleanup();\n  });\n})();\n","size_bytes":2627},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Footer } from \"@/components/footer\";\nimport logoUrl from \"@assets/club-alpha-badge (1)_1760718368973.png\";\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true);\n    try {\n      await register(data.email, data.password);\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to Club Alpha!\",\n      });\n      // Redirect to hostesses page (CLIENT default)\n      setLocation(\"/hostesses\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Registration failed\",\n        description: error.message || \"Could not create account\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <div className=\"absolute top-4 right-4 z-10\">\n        <ThemeToggle />\n      </div>\n      \n      <div className=\"flex-1 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3\">\n          <div className=\"flex justify-center\">\n            <img src={logoUrl} alt=\"Club Alpha\" className=\"h-20 w-20\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n          <CardDescription className=\"text-center\">Register as a new client</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? \"Creating account...\" : \"Register\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            <span>Already have an account? </span>\n            <button\n              onClick={() => setLocation(\"/login\")}\n              className=\"text-primary hover:underline\"\n              data-testid=\"link-login\"\n            >\n              Sign in\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5589},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"design_guidelines.md":{"content":"# Club Alpha Booking Platform - Design Guidelines\n\n## Design Approach\n**Selected Framework:** Design System Approach (Carbon Design + Material Design hybrid)\n**Rationale:** This is a utility-focused, data-dense scheduling platform requiring clarity, efficiency, and precise information hierarchy. The admin grid is the centerpiece requiring exceptional readability and interaction patterns for time-based data visualization.\n\n---\n\n## Core Design Principles\n1. **Clarity Over Decoration** - Every visual element serves the functional goal of booking management\n2. **Time-First Hierarchy** - Temporal data (slots, schedules, availability) takes visual priority\n3. **Role-Appropriate Density** - Admin/reception interfaces are information-rich; client interfaces are spacious and welcoming\n4. **Status-Driven Color** - Color communicates booking state, not aesthetics\n\n---\n\n## Color System\n\n### Admin/Reception Interface (Dark Mode Primary)\n**Background Layers:**\n- Base: 220 15% 12%\n- Surface: 220 14% 16%\n- Surface Elevated: 220 13% 20%\n- Surface Overlay: 220 12% 24%\n\n**Status Colors (Semantic):**\n- Available Slot: 145 55% 45% (muted teal)\n- Booked Slot: 210 85% 55% (vibrant blue)\n- Time-Off: 25 75% 55% (warm amber)\n- Outside Schedule: 220 10% 18% (subtle gray, barely distinct from base)\n- Conflict/Error: 0 75% 60% (clear red)\n- Confirmed: 145 60% 50% (success green)\n- Pending: 45 85% 60% (attention yellow)\n\n**Interactive Elements:**\n- Primary Action: 210 90% 55% (blue, matches booked slots for consistency)\n- Primary Hover: 210 90% 60%\n- Secondary: 220 12% 35%\n- Text Primary: 220 10% 95%\n- Text Secondary: 220 8% 70%\n\n### Client-Facing Interface (Light Mode Primary)\n**Background:**\n- Base: 0 0% 100%\n- Surface: 220 20% 98%\n- Subtle: 220 15% 95%\n\n**Brand Colors:**\n- Primary: 210 90% 45% (sophisticated blue)\n- Accent: 280 60% 55% (refined purple, used sparingly for CTAs)\n- Success: 145 60% 45%\n- Text: 220 25% 15%\n- Text Muted: 220 15% 50%\n\n---\n\n## Typography\n\n**Font Stack:**\n- Primary: 'Inter', system-ui, -apple-system, sans-serif\n- Monospace (for times): 'Roboto Mono', 'SF Mono', Consolas, monospace\n\n**Scale (Admin/Reception):**\n- Grid Headers: 13px, 600 weight, 1.1 line-height, uppercase tracking\n- Time Labels: 12px, 500 weight, monospace\n- Booking Cards: 14px, 400 weight\n- Section Titles: 18px, 600 weight\n- Dashboard Metrics: 32px, 700 weight\n\n**Scale (Client-Facing):**\n- Hero Headline: 48px, 700 weight, tight tracking\n- Hostess Name: 24px, 600 weight\n- Service Title: 16px, 500 weight\n- Body Text: 15px, 400 weight, 1.6 line-height\n- Time Slots: 14px, 500 weight, monospace\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 3, 4, 6, 8, 12, 16, 20 for consistent rhythm\n- Micro spacing: 2, 3 (tight icon-text pairs, internal card padding)\n- Component spacing: 4, 6 (between form fields, card elements)\n- Section spacing: 8, 12, 16 (between dashboard cards, grid sections)\n- Page margins: 20 (outer page containers)\n\n**Grid Layouts:**\n- Admin Daily Grid: Fixed-width time column (80px) + dynamic hostess columns (200px min-width) with horizontal scroll\n- Dashboard Cards: 2-column on desktop (grid-cols-2), single column on mobile/tablet\n- Hostess Discovery: 3-column on desktop (grid-cols-3), 2-column tablet (md:grid-cols-2), single mobile\n\n**Containers:**\n- Admin Interface: Full-width with inner max-w-[1800px] (accommodate 8+ hostess columns)\n- Client Pages: max-w-7xl for content, max-w-5xl for forms\n\n---\n\n## Component Library\n\n### Admin Daily Grid (Centerpiece)\n**Structure:**\n- Sticky time column (left): 80px fixed, dark surface (220 13% 18%), subtle border-right\n- Sticky header row (top): 56px height, hostess cards with 40px circular photo, name truncated, location badge (D/W)\n- Scrollable grid body: 15-min cells (48px height), thin borders (220 12% 25%)\n- Cell states: 4px rounded corners, subtle hover lift (brightness +5%), clear status colors\n\n**Interaction:**\n- Click available cell → Quick Booking modal (centered overlay, 520px width, dark background with border)\n- Hover shows tooltip with exact time range\n- Drag selection disabled (prevents accidental multi-select)\n\n### Navigation (Admin/Reception)\n- Sidebar: 240px width, collapsible to 60px (icon-only), dark surface elevated\n- Top bar: 64px height, contains user menu, location toggle, date picker\n- Active nav item: left accent border (4px, primary blue), subtle background lift\n\n### Forms & Inputs\n**Booking Forms:**\n- Grouped sections with 16px padding, subtle background surface\n- Input fields: 44px height, 12px padding, rounded corners (6px)\n- Autocomplete: Dropdown with 8px max-height scroll, keyboard navigation\n- Date picker: Inline calendar widget, available dates highlighted, disabled dates grayed\n- Service cards: Radio selection, 12px padding, border on select, display duration + price clearly\n\n**Time Slot Picker:**\n- 15-min buttons in grid (5 columns on desktop), monospace font\n- Available: primary border, Available hover: filled\n- Unavailable: disabled opacity (0.4), no interaction\n- Selected: filled primary, white text\n\n### Cards & Panels\n**Dashboard Cards:**\n- 16px padding, 8px rounded, subtle shadow (0 2px 8px rgba(0,0,0,0.15))\n- Metric cards: Large number (32px), label below (12px muted), icon top-right\n- List cards: 4px gap between items, hover highlight per row\n\n**Hostess Profile Cards (Client):**\n- 24px padding, clean white background, subtle border\n- Photo: 120px circular, centered\n- Bio: max 3 lines with ellipsis, \"Read more\" expands\n- Specialties: Pill badges (6px padding, 12px rounded, subtle background)\n- CTA button: Full-width, 48px height, primary color\n\n### Modals & Overlays\n**Quick Booking Modal:**\n- 560px max-width, centered, dark background (admin) or light (client)\n- Header: 20px padding, title + close button\n- Body: 24px padding, form fields with 12px gap\n- Footer: 16px padding, right-aligned actions, primary + cancel buttons\n\n**Import/Export Modals:**\n- Progress bar: 8px height, rounded, animated fill\n- Row-by-row results: Green checkmark or red X icons, scrollable list\n- Download button: Icon + text, secondary style\n\n### Tables & Lists\n**Booking Lists:**\n- Alternating row backgrounds (subtle, 2% opacity difference)\n- Row height: 56px, 12px horizontal padding\n- Status badges: 6px rounded pill, 4px padding, status colors\n- Actions column: Icon buttons (32px), subtle hover backgrounds\n\n---\n\n## Animations\n**Minimal, Purposeful Motion:**\n- Grid cell hover: 150ms ease-out brightness shift\n- Modal entry: 200ms ease-out scale (0.95 → 1) + fade\n- Button interactions: Built-in Tailwind transitions (150ms)\n- Loading states: Subtle pulse on skeleton screens\n- **No scroll-triggered animations, no parallax, no decorative motion**\n\n---\n\n## Images\n\n### Client-Facing Pages\n**Hostess Profiles:**\n- Professional headshots: 400x400px minimum, circular crop on cards, full display on profile pages\n- Background: Subtle gradient behind bio section (not distracting)\n\n**Homepage/Marketing:**\n- No large hero image - Start with location selector and immediate hostess grid\n- Focus on functional entry point, not branding imagery\n\n### Admin Interface\n**Minimal imagery:**\n- Small circular photos in grid headers (40px)\n- User avatars in navigation (32px)\n- No decorative or background images\n\n---\n\n## Accessibility & Responsiveness\n\n**Dark Mode:**\n- Consistent across admin/reception interfaces\n- Sufficient contrast (WCAG AAA for text, AA for UI elements)\n- Form inputs maintain dark backgrounds with lighter borders for visibility\n\n**Mobile Adaptations:**\n- Admin grid: Switch to list view on mobile (<768px), show one hostess schedule at a time with tabs\n- Client booking: Stack form fields, enlarge touch targets to 48px minimum\n- Navigation: Hamburger menu, full-screen overlay\n\n**Keyboard Navigation:**\n- Tab order follows logical flow (top→down, left→right)\n- Grid cells focusable, Enter to trigger booking modal\n- Escape closes modals\n- Arrow keys navigate time slot picker\n\n---\n\n## Role-Specific Refinements\n\n**CLIENT Interface:**\n- Generous whitespace (24px between sections)\n- Friendly micro-copy (\"Find your perfect time\", \"Book instantly\")\n- Clear availability indicators (green badges)\n- Simplified navigation (Hostesses → Profile → Book)\n\n**RECEPTION Interface:**\n- Information-dense but organized\n- Quick actions always visible (sticky toolbar)\n- 14-day history clearly marked with date range selector\n- Restricted actions hidden (not just disabled)\n\n**STAFF Interface:**\n- Personal dashboard: \"Your Schedule Today\", upcoming appointments\n- Filtered calendar showing only their bookings\n- Simplified view (no admin tools, no other hostesses)\n\n**ADMIN Interface:**\n- Full control panel with metrics\n- Bulk action warnings (confirmation modals)\n- Audit log viewer (table with filters)\n- Advanced tools clearly separated in dedicated sections","size_bytes":8847},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/admin-users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { UserCog, FileUp, AlertCircle, CheckCircle2, XCircle, KeyRound, ShieldOff, ShieldCheck, Trash2 } from \"lucide-react\";\nimport type { User, Hostess } from \"@shared/schema\";\n\nexport default function AdminUsers() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [resetPasswordUser, setResetPasswordUser] = useState<User | null>(null);\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState<string>(\"\");\n  const [selectedHostess, setSelectedHostess] = useState<string>(\"\");\n  const [csvData, setCsvData] = useState(\"\");\n  const [importResults, setImportResults] = useState<any>(null);\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: hostesses } = useQuery<Hostess[]>({\n    queryKey: [\"/api/hostesses\"],\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, role, hostessId }: { id: string; role: string; hostessId?: string }) => {\n      return apiRequest(\"PATCH\", `/api/admin/users/${id}`, { role, hostessId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n      toast({ title: \"User updated successfully\" });\n      setEditingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update user\",\n        description: error.message,\n      });\n    },\n  });\n\n  const bulkImportMutation = useMutation({\n    mutationFn: async (data: string) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/users/bulk-import\", { csvData: data });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setImportResults(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      \n      const successCount = data.results.filter((r: any) => r.success).length;\n      const failCount = data.results.filter((r: any) => !r.success).length;\n      \n      toast({\n        title: \"Import completed\",\n        description: `${successCount} users created, ${failCount} failed`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Import failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ id, password }: { id: string; password: string }) => {\n      return apiRequest(\"POST\", `/api/admin/users/${id}/reset-password`, { password });\n    },\n    onSuccess: () => {\n      toast({ title: \"Password reset successfully\" });\n      setResetPasswordUser(null);\n      setNewPassword(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to reset password\",\n        description: error.message,\n      });\n    },\n  });\n\n  const banUserMutation = useMutation({\n    mutationFn: async ({ id, banned }: { id: string; banned: boolean }) => {\n      return apiRequest(\"POST\", `/api/admin/users/${id}/ban`, { banned });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ \n        title: variables.banned ? \"User banned successfully\" : \"User unbanned successfully\",\n        description: variables.banned ? \"User will no longer be able to log in\" : \"User can now log in again\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to update user status\",\n        description: error.message,\n      });\n    },\n  });\n\n  const resetClientBookingsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/bookings/reset-clients\", {});\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({\n        title: \"Client bookings reset\",\n        description: `Successfully deleted ${data.deletedCount} client booking(s)`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to reset bookings\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleUpdate = () => {\n    if (!editingUser || !selectedRole) return;\n    \n    updateUserMutation.mutate({\n      id: editingUser.id,\n      role: selectedRole,\n      hostessId: selectedRole === \"STAFF\" ? selectedHostess || undefined : undefined,\n    });\n  };\n\n  const handleBulkImport = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please paste CSV data to import\",\n      });\n      return;\n    }\n    setImportResults(null);\n    bulkImportMutation.mutate(csvData);\n  };\n\n  const handleResetPassword = () => {\n    if (!resetPasswordUser || !newPassword) return;\n    if (newPassword.length < 8) {\n      toast({\n        variant: \"destructive\",\n        title: \"Password too short\",\n        description: \"Password must be at least 8 characters\",\n      });\n      return;\n    }\n    resetPasswordMutation.mutate({\n      id: resetPasswordUser.id,\n      password: newPassword,\n    });\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"ADMIN\": return \"default\";\n      case \"STAFF\": return \"secondary\";\n      case \"RECEPTION\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const sortedUsers = users?.slice().sort((a, b) => a.email.localeCompare(b.email)) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-section-title font-semibold\">User Management</h1>\n          <p className=\"text-muted-foreground\">Manage user roles and permissions</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Users</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Username</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Linked Hostess</TableHead>\n                    <TableHead>Force Reset</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedUsers.map((user) => {\n                    const linkedHostess = hostesses?.find(h => h.userId === user.id);\n                    \n                    return (\n                      <TableRow key={user.id} data-testid={`user-${user.id}`}>\n                        <TableCell className=\"font-medium\">{user.username}</TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={getRoleBadgeVariant(user.role)}>\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {user.banned ? (\n                            <Badge variant=\"destructive\" data-testid={`status-banned-${user.id}`}>Banned</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-active-${user.id}`}>Active</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {linkedHostess ? linkedHostess.displayName : \"-\"}\n                        </TableCell>\n                        <TableCell>\n                          {user.forcePasswordReset ? (\n                            <Badge variant=\"destructive\">Yes</Badge>\n                          ) : (\n                            <Badge variant=\"outline\">No</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingUser(user);\n                                setSelectedRole(user.role);\n                                setSelectedHostess(linkedHostess?.id || \"\");\n                              }}\n                              data-testid={`button-edit-${user.id}`}\n                            >\n                              <UserCog className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setResetPasswordUser(user);\n                                setNewPassword(\"\");\n                              }}\n                              data-testid={`button-reset-password-${user.id}`}\n                            >\n                              <KeyRound className=\"h-4 w-4 mr-2\" />\n                              Reset Password\n                            </Button>\n                            {user.role === \"CLIENT\" && (\n                              <Button\n                                variant={user.banned ? \"default\" : \"destructive\"}\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm(user.banned ? `Unban ${user.email}?` : `Ban ${user.email}? They will not be able to log in.`)) {\n                                    banUserMutation.mutate({ id: user.id, banned: !user.banned });\n                                  }\n                                }}\n                                disabled={banUserMutation.isPending}\n                                data-testid={`button-ban-${user.id}`}\n                              >\n                                {user.banned ? (\n                                  <>\n                                    <ShieldCheck className=\"h-4 w-4 mr-2\" />\n                                    Unban\n                                  </>\n                                ) : (\n                                  <>\n                                    <ShieldOff className=\"h-4 w-4 mr-2\" />\n                                    Ban\n                                  </>\n                                )}\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Bulk Import Users</CardTitle>\n            <CardDescription>Upload a CSV file to create multiple users at once</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>CSV Format:</strong> email,role,password (password is optional)\n                <br />\n                <strong>Example:</strong> user@example.com,CLIENT,mypassword123\n                <br />\n                <strong>Roles:</strong> ADMIN, STAFF, RECEPTION, CLIENT\n              </AlertDescription>\n            </Alert>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Upload CSV File</label>\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileUpload}\n                className=\"block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n                data-testid=\"input-csv-file\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Or Paste CSV Data</label>\n              <Textarea\n                value={csvData}\n                onChange={(e) => setCsvData(e.target.value)}\n                placeholder=\"email,role,password&#10;user1@example.com,CLIENT&#10;user2@example.com,STAFF,password123\"\n                rows={6}\n                className=\"font-mono text-xs\"\n                data-testid=\"textarea-csv\"\n              />\n            </div>\n\n            <Button\n              onClick={handleBulkImport}\n              disabled={bulkImportMutation.isPending || !csvData.trim()}\n              className=\"w-full\"\n              data-testid=\"button-import-users\"\n            >\n              <FileUp className=\"h-4 w-4 mr-2\" />\n              {bulkImportMutation.isPending ? \"Importing...\" : \"Import Users\"}\n            </Button>\n\n            {importResults && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Import Results</CardTitle>\n                  <CardDescription>\n                    {importResults.imported} of {importResults.total} users imported successfully\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {importResults.results.map((result: any, idx: number) => (\n                      <div\n                        key={idx}\n                        className={`flex items-start gap-2 p-3 rounded-md ${\n                          result.success ? \"bg-green-50 dark:bg-green-950\" : \"bg-red-50 dark:bg-red-950\"\n                        }`}\n                        data-testid={`result-${idx}`}\n                      >\n                        {result.success ? (\n                          <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400 shrink-0 mt-0.5\" />\n                        ) : (\n                          <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400 shrink-0 mt-0.5\" />\n                        )}\n                        <div className=\"flex-1 text-sm\">\n                          <div className=\"font-medium\">{result.row.email}</div>\n                          {result.success ? (\n                            <>\n                              <div className=\"text-muted-foreground\">\n                                Role: {result.row.role || \"CLIENT\"}\n                              </div>\n                              {result.generatedPassword && (\n                                <div className=\"text-xs text-orange-600 dark:text-orange-400 mt-1\">\n                                  Generated password: <code className=\"bg-background px-1 rounded\">{result.generatedPassword}</code>\n                                </div>\n                              )}\n                            </>\n                          ) : (\n                            <div className=\"text-red-600 dark:text-red-400\">{result.error}</div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </CardContent>\n        </Card>\n\n        {currentUser?.role === \"ADMIN\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Reset Client Bookings</CardTitle>\n              <CardDescription>Delete all bookings made by CLIENT users</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Warning:</strong> This will permanently delete ALL bookings made by CLIENT role users. This action cannot be undone.\n                </AlertDescription>\n              </Alert>\n\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  if (confirm(\"Are you sure you want to delete ALL client bookings? This cannot be undone.\")) {\n                    resetClientBookingsMutation.mutate();\n                  }\n                }}\n                disabled={resetClientBookingsMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-reset-client-bookings\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                {resetClientBookingsMutation.isPending ? \"Deleting...\" : \"Reset All Client Bookings\"}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        <Dialog open={!!editingUser} onOpenChange={(open) => !open && setEditingUser(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit User: {editingUser?.email}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Role</label>\n                <Select value={selectedRole} onValueChange={setSelectedRole}>\n                  <SelectTrigger data-testid=\"select-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                    <SelectItem value=\"STAFF\">Staff</SelectItem>\n                    <SelectItem value=\"RECEPTION\">Reception</SelectItem>\n                    <SelectItem value=\"CLIENT\">Client</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {selectedRole === \"STAFF\" && (\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Link to Hostess</label>\n                  <Select value={selectedHostess} onValueChange={setSelectedHostess}>\n                    <SelectTrigger data-testid=\"select-hostess\">\n                      <SelectValue placeholder=\"Select hostess...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"NONE\">None</SelectItem>\n                      {hostesses\n                        ?.filter(h => !h.userId || h.userId === editingUser?.id)\n                        .map(h => (\n                          <SelectItem key={h.id} value={h.id}>\n                            {h.displayName}\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Only unlinked hostesses or current assignment shown\n                  </p>\n                </div>\n              )}\n\n              <Button\n                onClick={handleUpdate}\n                className=\"w-full\"\n                disabled={updateUserMutation.isPending}\n                data-testid=\"button-update-user\"\n              >\n                {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog open={!!resetPasswordUser} onOpenChange={(open) => !open && (setResetPasswordUser(null), setNewPassword(\"\"))}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Reset Password</DialogTitle>\n              <DialogDescription>\n                Set a new password for {resetPasswordUser?.email}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">New Password</label>\n                <Input\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter new password (min 8 characters)\"\n                  data-testid=\"input-new-password\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Password must be at least 8 characters long\n                </p>\n              </div>\n\n              <Button\n                onClick={handleResetPassword}\n                className=\"w-full\"\n                disabled={resetPasswordMutation.isPending || newPassword.length < 8}\n                data-testid=\"button-confirm-reset-password\"\n              >\n                {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22422},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Base colors\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        // Status colors for booking grid\n        available: \"hsl(0 0% 100% / <alpha-value>)\", // clean white\n        booked: \"hsl(217 91% 60% / <alpha-value>)\", // vibrant blue\n        notes: \"hsl(145 65% 50% / <alpha-value>)\", // vibrant green for notes added\n        \"time-off\": \"hsl(0 84% 60% / <alpha-value>)\", // bright red\n        \"outside-schedule\": \"hsl(220 10% 18% / <alpha-value>)\", // subtle gray\n        conflict: \"hsl(0 75% 60% / <alpha-value>)\", // clear red\n        confirmed: \"hsl(217 91% 60% / <alpha-value>)\", // vibrant blue (matches booked)\n        pending: \"hsl(217 91% 60% / <alpha-value>)\", // vibrant blue (matches booked)\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      fontSize: {\n        // Admin/Reception scale\n        'grid-header': ['13px', { lineHeight: '1.1', fontWeight: '600', letterSpacing: '0.05em' }],\n        'time-label': ['12px', { lineHeight: '1.2', fontWeight: '500' }],\n        'booking-card': ['14px', { lineHeight: '1.4', fontWeight: '400' }],\n        'section-title': ['18px', { lineHeight: '1.3', fontWeight: '600' }],\n        'dashboard-metric': ['32px', { lineHeight: '1.1', fontWeight: '700' }],\n        // Client-facing scale\n        'hero': ['48px', { lineHeight: '1.1', fontWeight: '700', letterSpacing: '-0.02em' }],\n        'hostess-name': ['24px', { lineHeight: '1.2', fontWeight: '600' }],\n        'service-title': ['16px', { lineHeight: '1.3', fontWeight: '500' }],\n        'body-large': ['15px', { lineHeight: '1.6', fontWeight: '400' }],\n        'time-slot': ['14px', { lineHeight: '1.2', fontWeight: '500' }],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5392},"client/src/pages/staff-schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { format, addDays, startOfWeek, addWeeks, subWeeks, parse, isSameDay } from \"date-fns\";\nimport { toZonedTime } from \"date-fns-tz\";\nimport { formatTimeRange, getCurrentDateToronto } from \"@/lib/time-utils\";\nimport type { BookingWithDetails, Hostess, WeeklySchedule } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth-context\";\n\nconst APP_TIMEZONE = \"America/Toronto\";\n\nexport default function StaffScheduleWeekly() {\n  const { user } = useAuth();\n  const [weekStart, setWeekStart] = useState(() => {\n    const now = toZonedTime(new Date(), APP_TIMEZONE);\n    return startOfWeek(now, { weekStartsOn: 0 }); // Sunday\n  });\n\n  const today = getCurrentDateToronto();\n  const todayDate = parse(today, \"yyyy-MM-dd\", new Date());\n\n  // Get staff's linked hostess\n  const { data: linkedHostess } = useQuery<Hostess>({\n    queryKey: [\"/api/staff/hostess\"],\n  });\n\n  // Get all upcoming bookings\n  const { data: allBookings = [] } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/staff/bookings/upcoming\"],\n    enabled: !!linkedHostess,\n  });\n\n  // Get weekly schedule\n  const { data: weeklySchedule = [] } = useQuery<WeeklySchedule[]>({\n    queryKey: [\"/api/staff/weekly-schedule\"],\n    enabled: !!linkedHostess,\n  });\n\n  if (!linkedHostess) {\n    return (\n      <div className=\"min-h-screen bg-background p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">\n                Your account is not yet linked to a hostess profile. Please contact an administrator.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const weekEnd = addDays(weekStart, 6);\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  const goToPreviousWeek = () => setWeekStart(prev => subWeeks(prev, 1));\n  const goToNextWeek = () => setWeekStart(prev => addWeeks(prev, 1));\n\n  const getDaySchedule = (weekday: number) => {\n    return weeklySchedule.find(s => s.weekday === weekday);\n  };\n\n  const getDayBookings = (date: string) => {\n    return allBookings.filter((b: BookingWithDetails) => b.date === date);\n  };\n\n  const getDayColor = (date: Date) => {\n    const isToday = isSameDay(date, todayDate);\n    if (isToday) return \"purple\";\n    \n    const weekday = date.getDay();\n    const schedule = getDaySchedule(weekday);\n    if (schedule && schedule.startTime && schedule.endTime) {\n      return \"green\";\n    }\n    return \"gray\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-5xl mx-auto space-y-4\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-2xl font-bold mb-1\">My Schedule</h1>\n          <p className=\"text-sm text-muted-foreground\">Your weekly appointment schedule</p>\n        </div>\n\n        {/* Week Navigation */}\n        <Card>\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToPreviousWeek}\n                className=\"gap-1\"\n                data-testid=\"button-prev-week\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n\n              <div className=\"text-center\">\n                <p className=\"text-base font-bold\">\n                  {format(weekStart, \"MMM d\")} - {format(weekEnd, \"MMM d, yyyy\")}\n                </p>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToNextWeek}\n                className=\"gap-1\"\n                data-testid=\"button-next-week\"\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Daily Breakdown */}\n        <div className=\"space-y-3\">\n          {weekDays.map((date, index) => {\n            const weekday = date.getDay();\n            const dateStr = format(date, \"yyyy-MM-dd\");\n            const daySchedule = getDaySchedule(weekday);\n            const dayBookings = getDayBookings(dateStr);\n            const isToday = isSameDay(date, todayDate);\n            const color = getDayColor(date);\n            const hasWorkingHours = daySchedule && daySchedule.startTime && daySchedule.endTime;\n\n            const borderColorClass = {\n              purple: \"border-purple-500\",\n              green: \"border-green-500\",\n              gray: \"border-gray-300 dark:border-gray-700\"\n            }[color];\n\n            const dotColorClass = {\n              purple: \"bg-purple-500\",\n              green: \"bg-green-500\",\n              gray: \"bg-gray-400\"\n            }[color];\n\n            return (\n              <Card\n                key={index}\n                className={`${borderColorClass} ${isToday ? \"border-2\" : \"\"}`}\n                data-testid={`day-card-${index}`}\n              >\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`h-2 w-2 rounded-full ${dotColorClass}`} />\n                      <div>\n                        <h3 className=\"text-sm font-bold\">\n                          {format(date, \"EEEE, MMMM d\")}\n                        </h3>\n                      </div>\n                      {isToday && (\n                        <Badge\n                          className=\"bg-purple-500 text-white text-xs\"\n                          data-testid=\"badge-today\"\n                        >\n                          Today\n                        </Badge>\n                      )}\n                    </div>\n\n                    {hasWorkingHours && daySchedule.startTime !== null && daySchedule.endTime !== null && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {formatTimeRange(daySchedule.startTime, daySchedule.endTime)}\n                      </Badge>\n                    )}\n                  </div>\n\n                  {!hasWorkingHours ? (\n                    <div className=\"py-6 text-center text-sm text-muted-foreground\">\n                      Day Off\n                    </div>\n                  ) : dayBookings.length === 0 ? (\n                    <div className=\"py-6 text-center text-sm text-muted-foreground\">\n                      No appointments or time off scheduled\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {dayBookings.map((booking: BookingWithDetails) => (\n                        <div\n                          key={booking.id}\n                          className=\"p-3 rounded-md border bg-card hover-elevate\"\n                          data-testid={`booking-${booking.id}`}\n                        >\n                          <div className=\"flex items-center justify-between gap-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {formatTimeRange(booking.startTime, booking.endTime)}\n                                </Badge>\n                                <Badge variant=\"default\" className=\"bg-purple-500 text-xs\">\n                                  {booking.service?.name}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm font-medium\">{booking.client?.email || \"Client\"}</p>\n                              {booking.notes && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">{booking.notes}</p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8520},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, hostesses, services, bookings, weeklySchedule, timeOff } from \"@shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { format, addDays } from \"date-fns\";\n\nconst SALT_ROUNDS = 10;\n\nasync function seed() {\n  console.log(\"🌱 Starting database seed...\\n\");\n\n  try {\n    // Check if already seeded\n    const existingServices = await db.select().from(services).limit(1);\n    if (existingServices.length > 0) {\n      console.log(\"⚠️  Database already seeded. Skipping...\");\n      console.log(\"   To re-seed, manually clear the database tables first.\");\n      return;\n    }\n\n    // 1. Create Admin User\n    console.log(\"👤 Creating admin user...\");\n    const adminPassword = await bcrypt.hash(\"admin123\", SALT_ROUNDS);\n    const [adminUser] = await db.insert(users).values({\n      email: \"admin@clubalpha.ca\",\n      passwordHash: adminPassword,\n      role: \"ADMIN\",\n      forcePasswordReset: false,\n    }).returning();\n    console.log(`   ✓ Admin created: ${adminUser.email}`);\n\n    // 2. Create Reception User\n    console.log(\"👤 Creating reception user...\");\n    const receptionPassword = await bcrypt.hash(\"reception123\", SALT_ROUNDS);\n    const [receptionUser] = await db.insert(users).values({\n      email: \"reception@clubalpha.ca\",\n      passwordHash: receptionPassword,\n      role: \"RECEPTION\",\n      forcePasswordReset: false,\n    }).returning();\n    console.log(`   ✓ Reception created: ${receptionUser.email}`);\n\n    // 3. Create Staff User (Demo Hostess Account)\n    console.log(\"👤 Creating staff user...\");\n    const staffPassword = await bcrypt.hash(\"staff123\", SALT_ROUNDS);\n    const [staffUser] = await db.insert(users).values({\n      email: \"staff@clubalpha.ca\",\n      passwordHash: staffPassword,\n      role: \"STAFF\",\n      forcePasswordReset: false,\n    }).returning();\n    console.log(`   ✓ Staff created: ${staffUser.email}`);\n\n    // 4. Create Services\n    console.log(\"\\n💆 Creating services...\");\n    const serviceData = [\n      { name: \"Express Session\", durationMin: 15, priceCents: 3000 },\n      { name: \"Quick Refresh\", durationMin: 30, priceCents: 5000 },\n      { name: \"Standard Session\", durationMin: 45, priceCents: 7500 },\n      { name: \"Extended Session\", durationMin: 60, priceCents: 10000 },\n      { name: \"Premium Experience\", durationMin: 90, priceCents: 15000 },\n      { name: \"Deluxe Package\", durationMin: 120, priceCents: 20000 },\n      { name: \"VIP Treatment\", durationMin: 150, priceCents: 25000 },\n      { name: \"Ultimate Indulgence\", durationMin: 180, priceCents: 30000 },\n      { name: \"Half Day Retreat\", durationMin: 240, priceCents: 40000 },\n      { name: \"Full Day Experience\", durationMin: 360, priceCents: 60000 },\n    ];\n\n    const createdServices = await db.insert(services).values(serviceData).returning();\n    console.log(`   ✓ Created ${createdServices.length} services`);\n\n    // 5. Create Hostesses (10 Downtown, 10 West End)\n    console.log(\"\\n👯 Creating hostesses...\");\n    const hostessData = [\n      // Downtown only\n      { slug: \"sophia-downtown\", displayName: \"Sophia\", bio: \"Experienced and attentive, specializing in personalized care.\", specialties: [\"Relaxation\", \"Deep Tissue\", \"Aromatherapy\"], locations: [\"DOWNTOWN\"] },\n      { slug: \"emily-downtown\", displayName: \"Emily\", bio: \"Warm and welcoming with a focus on comfort and ease.\", specialties: [\"Swedish\", \"Hot Stone\", \"Reflexology\"], locations: [\"DOWNTOWN\"] },\n      { slug: \"olivia-downtown\", displayName: \"Olivia\", bio: \"Professional and skilled in therapeutic techniques.\", specialties: [\"Sports Massage\", \"Trigger Point\", \"Stretching\"], locations: [\"DOWNTOWN\"] },\n      { slug: \"ava-downtown\", displayName: \"Ava\", bio: \"Gentle and nurturing, perfect for first-time guests.\", specialties: [\"Gentle Touch\", \"Prenatal\", \"Stress Relief\"], locations: [\"DOWNTOWN\"] },\n      { slug: \"isabella-downtown\", displayName: \"Isabella\", bio: \"Energetic and passionate about holistic wellness.\", specialties: [\"Thai Massage\", \"Shiatsu\", \"Energy Work\"], locations: [\"DOWNTOWN\"] },\n      \n      // West End only\n      { slug: \"emma-westend\", displayName: \"Emma\", bio: \"Calm and soothing presence for ultimate relaxation.\", specialties: [\"Relaxation\", \"Meditation\", \"Sound Therapy\"], locations: [\"WEST_END\"] },\n      { slug: \"madison-westend\", displayName: \"Madison\", bio: \"Expert in traditional and modern techniques.\", specialties: [\"Traditional Thai\", \"Modern Fusion\", \"Pressure Point\"], locations: [\"WEST_END\"] },\n      { slug: \"lily-westend\", displayName: \"Lily\", bio: \"Compassionate and attentive to your comfort.\", specialties: [\"Gentle Care\", \"Senior Wellness\", \"Comfort Focus\"], locations: [\"WEST_END\"] },\n      { slug: \"grace-westend\", displayName: \"Grace\", bio: \"Dynamic and versatile in all service offerings.\", specialties: [\"All Services\", \"Versatile\", \"Adaptable\"], locations: [\"WEST_END\"] },\n      { slug: \"chloe-westend\", displayName: \"Chloe\", bio: \"Certified in aromatherapy and essential oils.\", specialties: [\"Aromatherapy\", \"Essential Oils\", \"Natural Healing\"], locations: [\"WEST_END\"] },\n      \n      // Both locations - these hostesses work at both Downtown and West End\n      { slug: \"mia-both\", displayName: \"Mia\", bio: \"Detail-oriented with expertise in luxury treatments at both locations.\", specialties: [\"Luxury Spa\", \"Body Scrubs\", \"Hydrotherapy\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"charlotte-both\", displayName: \"Charlotte\", bio: \"Creative and intuitive, adapting to your needs at both locations.\", specialties: [\"Customized Sessions\", \"Mindfulness\", \"Meditation\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"amelia-both\", displayName: \"Amelia\", bio: \"Certified specialist in advanced techniques, available at both locations.\", specialties: [\"Neuromuscular\", \"Myofascial Release\", \"Cupping\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"harper-both\", displayName: \"Harper\", bio: \"Friendly and professional with years of experience at both locations.\", specialties: [\"Classic Massage\", \"Couples Massage\", \"Consultation\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"ella-both\", displayName: \"Ella\", bio: \"Passionate about creating memorable experiences at both locations.\", specialties: [\"VIP Services\", \"Special Occasions\", \"Gift Packages\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"zoe-both\", displayName: \"Zoe\", bio: \"Energizing and rejuvenating treatments at both locations.\", specialties: [\"Energy Boost\", \"Revitalization\", \"Morning Sessions\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"luna-both\", displayName: \"Luna\", bio: \"Specializing in evening and night treatments at both locations.\", specialties: [\"Evening Sessions\", \"Sleep Therapy\", \"Unwinding\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"hannah-both\", displayName: \"Hannah\", bio: \"Professional and courteous, always on time at both locations.\", specialties: [\"Punctuality\", \"Reliability\", \"Consistency\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"victoria-both\", displayName: \"Victoria\", bio: \"Premium service provider for discerning clients at both locations.\", specialties: [\"Premium Service\", \"Luxury Experience\", \"Excellence\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n      { slug: \"sophia-both\", displayName: \"Sophia W\", bio: \"Skilled practitioner focusing on pain relief and recovery at both locations.\", specialties: [\"Pain Management\", \"Injury Recovery\", \"Rehabilitation\"], locations: [\"DOWNTOWN\", \"WEST_END\"] },\n    ];\n\n    const createdHostesses = await db.insert(hostesses).values(hostessData).returning();\n    console.log(`   ✓ Created ${createdHostesses.length} hostesses`);\n\n    // Link staff user to first hostess for demo purposes\n    await db.update(hostesses)\n      .set({ userId: staffUser.id })\n      .where(eq(hostesses.id, createdHostesses[0].id));\n    console.log(`   ✓ Linked staff user to ${createdHostesses[0].displayName} (${createdHostesses[0].slug})`);\n\n    // 6. Create Weekly Schedules for all hostesses\n    console.log(\"\\n📅 Creating weekly schedules...\");\n    const scheduleData = [];\n    \n    for (const hostess of createdHostesses) {\n      // Monday-Friday: 10:00-23:00\n      for (let day = 1; day <= 5; day++) {\n        scheduleData.push({\n          hostessId: hostess.id,\n          weekday: day,\n          startTime: 600, // 10:00\n          endTime: 1380, // 23:00\n        });\n      }\n      \n      // Saturday: 12:00-20:00\n      scheduleData.push({\n        hostessId: hostess.id,\n        weekday: 6,\n        startTime: 720, // 12:00\n        endTime: 1200, // 20:00\n      });\n      \n      // Sunday: Off\n    }\n\n    await db.insert(weeklySchedule).values(scheduleData);\n    console.log(`   ✓ Created ${scheduleData.length} weekly schedule entries`);\n\n    // 7. Create Client Users\n    console.log(\"\\n👥 Creating client users...\");\n    const clientData = [];\n    const clientPassword = await bcrypt.hash(\"client123\", SALT_ROUNDS);\n    \n    for (let i = 1; i <= 50; i++) {\n      clientData.push({\n        email: `client${i}@example.com`,\n        passwordHash: clientPassword,\n        role: \"CLIENT\" as const,\n        forcePasswordReset: false,\n      });\n    }\n\n    const createdClients = await db.insert(users).values(clientData).returning();\n    console.log(`   ✓ Created ${createdClients.length} clients`);\n\n    // 8. Create Sample Bookings (only on weekdays, respecting schedule)\n    console.log(\"\\n📝 Creating sample bookings...\");\n    const bookingData = [];\n    const today = new Date();\n    \n    // Find next 3 weekdays (Mon-Sat)\n    const validDates = [];\n    for (let i = 0; i < 10 && validDates.length < 3; i++) {\n      const checkDate = addDays(today, i);\n      const dayOfWeek = checkDate.getDay(); // 0=Sun, 1=Mon, ..., 6=Sat\n      if (dayOfWeek >= 1 && dayOfWeek <= 6) { // Mon-Sat\n        validDates.push(checkDate);\n      }\n    }\n    \n    // Create bookings that fit within schedule windows\n    let bookingCount = 0;\n    for (const date of validDates) {\n      for (let h = 0; h < Math.ceil(createdHostesses.length / 2); h++) {\n        const hostess = createdHostesses[h];\n        const client = createdClients[bookingCount % createdClients.length];\n        \n        // Create 1-2 bookings per hostess: one in day shift, one in night shift\n        // Day shift: 10:00-18:00 (600-1080 minutes)\n        const dayService = createdServices[bookingCount % 5]; // Use shorter services (15-90 min)\n        const dayStartTime = 600 + (bookingCount % 4) * 60; // Stagger: 10:00, 11:00, 12:00, 13:00\n        \n        if (dayStartTime + dayService.durationMin <= 1080) { // Must end by 18:00\n          bookingData.push({\n            date: format(date, \"yyyy-MM-dd\"),\n            startTime: dayStartTime,\n            endTime: dayStartTime + dayService.durationMin,\n            hostessId: hostess.id,\n            clientId: client.id,\n            serviceId: dayService.id,\n            status: bookingCount % 4 === 0 ? \"COMPLETED\" as const : (bookingCount % 4 === 1 ? \"CONFIRMED\" as const : \"PENDING\" as const),\n            notes: bookingCount % 3 === 0 ? \"Client prefers quiet environment\" : null,\n          });\n          bookingCount++;\n        }\n        \n        // Night shift: 19:00-23:00 (1140-1380 minutes) - only Mon-Fri\n        const dayOfWeek = date.getDay();\n        if (dayOfWeek >= 1 && dayOfWeek <= 5 && bookingCount < 30) {\n          const nightService = createdServices[bookingCount % 5]; // Use shorter services\n          const nightStartTime = 1140 + (bookingCount % 3) * 60; // Stagger: 19:00, 20:00, 21:00\n          \n          if (nightStartTime + nightService.durationMin <= 1380) { // Must end by 23:00\n            const nightClient = createdClients[(bookingCount + 1) % createdClients.length];\n            bookingData.push({\n              date: format(date, \"yyyy-MM-dd\"),\n              startTime: nightStartTime,\n              endTime: nightStartTime + nightService.durationMin,\n              hostessId: hostess.id,\n              clientId: nightClient.id,\n              serviceId: nightService.id,\n              status: bookingCount % 4 === 0 ? \"COMPLETED\" as const : (bookingCount % 4 === 1 ? \"CONFIRMED\" as const : \"PENDING\" as const),\n              notes: null,\n            });\n            bookingCount++;\n          }\n        }\n        \n        if (bookingData.length >= 30) break;\n      }\n      if (bookingData.length >= 30) break;\n    }\n\n    const createdBookings = await db.insert(bookings).values(bookingData).returning();\n    console.log(`   ✓ Created ${createdBookings.length} bookings`);\n\n    // 8. Create Sample Time-Off Blocks\n    console.log(\"\\n🚫 Creating time-off blocks...\");\n    const timeOffData = [];\n    const nextWeek = addDays(today, 7);\n    \n    // Give 5 random hostesses a time-off block next week\n    for (let i = 0; i < 5; i++) {\n      const hostess = createdHostesses[i];\n      timeOffData.push({\n        hostessId: hostess.id,\n        date: format(nextWeek, \"yyyy-MM-dd\"),\n        startTime: 600, // 10:00\n        endTime: 1080, // 18:00\n        reason: \"Personal day\",\n      });\n    }\n\n    await db.insert(timeOff).values(timeOffData);\n    console.log(`   ✓ Created ${timeOffData.length} time-off blocks`);\n\n    console.log(\"\\n✅ Seed completed successfully!\\n\");\n    console.log(\"📋 Summary:\");\n    console.log(`   - 1 Admin user (admin@clubalpha.ca / admin123)`);\n    console.log(`   - 1 Reception user (reception@clubalpha.ca / reception123)`);\n    console.log(`   - ${createdServices.length} Services`);\n    console.log(`   - ${createdHostesses.length} Hostesses`);\n    console.log(`   - ${scheduleData.length} Weekly Schedule Entries`);\n    console.log(`   - ${createdClients.length} Clients (client1@example.com - client50@example.com / client123)`);\n    console.log(`   - ${createdBookings.length} Sample Bookings`);\n    console.log(`   - ${timeOffData.length} Time-Off Blocks\\n`);\n    \n  } catch (error) {\n    console.error(\"❌ Seed failed:\", error);\n    throw error;\n  }\n}\n\nseed()\n  .then(() => {\n    console.log(\"Seed script finished.\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Fatal error:\", error);\n    process.exit(1);\n  });\n","size_bytes":14184},"client/src/pages/reception-calendar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, MapPin, Users } from \"lucide-react\";\nimport { formatTimeRange, formatDate, getCurrentDateToronto } from \"@/lib/time-utils\";\nimport type { BookingWithDetails } from \"@shared/schema\";\n\nexport default function ReceptionCalendar() {\n  const [, setLocation] = useLocation();\n  const today = getCurrentDateToronto();\n\n  const { data: todaysBookings } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/day\", today],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      const res = await fetch(`/api/bookings/day?date=${today}`, { headers, credentials: \"include\" });\n      if (!res.ok) throw new Error(`${res.status}: ${await res.text()}`);\n      return res.json();\n    },\n  });\n\n  const { data: upcomingBookings } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/upcoming\"],\n  });\n\n  const downtownCount = todaysBookings?.filter(b => b.hostess.locations?.includes(\"DOWNTOWN\") && b.status !== \"CANCELED\").length || 0;\n  const westEndCount = todaysBookings?.filter(b => b.hostess.locations?.includes(\"WEST_END\") && b.status !== \"CANCELED\").length || 0;\n\n  const quickActions = [\n    { title: \"View Calendar\", icon: Calendar, href: \"/admin/calendar\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <div>\n          <h1 className=\"text-dashboard-metric font-bold mb-2\">Reception Dashboard</h1>\n          <p className=\"text-muted-foreground\">View and manage today's appointments</p>\n        </div>\n\n        {/* Today's Appointments */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                Downtown Appointments Today\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-dashboard-metric font-bold text-primary\">{downtownCount}</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                West End Appointments Today\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-dashboard-metric font-bold text-primary\">{westEndCount}</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"outline\"\n              className=\"w-full h-auto py-6 flex-col gap-2\"\n              onClick={() => setLocation(\"/admin/calendar\")}\n              data-testid=\"action-view-calendar\"\n            >\n              <Calendar className=\"h-6 w-6\" />\n              <span className=\"text-sm font-medium\">View Calendar</span>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Appointments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Appointments</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!upcomingBookings || upcomingBookings.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\">No upcoming appointments</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingBookings.slice(0, 10).map((booking) => (\n                  <div\n                    key={booking.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n                    data-testid={`booking-${booking.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <p className=\"font-medium\">{booking.hostess.displayName}</p>\n                        {booking.hostess.locations && booking.hostess.locations.length > 0 && (\n                          <div className=\"flex gap-1\">\n                            {booking.hostess.locations.map((loc, idx) => (\n                              <Badge key={idx} variant=\"outline\">\n                                {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                        <Badge\n                          variant={\n                            booking.status === \"CONFIRMED\" ? \"default\" :\n                            booking.status === \"PENDING\" ? \"secondary\" :\n                            \"outline\"\n                          }\n                        >\n                          {booking.status}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-4 mt-1 text-sm text-muted-foreground\">\n                        <span>{formatDate(booking.date)}</span>\n                        <span className=\"font-mono\">\n                          {formatTimeRange(booking.startTime, booking.endTime)}\n                        </span>\n                        <span>{booking.client.email}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5903},"client/src/pages/admin-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { useState } from \"react\";\nimport { TrendingUp, DollarSign, Calendar, XCircle } from \"lucide-react\";\n\nconst COLORS = ['hsl(210 85% 55%)', 'hsl(145 55% 45%)', 'hsl(25 75% 55%)', 'hsl(280 65% 60%)', 'hsl(45 90% 50%)'];\n\nexport default function AdminAnalytics() {\n  const [revenueGroupBy, setRevenueGroupBy] = useState<\"hostess\" | \"location\" | \"service\">(\"hostess\");\n  const [trendDays, setTrendDays] = useState(30);\n\n  const { data: revenueData, isLoading: revenueLoading } = useQuery<{ name: string; revenue: number; bookings: number }[]>({\n    queryKey: ['/api/analytics/revenue', revenueGroupBy],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/revenue?groupBy=${revenueGroupBy}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n  });\n\n  const { data: trendData, isLoading: trendLoading } = useQuery<{ date: string; bookings: number; confirmed: number; cancelled: number }[]>({\n    queryKey: ['/api/analytics/bookings-trend', trendDays],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/bookings-trend?days=${trendDays}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n  });\n\n  const { data: cancellationData, isLoading: cancellationLoading } = useQuery<{\n    total: number;\n    cancelled: number;\n    confirmed: number;\n    pending: number;\n    cancellationRate: number;\n  }>({\n    queryKey: ['/api/analytics/cancellations'],\n    queryFn: async () => {\n      const response = await fetch('/api/analytics/cancellations', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"auth_token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n  });\n\n  // Format currency\n  const formatCurrency = (cents: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(cents / 100);\n  };\n\n  // Calculate totals\n  const totalRevenue = revenueData?.reduce((sum, item) => sum + item.revenue, 0) || 0;\n  const totalBookings = revenueData?.reduce((sum, item) => sum + item.bookings, 0) || 0;\n\n  return (\n    <div className=\"min-h-screen p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Analytics Dashboard</h1>\n        <p className=\"text-muted-foreground\">Comprehensive insights into your business performance</p>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-revenue\">{formatCurrency(totalRevenue)}</div>\n            <p className=\"text-xs text-muted-foreground\">From {totalBookings} active bookings</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Bookings</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-bookings\">{cancellationData?.total || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">All time bookings</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Confirmed Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-confirmed-rate\">\n              {cancellationData ? ((cancellationData.confirmed / cancellationData.total) * 100).toFixed(1) : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">{cancellationData?.confirmed || 0} confirmed bookings</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cancellation Rate</CardTitle>\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-cancellation-rate\">{cancellationData?.cancellationRate?.toFixed(1) ?? \"0.0\"}%</div>\n            <p className=\"text-xs text-muted-foreground\">{cancellationData?.cancelled || 0} cancelled bookings</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue Chart */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Revenue Analysis</CardTitle>\n              <CardDescription>Revenue breakdown by {revenueGroupBy}</CardDescription>\n            </div>\n            <Select value={revenueGroupBy} onValueChange={(value) => setRevenueGroupBy(value as any)}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-revenue-groupby\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hostess\">By Hostess</SelectItem>\n                <SelectItem value=\"location\">By Location</SelectItem>\n                <SelectItem value=\"service\">By Service</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {revenueLoading ? (\n            <div className=\"h-[400px] flex items-center justify-center\">\n              <p className=\"text-muted-foreground\">Loading chart...</p>\n            </div>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                <Legend />\n                <Bar dataKey=\"revenue\" fill=\"hsl(210 85% 55%)\" name=\"Revenue\" />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Booking Trends */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Booking Trends</CardTitle>\n              <CardDescription>Bookings over the last {trendDays} days</CardDescription>\n            </div>\n            <Select value={String(trendDays)} onValueChange={(value) => setTrendDays(Number(value))}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-trend-days\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 days</SelectItem>\n                <SelectItem value=\"30\">Last 30 days</SelectItem>\n                <SelectItem value=\"90\">Last 90 days</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {trendLoading ? (\n            <div className=\"h-[400px] flex items-center justify-center\">\n              <p className=\"text-muted-foreground\">Loading chart...</p>\n            </div>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <LineChart data={trendData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"hsl(145 55% 45%)\" name=\"Confirmed\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"cancelled\" stroke=\"hsl(0 75% 60%)\" name=\"Cancelled\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          )}\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":9156},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Footer } from \"@/components/footer\";\nimport { User, Calendar, Lock, Users, Copy, Check, Eye, EyeOff, CalendarClock } from \"lucide-react\";\nimport logoUrl from \"@assets/club-alpha-badge (1)_1760718368973.png\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nconst loginCredentials = [\n  {\n    role: \"ADMIN\",\n    icon: Lock,\n    username: \"admin\",\n    password: \"admin123\",\n    description: \"Full platform access, analytics, user management\",\n    color: \"text-red-500\",\n  },\n  {\n    role: \"RECEPTION\",\n    icon: Calendar,\n    username: \"reception\",\n    password: \"reception123\",\n    description: \"Calendar view, create bookings, manage schedules\",\n    color: \"text-blue-500\",\n  },\n  {\n    role: \"STAFF\",\n    icon: Users,\n    username: \"staff\",\n    password: \"staff123\",\n    description: \"Manage personal schedule, upload photos, view bookings\",\n    color: \"text-green-500\",\n  },\n  {\n    role: \"CLIENT\",\n    icon: User,\n    username: \"client1\",\n    password: \"client123\",\n    description: \"Browse hostesses, book appointments, view bookings\",\n    color: \"text-purple-500\",\n  },\n];\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [copiedField, setCopiedField] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const result = await login(data.username, data.password);\n      \n      if (result?.requiresPasswordReset) {\n        setLocation(\"/change-password\");\n      } else {\n        const userRole = result?.user?.role || result?.role;\n        switch (userRole) {\n          case \"ADMIN\":\n            setLocation(\"/admin/dashboard\");\n            break;\n          case \"RECEPTION\":\n            setLocation(\"/admin/calendar\");\n            break;\n          case \"STAFF\":\n            setLocation(\"/staff/schedule\");\n            break;\n          case \"CLIENT\":\n          default:\n            setLocation(\"/hostesses\");\n            break;\n        }\n      }\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string, fieldId: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedField(fieldId);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Credential copied successfully\",\n      });\n      setTimeout(() => setCopiedField(null), 2000);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to copy\",\n        description: \"Please try again\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"absolute top-4 right-4 z-10\">\n        <ThemeToggle />\n      </div>\n\n      <div className=\"flex-1 container mx-auto px-4 py-12 max-w-6xl\">\n        <div className=\"flex flex-col items-center text-center mb-8\">\n          <img src={logoUrl} alt=\"Club Alpha\" className=\"h-40 w-40 mb-6\" />\n          <h1 className=\"text-4xl font-bold mb-3\">Welcome to Club Alpha Booking</h1>\n          \n          {/* Contact Information */}\n          <a href=\"tel:613-508-1100\" className=\"text-2xl font-semibold text-primary hover:underline mb-4 inline-block\">\n            613-508-1100\n          </a>\n        </div>\n\n        <div className=\"max-w-md mx-auto mb-12\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"username\"\n                            data-testid=\"input-username\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"••••••••\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                              data-testid=\"button-toggle-password\"\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isLoading}\n                    data-testid=\"button-login\"\n                  >\n                    {isLoading ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </Form>\n\n              <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n                <span>Don't have an account? </span>\n                <button\n                  onClick={() => setLocation(\"/register\")}\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-register\"\n                >\n                  Register\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Upcoming Schedule CTA */}\n        <Card className=\"max-w-2xl mx-auto mb-12 bg-primary/5 border-primary/20\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <div className=\"p-4 rounded-full bg-primary/10\">\n                <CalendarClock className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">Check Our Upcoming Schedule</h2>\n                <p className=\"text-muted-foreground mb-4\">\n                  View our available time slots for the upcoming week\n                </p>\n              </div>\n              <Button\n                size=\"lg\"\n                onClick={() => setLocation(\"/upcoming-schedule\")}\n                data-testid=\"button-view-upcoming-schedule\"\n                className=\"gap-2\"\n              >\n                <CalendarClock className=\"h-5 w-5\" />\n                View Upcoming Schedule\n              </Button>\n              <p className=\"text-sm text-muted-foreground\">\n                Please call us to book your appointment\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8 bg-card/50\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Demo Login Credentials</CardTitle>\n            <CardDescription>\n              Use any of the credentials below to explore the platform with different access levels\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {loginCredentials.map((cred) => (\n                <Card key={cred.role} className=\"hover-elevate\">\n                  <CardHeader className=\"flex flex-row items-start gap-4 space-y-0 pb-2\">\n                    <div className={`p-2 rounded-lg bg-muted ${cred.color}`}>\n                      <cred.icon className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{cred.role}</CardTitle>\n                      <CardDescription className=\"text-sm mt-1\">\n                        {cred.description}\n                      </CardDescription>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"flex flex-col gap-1\">\n                      <span className=\"text-xs text-muted-foreground\">Username</span>\n                      <div className=\"flex items-center gap-2\">\n                        <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded flex-1\" data-testid={`text-username-${cred.role.toLowerCase()}`}>\n                          {cred.username}\n                        </code>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8 shrink-0\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            copyToClipboard(cred.username, `${cred.role}-username`);\n                          }}\n                          data-testid={`button-copy-username-${cred.role.toLowerCase()}`}\n                        >\n                          {copiedField === `${cred.role}-username` ? (\n                            <Check className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col gap-1\">\n                      <span className=\"text-xs text-muted-foreground\">Password</span>\n                      <div className=\"flex items-center gap-2\">\n                        <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded flex-1\" data-testid={`text-password-${cred.role.toLowerCase()}`}>\n                          {cred.password}\n                        </code>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8 shrink-0\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            copyToClipboard(cred.password, `${cred.role}-password`);\n                          }}\n                          data-testid={`button-copy-password-${cred.role.toLowerCase()}`}\n                        >\n                          {copiedField === `${cred.role}-password` ? (\n                            <Check className=\"h-4 w-4 text-green-500\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Hostess Login Instructions */}\n        <Card className=\"mb-8 bg-primary/5 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Hostess Login</CardTitle>\n            <CardDescription>\n              All hostesses can log in using their first name\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start gap-3 p-4 bg-background rounded-lg border\">\n              <div className=\"flex-1 space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex items-center justify-center w-6 h-6 rounded-full bg-primary text-primary-foreground text-sm font-semibold\">\n                    1\n                  </div>\n                  <span className=\"font-medium\">First Login</span>\n                </div>\n                <div className=\"ml-8 space-y-2\">\n                  <div className=\"flex flex-col gap-1\">\n                    <span className=\"text-xs text-muted-foreground\">Username</span>\n                    <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded w-fit\">\n                      Your first name (e.g., \"Amelia\")\n                    </code>\n                  </div>\n                  <div className=\"flex flex-col gap-1\">\n                    <span className=\"text-xs text-muted-foreground\">Initial Password</span>\n                    <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded w-fit\">\n                      Same as your first name\n                    </code>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3 p-4 bg-background rounded-lg border\">\n              <div className=\"flex-1 space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex items-center justify-center w-6 h-6 rounded-full bg-primary text-primary-foreground text-sm font-semibold\">\n                    2\n                  </div>\n                  <span className=\"font-medium\">Create Your Secure Password</span>\n                </div>\n                <p className=\"ml-8 text-sm text-muted-foreground\">\n                  After your first login, you'll be required to create your own secure password. \n                  This password will be used for all future logins.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3 p-4 bg-amber-500/10 rounded-lg border border-amber-500/20\">\n              <div className=\"text-amber-600 dark:text-amber-400 mt-0.5\">\n                <Lock className=\"h-4 w-4\" />\n              </div>\n              <p className=\"text-sm text-amber-900 dark:text-amber-200\">\n                <strong>Security Note:</strong> Your initial password is temporary and must be changed \n                on first login to protect your account and client information.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15908},"client/src/pages/admin-import.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileUp, AlertCircle, CheckCircle2 } from \"lucide-react\";\n\nexport default function AdminImport() {\n  const { toast } = useToast();\n  const [csvData, setCsvData] = useState(\"\");\n  const [results, setResults] = useState<any>(null);\n\n  const importMutation = useMutation({\n    mutationFn: async (data: string) => {\n      const response = await apiRequest(\"POST\", \"/api/schedule/import\", { csvData: data });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setResults(data);\n      const successCount = data.results.filter((r: any) => r.success).length;\n      const failCount = data.results.filter((r: any) => !r.success).length;\n      \n      toast({\n        title: \"Import completed\",\n        description: `${successCount} succeeded, ${failCount} failed`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Import failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleImport = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please paste CSV data to import\",\n      });\n      return;\n    }\n    setResults(null);\n    importMutation.mutate(csvData);\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Import Schedule</h1>\n        <p className=\"text-muted-foreground\">\n          Upload or paste CSV data to bulk update hostess weekly schedules\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>CSV Format</CardTitle>\n            <CardDescription>\n              Upload a CSV file or paste CSV data with the following format\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Expected format:</strong> id,hostess,monday,tuesday,wednesday,thursday,friday,saturday,sunday\n                <br />\n                <strong>Time format:</strong> HH:mm-HH:mm (e.g., 10:00-18:00)\n                <br />\n                <strong>Example:</strong> 1,Sophia,10:00-18:00,10:00-18:00,10:00-18:00,10:00-18:00,10:00-18:00,12:00-20:00,\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Upload CSV File\n                </label>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"block w-full text-sm text-muted-foreground\n                    file:mr-4 file:py-2 file:px-4\n                    file:rounded-md file:border-0\n                    file:text-sm file:font-semibold\n                    file:bg-primary file:text-primary-foreground\n                    hover:file:bg-primary/90\"\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Or Paste CSV Data\n                </label>\n                <Textarea\n                  placeholder=\"Paste CSV data here...\"\n                  value={csvData}\n                  onChange={(e) => setCsvData(e.target.value)}\n                  rows={10}\n                  className=\"font-mono text-sm\"\n                  data-testid=\"textarea-csv-data\"\n                />\n              </div>\n\n              <Button\n                onClick={handleImport}\n                disabled={importMutation.isPending || !csvData.trim()}\n                className=\"w-full\"\n                data-testid=\"button-import\"\n              >\n                <FileUp className=\"h-4 w-4 mr-2\" />\n                {importMutation.isPending ? \"Importing...\" : \"Import Schedule\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {results && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Import Results</CardTitle>\n              <CardDescription>\n                {results.total} rows processed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {results.results.map((result: any, index: number) => (\n                  <div\n                    key={index}\n                    className={`flex items-start gap-2 p-3 rounded-md ${\n                      result.success ? \"bg-green-500/10\" : \"bg-red-500/10\"\n                    }`}\n                  >\n                    {result.success ? (\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5\" />\n                    ) : (\n                      <AlertCircle className=\"h-5 w-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5\" />\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium\">\n                        {result.success ? \"Success\" : \"Failed\"}\n                      </p>\n                      {!result.success && result.error && (\n                        <p className=\"text-sm text-muted-foreground\">{result.error}</p>\n                      )}\n                      {result.row && (\n                        <p className=\"text-xs text-muted-foreground mt-1 font-mono truncate\">\n                          {JSON.stringify(result.row)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6639},"client/src/pages/admin-export.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileDown, Download } from \"lucide-react\";\n\nexport default function AdminExport() {\n  const { toast } = useToast();\n  const [location, setLocation] = useState<string>(\"all\");\n  const [isExporting, setIsExporting] = useState(false);\n\n  const handleExport = async () => {\n    try {\n      setIsExporting(true);\n      \n      const token = localStorage.getItem(\"auth_token\");\n      const url = location === \"all\" \n        ? \"/api/schedule/export\"\n        : `/api/schedule/export?location=${location}`;\n      \n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Export failed\");\n      }\n\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = downloadUrl;\n      link.download = `schedule-${location}-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n\n      toast({\n        title: \"Export successful\",\n        description: \"Schedule CSV has been downloaded\",\n      });\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Export failed\",\n        description: error.message,\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Export Schedule</h1>\n        <p className=\"text-muted-foreground\">\n          Download hostess weekly schedules as CSV\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileDown className=\"h-5 w-5\" />\n            Export Options\n          </CardTitle>\n          <CardDescription>\n            Select location and download the schedule CSV file\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert>\n            <Download className=\"h-4 w-4\" />\n            <AlertDescription>\n              The exported CSV will include all hostesses and their weekly schedules in the format:\n              <br />\n              <code className=\"text-xs\">id,hostess,monday,tuesday,wednesday,thursday,friday,saturday,sunday</code>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Location Filter\n              </label>\n              <Select value={location} onValueChange={setLocation}>\n                <SelectTrigger data-testid=\"select-location\">\n                  <SelectValue placeholder=\"Select location\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  <SelectItem value=\"DOWNTOWN\">Downtown</SelectItem>\n                  <SelectItem value=\"WEST_END\">West End</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              onClick={handleExport}\n              disabled={isExporting}\n              className=\"w-full\"\n              size=\"lg\"\n              data-testid=\"button-export\"\n            >\n              <FileDown className=\"h-4 w-4 mr-2\" />\n              {isExporting ? \"Exporting...\" : \"Download Schedule CSV\"}\n            </Button>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-muted rounded-md\">\n            <h3 className=\"font-semibold mb-2\">CSV Format Details</h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Each row represents one hostess</li>\n              <li>• Columns: id, hostess name, Monday-Sunday schedules</li>\n              <li>• Time format: HH:mm-HH:mm (24-hour)</li>\n              <li>• One time range per day (e.g., 10:00-18:00)</li>\n              <li>• Empty cells indicate hostess is not scheduled that day</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4625},"client/src/components/client-daily-view.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarIcon } from \"lucide-react\";\nimport type { Hostess, Booking } from \"@shared/schema\";\n\nconst SLOT_DURATION = 15;\nconst START_TIME = 10 * 60; // 10:00 in minutes\nconst END_TIME = 23 * 60; // 23:00 in minutes\n\ninterface ClientDailyViewProps {\n  locationFilter: string;\n}\n\nexport function ClientDailyView({ locationFilter }: ClientDailyViewProps) {\n  const [, setLocation] = useLocation();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [datePickerOpen, setDatePickerOpen] = useState(false);\n\n  const { data: hostesses } = useQuery<Hostess[]>({\n    queryKey: locationFilter === \"all\" \n      ? [\"/api/hostesses\"]\n      : [\"/api/hostesses?location=\" + locationFilter],\n  });\n\n  const dateStr = format(selectedDate, \"yyyy-MM-dd\");\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery<Booking[]>({\n    queryKey: locationFilter === \"all\"\n      ? [`/api/bookings/day?date=${dateStr}`]\n      : [`/api/bookings/day?date=${dateStr}&location=${locationFilter}`],\n  });\n\n  const sortedHostesses = useMemo(() => \n    hostesses?.slice().sort((a, b) => \n      (a.displayName || \"\").localeCompare(b.displayName || \"\")\n    ) || [],\n    [hostesses]\n  );\n\n  const timeSlots = useMemo(() => {\n    const slots: number[] = [];\n    for (let time = START_TIME; time < END_TIME; time += SLOT_DURATION) {\n      slots.push(time);\n    }\n    return slots;\n  }, []);\n\n  const formatTimeRange = (startMin: number, endMin: number): string => {\n    const formatTime = (min: number) => {\n      const hours = Math.floor(min / 60);\n      const minutes = min % 60;\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    };\n    return `${formatTime(startMin)}-${formatTime(endMin)}`;\n  };\n\n  const isSlotBooked = (hostessId: string, slot: number): boolean => {\n    if (!bookings) return false;\n    return bookings.some(\n      (b) =>\n        b.hostessId === hostessId &&\n        b.date === dateStr &&\n        slot >= b.startTime &&\n        slot < b.endTime\n    );\n  };\n\n  const handleSlotClick = (hostessSlug: string, slot: number) => {\n    // Navigate to hostess profile with pre-selected date and time\n    const timeStr = formatTimeRange(slot, slot + SLOT_DURATION).split('-')[0];\n    setLocation(`/hostess/${hostessSlug}?date=${dateStr}&time=${timeStr}`);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Date Picker */}\n      <div className=\"flex items-center gap-4\">\n        <Popover open={datePickerOpen} onOpenChange={setDatePickerOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className=\"w-64 justify-start gap-2\"\n              data-testid=\"button-date-picker\"\n            >\n              <CalendarIcon className=\"h-4 w-4\" />\n              {format(selectedDate, \"EEEE, MMMM d, yyyy\")}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={(date) => {\n                if (date) {\n                  setSelectedDate(date);\n                  setDatePickerOpen(false);\n                }\n              }}\n              disabled={(date) => date < new Date(new Date().setHours(0, 0, 0, 0))}\n              initialFocus\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {/* Calendar Grid */}\n      {sortedHostesses.length === 0 ? (\n        <Card>\n          <div className=\"p-12 text-center text-muted-foreground\">\n            No hostesses available in this location\n          </div>\n        </Card>\n      ) : bookingsLoading ? (\n        <Card>\n          <div className=\"p-12 text-center text-muted-foreground\">\n            Loading availability...\n          </div>\n        </Card>\n      ) : (\n        <div className=\"border rounded-lg overflow-hidden bg-card\">\n          <div className=\"flex overflow-x-auto\">\n            {/* Time Column */}\n            <div className=\"w-20 flex-shrink-0 border-r bg-muted/30 sticky left-0 z-10\">\n              <div className=\"h-16 border-b bg-card\" />\n              {timeSlots.map((slot) => (\n                <div\n                  key={slot}\n                  className=\"h-12 border-b flex items-center justify-center text-xs text-muted-foreground font-mono\"\n                >\n                  {formatTimeRange(slot, slot + SLOT_DURATION)}\n                </div>\n              ))}\n            </div>\n\n            {/* Hostess Columns */}\n            <div className=\"flex-1 overflow-x-auto\">\n              <div className=\"flex min-w-max\">\n                {sortedHostesses.map((hostess) => (\n                  <div \n                    key={hostess.id} \n                    className=\"border-r flex-shrink-0\"\n                    style={{ width: '200px' }}\n                  >\n                    {/* Header */}\n                    <div className=\"h-16 border-b bg-card flex items-center justify-between px-2 sticky top-0 z-10\">\n                      <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage src={hostess.photoUrl || undefined} />\n                          <AvatarFallback className=\"text-xs\">\n                            {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-sm truncate font-medium\">\n                          {hostess.displayName}\n                        </span>\n                      </div>\n                      {hostess.locations && hostess.locations.length > 0 && (\n                        <div className=\"flex gap-0.5\">\n                          {hostess.locations.includes(\"DOWNTOWN\") && (\n                            <Badge variant=\"outline\" className=\"text-xs h-5 px-1\">D</Badge>\n                          )}\n                          {hostess.locations.includes(\"WEST_END\") && (\n                            <Badge variant=\"outline\" className=\"text-xs h-5 px-1\">W</Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Slots */}\n                    {timeSlots.map((slot) => {\n                      const isBooked = isSlotBooked(hostess.id, slot);\n                      \n                      return (\n                        <div\n                          key={slot}\n                          className={`h-12 border-b flex items-center justify-center text-xs cursor-pointer transition-colors\n                            ${isBooked \n                              ? 'bg-primary/20 text-primary-foreground/70 cursor-not-allowed' \n                              : 'hover-elevate active-elevate-2'\n                            }`}\n                          onClick={() => !isBooked && handleSlotClick(hostess.slug, slot)}\n                          data-testid={`slot-${hostess.slug}-${slot}`}\n                        >\n                          {isBooked ? (\n                            <span className=\"font-medium\">Booked</span>\n                          ) : (\n                            <span className=\"text-muted-foreground\">Available</span>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Legend */}\n      <div className=\"flex gap-4 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded bg-card border\" />\n          <span className=\"text-muted-foreground\">Available</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded bg-primary/20\" />\n          <span className=\"text-muted-foreground\">Booked</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8493},"client/src/pages/admin-photo-approvals.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { CheckCircle2, XCircle, ImageIcon, AlertCircle } from \"lucide-react\";\nimport type { PhotoUploadWithDetails } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function AdminPhotoApprovals() {\n  const { toast } = useToast();\n\n  const { data: uploads, isLoading } = useQuery<PhotoUploadWithDetails[]>({\n    queryKey: [\"/api/admin/photo-uploads/pending\"],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"POST\", `/api/admin/photo-uploads/${id}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/photo-uploads/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n      toast({ title: \"Photo approved successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to approve photo\",\n        description: error.message,\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"POST\", `/api/admin/photo-uploads/${id}/reject`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/photo-uploads/pending\"] });\n      toast({ title: \"Photo rejected successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to reject photo\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleApprove = (id: string) => {\n    approveMutation.mutate(id);\n  };\n\n  const handleReject = (id: string) => {\n    rejectMutation.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Photo Approvals</CardTitle>\n            <CardDescription>Loading pending photo uploads...</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ImageIcon className=\"w-5 h-5\" />\n                Photo Approvals\n              </CardTitle>\n              <CardDescription>Review and approve pending hostess photo uploads</CardDescription>\n            </div>\n            {uploads && uploads.length > 0 && (\n              <Badge variant=\"secondary\" data-testid=\"badge-pending-count\">\n                {uploads.length} pending\n              </Badge>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          {!uploads || uploads.length === 0 ? (\n            <Alert data-testid=\"alert-no-uploads\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                No pending photo uploads at this time.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"grid gap-6\">\n              {uploads.map((upload) => (\n                <Card key={upload.id} data-testid={`card-upload-${upload.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex gap-6\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-48 h-48 bg-muted rounded-lg overflow-hidden\">\n                          <img\n                            src={upload.photoUrl}\n                            alt={`Photo for ${upload.hostess.displayName}`}\n                            className=\"w-full h-full object-cover\"\n                            data-testid={`img-preview-${upload.id}`}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 flex flex-col justify-between\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-1\" data-testid={`text-hostess-${upload.id}`}>\n                            {upload.hostess.displayName}\n                          </h3>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            {upload.hostess.locations && upload.hostess.locations.length > 0 && (\n                              <p data-testid={`text-location-${upload.id}`}>\n                                Location: <span className=\"text-foreground\">\n                                  {upload.hostess.locations.map((loc, idx) => (\n                                    <span key={idx}>\n                                      {loc === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                                      {idx < upload.hostess.locations.length - 1 && \", \"}\n                                    </span>\n                                  ))}\n                                </span>\n                              </p>\n                            )}\n                            <p data-testid={`text-uploaded-${upload.id}`}>\n                              Uploaded: <span className=\"text-foreground\">\n                                {formatDistanceToNow(new Date(upload.uploadedAt), { addSuffix: true })}\n                              </span>\n                            </p>\n                            <div>\n                              Status: <Badge variant=\"secondary\" data-testid={`badge-status-${upload.id}`}>\n                                {upload.status}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2 mt-4\">\n                          <Button\n                            onClick={() => handleApprove(upload.id)}\n                            disabled={approveMutation.isPending || rejectMutation.isPending}\n                            variant=\"default\"\n                            data-testid={`button-approve-${upload.id}`}\n                          >\n                            <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                            Approve\n                          </Button>\n                          <Button\n                            onClick={() => handleReject(upload.id)}\n                            disabled={approveMutation.isPending || rejectMutation.isPending}\n                            variant=\"destructive\"\n                            data-testid={`button-reject-${upload.id}`}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-2\" />\n                            Reject\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7268},"client/src/pages/reception-weekly.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format, addDays, startOfWeek, endOfWeek } from \"date-fns\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon, ZoomIn, ZoomOut, LayoutGrid } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { QuickBookingForm } from \"@/components/quick-booking-form\";\nimport { generateTimeSlots, formatTimeRange, GRID_START_TIME, GRID_END_TIME, SLOT_DURATION } from \"@/lib/time-utils\";\nimport type { Hostess, BookingWithDetails } from \"@shared/schema\";\n\ntype ZoomLevel = \"compact\" | \"normal\" | \"comfortable\";\n\nexport default function ReceptionWeekly() {\n  const [, setLocation] = useLocation();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [quickBookingOpen, setQuickBookingOpen] = useState(false);\n  const [editBookingOpen, setEditBookingOpen] = useState(false);\n  const [zoomLevel, setZoomLevel] = useState<ZoomLevel>(\"compact\");\n  const [selectedSlot, setSelectedSlot] = useState<{\n    hostessId: string;\n    date: string;\n    startTime: number;\n  } | null>(null);\n  const [selectedBooking, setSelectedBooking] = useState<BookingWithDetails | null>(null);\n\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 1 }); // Monday\n  const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 1 });\n\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  const { data: hostesses } = useQuery<Hostess[]>({\n    queryKey: locationFilter === \"all\"\n      ? [\"/api/hostesses\"]\n      : [\"/api/hostesses?location=\" + locationFilter],\n  });\n\n  // Fetch bookings for the entire week\n  const startDateStr = format(weekStart, \"yyyy-MM-dd\");\n  const endDateStr = format(weekEnd, \"yyyy-MM-dd\");\n\n  const { data: bookings } = useQuery<BookingWithDetails[]>({\n    queryKey: ['/api/bookings/range', startDateStr, endDateStr, locationFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        startDate: startDateStr,\n        endDate: endDateStr,\n      });\n      if (locationFilter !== \"all\") {\n        params.append(\"location\", locationFilter);\n      }\n      \n      const token = localStorage.getItem(\"auth_token\");\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch(`/api/bookings/range?${params}`, {\n        headers,\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch bookings\");\n      return response.json();\n    },\n  });\n\n  const sortedHostesses = hostesses?.slice().sort((a, b) =>\n    (a.displayName || \"\").localeCompare(b.displayName || \"\")\n  ) || [];\n\n  const timeSlots = generateTimeSlots(GRID_START_TIME, GRID_END_TIME, SLOT_DURATION);\n\n  // Zoom level configurations\n  const zoomConfig = {\n    compact: {\n      rowHeight: \"h-4\",\n      headerHeight: \"h-10\",\n      cellWidth: \"w-16\",\n      avatarSize: \"h-5 w-5\",\n      textSize: \"text-xs\",\n      badgeHeight: \"h-4\",\n    },\n    normal: {\n      rowHeight: \"h-6\",\n      headerHeight: \"h-12\",\n      cellWidth: \"w-20\",\n      avatarSize: \"h-6 w-6\",\n      textSize: \"text-xs\",\n      badgeHeight: \"h-5\",\n    },\n    comfortable: {\n      rowHeight: \"h-8\",\n      headerHeight: \"h-14\",\n      cellWidth: \"w-24\",\n      avatarSize: \"h-7 w-7\",\n      textSize: \"text-sm\",\n      badgeHeight: \"h-6\",\n    },\n  };\n\n  const currentZoom = zoomConfig[zoomLevel];\n\n  const getBookingAtSlot = (hostessId: string, date: string, startTime: number) => {\n    return bookings?.find(\n      (b) => b.hostessId === hostessId && b.date === date && b.startTime <= startTime && b.endTime > startTime\n    );\n  };\n\n  const { toast } = useToast();\n\n  const cancelBookingMutation = useMutation({\n    mutationFn: async (bookingId: string) => {\n      const response = await apiRequest(\"POST\", `/api/bookings/${bookingId}/cancel`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === 'string' && key.startsWith('/api/bookings');\n        }\n      });\n      toast({ title: \"Booking canceled successfully\" });\n      setEditBookingOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to cancel booking\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleCellClick = (hostessId: string, date: string, startTime: number) => {\n    const booking = getBookingAtSlot(hostessId, date, startTime);\n    if (!booking) {\n      setSelectedSlot({ hostessId, date, startTime });\n      setQuickBookingOpen(true);\n    } else {\n      setSelectedBooking(booking);\n      setEditBookingOpen(true);\n    }\n  };\n\n  const goToPreviousWeek = () => {\n    setSelectedDate(addDays(selectedDate, -7));\n  };\n\n  const goToNextWeek = () => {\n    setSelectedDate(addDays(selectedDate, 7));\n  };\n\n  const goToToday = () => {\n    setSelectedDate(new Date());\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <div className=\"border-b p-4 flex items-center justify-between bg-card\">\n        <div className=\"flex items-center gap-4\">\n          <h1 className=\"text-section-title font-semibold\">Weekly Calendar</h1>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={goToPreviousWeek}\n              data-testid=\"button-prev-week\"\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={goToToday}\n              data-testid=\"button-today\"\n            >\n              Today\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={goToNextWeek}\n              data-testid=\"button-next-week\"\n            >\n              <ChevronRight className=\"h-5 w-5\" />\n            </Button>\n            <span className=\"text-sm font-medium text-muted-foreground ml-2\">\n              {format(weekStart, \"MMM d\")} - {format(weekEnd, \"MMM d, yyyy\")}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          {/* Daily View Button */}\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin/calendar\")}\n            className=\"gap-2\"\n            data-testid=\"button-daily-view\"\n          >\n            <LayoutGrid className=\"h-4 w-4\" />\n            Daily View\n          </Button>\n\n          {/* Location Filter */}\n          <Select value={locationFilter} onValueChange={setLocationFilter}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-location-filter\">\n              <SelectValue placeholder=\"All Locations\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Locations</SelectItem>\n              <SelectItem value=\"DOWNTOWN\">Downtown</SelectItem>\n              <SelectItem value=\"WEST_END\">West End</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Zoom Controls */}\n          <div className=\"flex items-center gap-1 border rounded-md\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setZoomLevel(\"compact\")}\n              className={zoomLevel === \"compact\" ? \"bg-muted\" : \"\"}\n              data-testid=\"button-zoom-compact\"\n            >\n              <ZoomOut className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setZoomLevel(\"normal\")}\n              className={zoomLevel === \"normal\" ? \"bg-muted\" : \"\"}\n              data-testid=\"button-zoom-normal\"\n            >\n              <CalendarIcon className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setZoomLevel(\"comfortable\")}\n              className={zoomLevel === \"comfortable\" ? \"bg-muted\" : \"\"}\n              data-testid=\"button-zoom-comfortable\"\n            >\n              <ZoomIn className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"flex min-w-max\">\n          {/* Hostess/Time Column */}\n          <div className=\"sticky left-0 z-20 bg-muted/30 border-r\">\n            {/* Top-left corner header */}\n            <div className={`${currentZoom.headerHeight} border-b bg-card flex items-center px-2`}>\n              <span className={`${currentZoom.textSize} font-medium text-muted-foreground`}>\n                Hostess / Time\n              </span>\n            </div>\n\n            {/* Hostess rows */}\n            {sortedHostesses.map((hostess) => (\n              <div\n                key={hostess.id}\n                className=\"border-b\"\n              >\n                {timeSlots.map((slot) => (\n                  <div\n                    key={slot}\n                    className={`${currentZoom.rowHeight} border-b flex items-center px-2 bg-card`}\n                  >\n                    {slot === GRID_START_TIME && (\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className={currentZoom.avatarSize}>\n                          <AvatarImage src={hostess.photoUrl || undefined} />\n                          <AvatarFallback className=\"text-xs\">\n                            {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className={`${currentZoom.textSize} truncate max-w-[120px]`}>\n                          {hostess.displayName}\n                        </span>\n                        {hostess.locations && hostess.locations.length > 0 && (\n                          <div className=\"flex gap-0.5\">\n                            {hostess.locations.includes(\"DOWNTOWN\") && (\n                              <Badge variant=\"outline\" className={`${currentZoom.badgeHeight} px-1`}>D</Badge>\n                            )}\n                            {hostess.locations.includes(\"WEST_END\") && (\n                              <Badge variant=\"outline\" className={`${currentZoom.badgeHeight} px-1`}>W</Badge>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n\n          {/* Day columns */}\n          {weekDays.map((day) => {\n            const dayStr = format(day, \"yyyy-MM-dd\");\n            const isToday = format(new Date(), \"yyyy-MM-dd\") === dayStr;\n\n            return (\n              <div key={dayStr} className=\"border-r\">\n                {/* Day header */}\n                <div className={`${currentZoom.headerHeight} border-b bg-card flex flex-col items-center justify-center ${isToday ? 'bg-primary/10' : ''}`}>\n                  <span className={`${currentZoom.textSize} font-medium`}>\n                    {format(day, \"EEE\")}\n                  </span>\n                  <span className={`${currentZoom.textSize} ${isToday ? 'text-primary font-bold' : 'text-muted-foreground'}`}>\n                    {format(day, \"MMM d\")}\n                  </span>\n                </div>\n\n                {/* Hostess rows for this day */}\n                {sortedHostesses.map((hostess) => (\n                  <div key={hostess.id} className=\"border-b\">\n                    {timeSlots.map((slot) => {\n                      const booking = getBookingAtSlot(hostess.id, dayStr, slot);\n                      const isAvailable = !booking;\n\n                      let bgColor = \"bg-card\";\n                      if (booking) {\n                        if (booking.status === \"CANCELED\") {\n                          bgColor = \"bg-destructive/20\";\n                        } else if (booking.notes) {\n                          bgColor = \"bg-blue-500/30\";\n                        } else {\n                          bgColor = \"bg-primary/20\";\n                        }\n                      }\n\n                      return (\n                        <div\n                          key={slot}\n                          className={`${currentZoom.rowHeight} ${currentZoom.cellWidth} border-b cursor-pointer hover-elevate active-elevate-2 ${bgColor}`}\n                          onClick={() => handleCellClick(hostess.id, dayStr, slot)}\n                          data-testid={`slot-${hostess.id}-${dayStr}-${slot}`}\n                        />\n                      );\n                    })}\n                  </div>\n                ))}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Legend */}\n      <div className=\"border-t p-3 bg-card\">\n        <div className=\"flex items-center gap-6 text-xs\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded bg-card border\" />\n            <span className=\"text-muted-foreground\">Available</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded bg-primary/20\" />\n            <span className=\"text-muted-foreground\">Booked</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded bg-blue-500/30\" />\n            <span className=\"text-muted-foreground\">With Notes</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 rounded bg-destructive/20\" />\n            <span className=\"text-muted-foreground\">Cancelled</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Booking Modal */}\n      <Dialog open={quickBookingOpen} onOpenChange={setQuickBookingOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Quick Booking</DialogTitle>\n          </DialogHeader>\n          {selectedSlot && (\n            <QuickBookingForm\n              hostessId={selectedSlot.hostessId}\n              date={selectedSlot.date}\n              startTime={selectedSlot.startTime}\n              onSuccess={() => setQuickBookingOpen(false)}\n              onCancel={() => setQuickBookingOpen(false)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Booking Modal */}\n      <Dialog open={editBookingOpen} onOpenChange={setEditBookingOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Booking Details</DialogTitle>\n            <DialogDescription>View and manage this booking</DialogDescription>\n          </DialogHeader>\n          {selectedBooking && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Client</div>\n                  <div className=\"font-medium\">{selectedBooking.client.email}</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Hostess</div>\n                  <div className=\"font-medium\">{selectedBooking.hostess.displayName}</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Date</div>\n                  <div className=\"font-medium\">{format(new Date(selectedBooking.date), \"MMM d, yyyy\")}</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Time</div>\n                  <div className=\"font-medium\">\n                    {formatTimeRange(selectedBooking.startTime, selectedBooking.endTime)}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Service</div>\n                  <div className=\"font-medium\">{selectedBooking.service.name}</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Status</div>\n                  <Badge variant={selectedBooking.status === \"CANCELED\" ? \"destructive\" : \"default\"}>\n                    {selectedBooking.status}\n                  </Badge>\n                </div>\n              </div>\n\n              {selectedBooking.notes && (\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground\">Notes</div>\n                  <div className=\"p-3 bg-muted rounded-md text-sm\">{selectedBooking.notes}</div>\n                </div>\n              )}\n\n              {selectedBooking.status !== \"CANCELED\" && (\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setEditBookingOpen(false)}\n                  >\n                    Close\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => cancelBookingMutation.mutate(selectedBooking.id)}\n                    disabled={cancelBookingMutation.isPending}\n                    data-testid=\"button-cancel-booking\"\n                  >\n                    Cancel Booking\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18336},"client/src/pages/change-password.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Footer } from \"@/components/footer\";\nimport { Lock } from \"lucide-react\";\n\nconst changePasswordSchema = z.object({\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordFormData = z.infer<typeof changePasswordSchema>;\n\nexport default function ChangePassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<ChangePasswordFormData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ChangePasswordFormData) => {\n    try {\n      setIsSubmitting(true);\n      \n      await apiRequest(\"POST\", \"/api/auth/change-password\", {\n        newPassword: data.newPassword,\n      });\n\n      toast({\n        title: \"Password changed successfully\",\n        description: \"Your password has been updated\",\n      });\n\n      // Refresh auth data to clear forcePasswordReset flag\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/auth/me\"] });\n\n      // Redirect to home or dashboard\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to change password\",\n        description: error.message || \"An error occurred\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <div className=\"flex items-center justify-center w-12 h-12 rounded-full bg-primary/10 mx-auto mb-4\">\n            <Lock className=\"h-6 w-6 text-primary\" />\n          </div>\n          <CardTitle className=\"text-center\">Change Your Password</CardTitle>\n          <CardDescription className=\"text-center\">\n            For security reasons, you need to set a new password before continuing\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your new password\"\n                        data-testid=\"input-new-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirm your new password\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n                data-testid=\"button-submit-password\"\n              >\n                {isSubmitting ? \"Changing Password...\" : \"Change Password\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4765},"client/src/components/footer.tsx":{"content":"export function Footer() {\n  return (\n    <footer className=\"border-t bg-card py-4 px-6 text-center text-sm text-muted-foreground\" data-testid=\"footer\">\n      <p>\n        © 2025 Club Alpha — Booking system by{\" \"}\n        <a\n          href=\"https://ottawaseo.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"text-primary hover:underline\"\n          data-testid=\"link-ottawa-seo\"\n        >\n          Ottawa SEO\n        </a>\n      </p>\n    </footer>\n  );\n}\n","size_bytes":496},"server/cleanup.ts":{"content":"import { db } from \"./db\";\nimport { bookings, users } from \"@shared/schema\";\nimport { eq, and, lt, inArray, sql } from \"drizzle-orm\";\nimport { subWeeks, format } from \"date-fns\";\n\n/**\n * Deletes client booking history older than 2 weeks\n * This runs automatically to maintain privacy and keep the database clean\n */\nexport async function cleanupOldClientBookings() {\n  try {\n    const twoWeeksAgo = subWeeks(new Date(), 2);\n    const cutoffDate = format(twoWeeksAgo, \"yyyy-MM-dd\");\n    \n    console.log(`🧹 Running booking cleanup for records before ${cutoffDate}...`);\n    \n    // Get all CLIENT user IDs\n    const clientUsers = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.role, \"CLIENT\"));\n    \n    const clientIds = clientUsers.map(u => u.id);\n    \n    if (clientIds.length === 0) {\n      console.log(\"   ✓ No client users found, skipping cleanup\");\n      return 0;\n    }\n    \n    // Delete bookings older than 2 weeks for CLIENT users only\n    const result = await db\n      .delete(bookings)\n      .where(\n        and(\n          lt(bookings.date, cutoffDate),\n          inArray(bookings.clientId, clientIds)\n        )\n      )\n      .returning({ id: bookings.id });\n    \n    const deletedCount = result.length;\n    \n    if (deletedCount > 0) {\n      console.log(`   ✓ Deleted ${deletedCount} old client booking(s)`);\n    } else {\n      console.log(`   ✓ No old client bookings to delete`);\n    }\n    \n    return deletedCount;\n  } catch (error) {\n    console.error(\"❌ Error during booking cleanup:\", error);\n    throw error;\n  }\n}\n\n/**\n * Schedule cleanup to run periodically\n * Runs every 24 hours\n */\nexport function scheduleBookingCleanup() {\n  // Run immediately on startup\n  cleanupOldClientBookings().catch(console.error);\n  \n  // Schedule to run every 24 hours\n  const TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000;\n  setInterval(() => {\n    cleanupOldClientBookings().catch(console.error);\n  }, TWENTY_FOUR_HOURS);\n  \n  console.log(\"📅 Scheduled automatic booking cleanup (runs every 24 hours)\");\n}\n","size_bytes":2053},"client/src/pages/admin-clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Search, Key, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nconst CLIENTS_PER_PAGE = 100;\n\nexport default function AdminClients() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [resetPasswordUser, setResetPasswordUser] = useState<User | null>(null);\n  const [newPassword, setNewPassword] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Filter for only CLIENT role users\n  const clients = users?.filter(user => user.role === \"CLIENT\") || [];\n\n  // Filter clients based on search term\n  const filteredClients = clients.filter(client => {\n    const search = searchTerm.toLowerCase();\n    return (\n      client.username.toLowerCase().includes(search) ||\n      client.email.toLowerCase().includes(search)\n    );\n  });\n\n  // Sort by username\n  const sortedClients = filteredClients.slice().sort((a, b) => \n    a.username.localeCompare(b.username)\n  );\n\n  // Reset to page 1 when search term changes\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n    setCurrentPage(1);\n  };\n\n  // Pagination calculations\n  const totalPages = Math.ceil(sortedClients.length / CLIENTS_PER_PAGE);\n  const startIndex = (currentPage - 1) * CLIENTS_PER_PAGE;\n  const endIndex = startIndex + CLIENTS_PER_PAGE;\n  const paginatedClients = sortedClients.slice(startIndex, endIndex);\n\n  const handlePreviousPage = () => {\n    setCurrentPage(prev => Math.max(1, prev - 1));\n  };\n\n  const handleNextPage = () => {\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\n  };\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ id, password }: { id: string; password: string }) => {\n      return apiRequest(\"POST\", `/api/admin/users/${id}/reset-password`, { password });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setResetPasswordUser(null);\n      setNewPassword(\"\");\n      toast({\n        title: \"Password reset successfully\",\n        description: \"The client can now use their new password\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to reset password\",\n        description: error.message || \"An error occurred\",\n      });\n    },\n  });\n\n  const handleResetPassword = () => {\n    if (!resetPasswordUser || !newPassword) return;\n    \n    if (newPassword.length < 8) {\n      toast({\n        variant: \"destructive\",\n        title: \"Invalid password\",\n        description: \"Password must be at least 8 characters\",\n      });\n      return;\n    }\n\n    resetPasswordMutation.mutate({\n      id: resetPasswordUser.id,\n      password: newPassword,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-section-title font-semibold\">Clients</h1>\n          <p className=\"text-muted-foreground\">View and search all client accounts</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Clients ({sortedClients.length})</CardTitle>\n            <div className=\"relative mt-4\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search by username or email...\"\n                value={searchTerm}\n                onChange={(e) => handleSearchChange(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-clients\"\n              />\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : sortedClients.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchTerm ? \"No clients found matching your search\" : \"No clients found\"}\n              </div>\n            ) : (\n              <>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Username</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Force Reset</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedClients.map((client) => (\n                      <TableRow key={client.id} data-testid={`client-${client.id}`}>\n                        <TableCell className=\"font-medium\">{client.username}</TableCell>\n                        <TableCell>{client.email}</TableCell>\n                        <TableCell>\n                          {client.banned ? (\n                            <Badge variant=\"destructive\" data-testid={`status-banned-${client.id}`}>\n                              Banned\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`status-active-${client.id}`}>\n                              Active\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {client.forcePasswordReset ? (\n                            <Badge variant=\"destructive\">Yes</Badge>\n                          ) : (\n                            <Badge variant=\"outline\">No</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setResetPasswordUser(client);\n                              setNewPassword(\"\");\n                            }}\n                            className=\"gap-1\"\n                            data-testid={`button-reset-password-${client.id}`}\n                          >\n                            <Key className=\"h-3 w-3\" />\n                            Reset Password\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                \n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between pt-4 border-t mt-4\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Showing {startIndex + 1}-{Math.min(endIndex, sortedClients.length)} of {sortedClients.length} clients\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handlePreviousPage}\n                        disabled={currentPage === 1}\n                        data-testid=\"button-previous-page\"\n                      >\n                        <ChevronLeft className=\"h-4 w-4\" />\n                        Previous\n                      </Button>\n                      <span className=\"text-sm text-muted-foreground\">\n                        Page {currentPage} of {totalPages}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleNextPage}\n                        disabled={currentPage === totalPages}\n                        data-testid=\"button-next-page\"\n                      >\n                        Next\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Reset Password Dialog */}\n        <Dialog open={!!resetPasswordUser} onOpenChange={(open) => !open && (setResetPasswordUser(null), setNewPassword(\"\"))}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Reset Password</DialogTitle>\n              <DialogDescription>\n                Set a new password for {resetPasswordUser?.email}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">New Password</label>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Enter new password (min 8 characters)\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  onKeyDown={(e) => e.key === \"Enter\" && handleResetPassword()}\n                  data-testid=\"input-new-password\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => (setResetPasswordUser(null), setNewPassword(\"\"))}\n                data-testid=\"button-cancel-reset\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleResetPassword}\n                disabled={resetPasswordMutation.isPending || newPassword.length < 8}\n                data-testid=\"button-confirm-reset-password\"\n              >\n                {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10559},"scripts/setup-hostess-accounts.ts":{"content":"import { db } from \"../server/db\";\nimport { users, hostesses } from \"@shared/schema\";\nimport { eq, isNull } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n/**\n * Creates STAFF user accounts for all hostesses who don't have one yet\n * Username: First name only (e.g., \"Amelia\")\n * Initial password: Same as username (e.g., \"Amelia\")\n * Requires password reset on first login\n */\nasync function setupHostessAccounts() {\n  console.log(\"🔍 Finding hostesses without user accounts...\\n\");\n\n  // Find all hostesses without linked user accounts\n  const hostessesWithoutAccounts = await db\n    .select()\n    .from(hostesses)\n    .where(isNull(hostesses.userId));\n\n  console.log(`Found ${hostessesWithoutAccounts.length} hostesses without accounts:\\n`);\n\n  for (const hostess of hostessesWithoutAccounts) {\n    // Extract first name from display name (e.g., \"Amelia\" from \"Amelia\")\n    const firstName = hostess.displayName.split(' ')[0];\n    const username = firstName; // Use first name as-is, preserving capitalization\n    const email = `${username.toLowerCase()}@clubalpha.ca`;\n    \n    // Hash the username as the initial password\n    const passwordHash = await bcrypt.hash(firstName, 10);\n\n    try {\n      console.log(`Creating account for ${hostess.displayName}:`);\n      console.log(`  Username: ${username}`);\n      console.log(`  Email: ${email}`);\n      console.log(`  Initial password: ${firstName} (must be changed on first login)`);\n\n      // Create the user account\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          username,\n          email,\n          passwordHash,\n          role: 'STAFF',\n          forcePasswordReset: true, // Require password change on first login\n        })\n        .returning();\n\n      // Link the user to the hostess\n      await db\n        .update(hostesses)\n        .set({ userId: newUser.id })\n        .where(eq(hostesses.id, hostess.id));\n\n      console.log(`  ✅ Account created successfully\\n`);\n    } catch (error: any) {\n      if (error.code === '23505') { // Unique constraint violation\n        console.log(`  ⚠️  Username \"${username}\" already exists, skipping...\\n`);\n      } else {\n        console.error(`  ❌ Error creating account:`, error.message, '\\n');\n      }\n    }\n  }\n\n  console.log(\"✅ Setup complete!\");\n  console.log(\"\\n📋 Summary:\");\n  console.log(\"All hostesses can now log in with:\");\n  console.log(\"  Username: Their first name (e.g., 'Amelia')\");\n  console.log(\"  Initial Password: Same as their first name\");\n  console.log(\"  They will be required to set a new password on first login\\n\");\n\n  process.exit(0);\n}\n\nsetupHostessAccounts().catch((error) => {\n  console.error(\"Fatal error:\", error);\n  process.exit(1);\n});\n","size_bytes":2725},"client/src/pages/admin-hostess-import.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileUp, AlertCircle, CheckCircle2, Download } from \"lucide-react\";\n\nexport default function AdminHostessImport() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [csvData, setCsvData] = useState(\"\");\n  const [results, setResults] = useState<any>(null);\n\n  const importMutation = useMutation({\n    mutationFn: async (data: string) => {\n      const response = await apiRequest(\"POST\", \"/api/hostesses/import\", { csvData: data });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setResults(data);\n      const successCount = data.results.filter((r: any) => r.success).length;\n      const failCount = data.results.filter((r: any) => !r.success).length;\n      \n      toast({\n        title: \"Import completed\",\n        description: `${successCount} succeeded, ${failCount} failed`,\n      });\n\n      // Invalidate hostesses cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/hostesses\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Import failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleImport = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please paste CSV data to import\",\n      });\n      return;\n    }\n    setResults(null);\n    importMutation.mutate(csvData);\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const downloadTemplate = () => {\n    const template = `display_name,bio,specialties,location,active\nSophia Martinez,Skilled in deep tissue and relaxation,\"Swedish,Deep Tissue,Hot Stone\",DOWNTOWN,true\nIsabella Chen,Specializes in holistic wellness,\"Thai Massage,Shiatsu,Energy Work\",DOWNTOWN,true\nOlivia Thompson,Expert in therapeutic massage,\"Sports Massage,Trigger Point,Myofascial\",WEST_END,true`;\n    \n    const blob = new Blob([template], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'hostess-import-template.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Import Hostesses</h1>\n        <p className=\"text-muted-foreground\">\n          Upload or paste CSV data to bulk create or update hostess profiles\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>CSV Format</CardTitle>\n            <CardDescription>\n              Upload a CSV file or paste CSV data with the following format\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Expected format:</strong> display_name,bio,specialties,location,active\n                <br />\n                <strong>Required fields:</strong> display_name, location\n                <br />\n                <strong>Location values:</strong> DOWNTOWN or WEST_END\n                <br />\n                <strong>Specialties:</strong> Comma-separated list in quotes (e.g., \"Swedish,Deep Tissue,Hot Stone\")\n                <br />\n                <strong>Active:</strong> true or false (default: true)\n                <br />\n                <strong>Note:</strong> If a hostess with the same name and location exists, their profile will be updated\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={downloadTemplate}\n                  className=\"gap-2\"\n                  data-testid=\"button-download-template\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Download Template\n                </Button>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Upload CSV File\n                </label>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"block w-full text-sm text-muted-foreground\n                    file:mr-4 file:py-2 file:px-4\n                    file:rounded-md file:border-0\n                    file:text-sm file:font-semibold\n                    file:bg-primary file:text-primary-foreground\n                    hover:file:bg-primary/90\"\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Or Paste CSV Data\n                </label>\n                <Textarea\n                  placeholder=\"Paste CSV data here...\"\n                  value={csvData}\n                  onChange={(e) => setCsvData(e.target.value)}\n                  rows={10}\n                  className=\"font-mono text-sm\"\n                  data-testid=\"textarea-csv-data\"\n                />\n              </div>\n\n              <Button\n                onClick={handleImport}\n                disabled={importMutation.isPending || !csvData.trim()}\n                className=\"w-full\"\n                data-testid=\"button-import\"\n              >\n                <FileUp className=\"h-4 w-4 mr-2\" />\n                {importMutation.isPending ? \"Importing...\" : \"Import Hostesses\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {results && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Import Results</CardTitle>\n              <CardDescription>\n                {results.total} rows processed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {results.results.map((result: any, index: number) => (\n                  <div\n                    key={index}\n                    className={`flex items-start gap-2 p-3 rounded-md ${\n                      result.success ? \"bg-green-500/10\" : \"bg-red-500/10\"\n                    }`}\n                  >\n                    {result.success ? (\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 dark:text-green-400 flex-shrink-0 mt-0.5\" />\n                    ) : (\n                      <AlertCircle className=\"h-5 w-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5\" />\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium\">\n                        {result.success ? (\n                          <>\n                            {result.action === 'created' ? 'Created' : 'Updated'}: {result.hostess}\n                          </>\n                        ) : (\n                          'Failed'\n                        )}\n                      </p>\n                      {!result.success && result.error && (\n                        <p className=\"text-sm text-muted-foreground\">{result.error}</p>\n                      )}\n                      {result.row && (\n                        <p className=\"text-xs text-muted-foreground mt-1 font-mono truncate\">\n                          {JSON.stringify(result.row)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8453},"client/src/pages/admin-client-import.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileUp, AlertCircle, CheckCircle2, Download, Info } from \"lucide-react\";\n\nexport default function AdminClientImport() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [csvData, setCsvData] = useState(\"\");\n  const [results, setResults] = useState<any>(null);\n  const [isImporting, setIsImporting] = useState(false);\n  const [progress, setProgress] = useState({ current: 0, total: 0, currentEmail: \"\" });\n\n  const startImport = async (data: string) => {\n    setIsImporting(true);\n    setResults(null);\n    setProgress({ current: 0, total: 0, currentEmail: \"\" });\n\n    try {\n      const token = localStorage.getItem(\"auth_token\");\n      const response = await fetch(\"/api/clients/bulk-import-stream\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(token && { \"Authorization\": `Bearer ${token}` }),\n        },\n        body: JSON.stringify({ csvData: data }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to start import: ${response.statusText}`);\n      }\n\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n\n      if (!reader) {\n        throw new Error(\"Failed to read response stream\");\n      }\n\n      let buffer = \"\";\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split(\"\\n\");\n        buffer = lines.pop() || \"\";\n\n        for (const line of lines) {\n          if (line.trim()) {\n            const data = JSON.parse(line);\n            \n            if (data.type === \"total\") {\n              setProgress(prev => ({ ...prev, total: data.count }));\n            } else if (data.type === \"progress\") {\n              setProgress(prev => ({\n                current: data.index,\n                total: prev.total,\n                currentEmail: data.email\n              }));\n            } else if (data.type === \"complete\") {\n              setResults(data);\n              toast({\n                title: \"Import completed\",\n                description: `${data.imported} clients imported, ${data.failed} failed`,\n              });\n              queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n            } else if (data.type === \"error\") {\n              throw new Error(data.message);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Import failed\",\n        description: error.message,\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const handleImport = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please paste CSV data to import\",\n      });\n      return;\n    }\n    \n    const lineCount = csvData.trim().split('\\n').length - 1; // Subtract header\n    if (lineCount > 20000) {\n      toast({\n        variant: \"destructive\",\n        title: \"Too many records\",\n        description: \"Please limit imports to 20,000 records at a time\",\n      });\n      return;\n    }\n    \n    startImport(csvData);\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n        \n        const lineCount = text.trim().split('\\n').length - 1;\n        toast({\n          title: \"File loaded\",\n          description: `${lineCount.toLocaleString()} clients ready to import`,\n        });\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const downloadTemplate = () => {\n    const template = `email\njohn.doe@example.com\njane.smith@clubalpha.ca\nmichael.johnson@gmail.com\nsarah.williams@yahoo.com\ndavid.brown@outlook.com\nemma.davis@hotmail.com\njames.wilson@example.org\nolivia.martinez@example.net\nrobert.anderson@example.co\nsophia.taylor@example.io`;\n    \n    const blob = new Blob([template], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'client-import-template.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const downloadFailedRows = () => {\n    if (!results || !results.results) return;\n    \n    const failedRows = results.results.filter((r: any) => !r.success);\n    const csvContent = 'email,error\\n' + \n      failedRows.map((r: any) => `${r.email || r.row?.email || 'unknown'},\"${r.error}\"`).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'failed-imports.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Import Clients</h1>\n        <p className=\"text-muted-foreground\">\n          Bulk upload client email addresses - optimized for large datasets (up to 20,000 records)\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>How to Import Clients</CardTitle>\n            <CardDescription>\n              Follow these steps to successfully import your client list\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold text-sm mb-2\">Step 1: Prepare Your CSV File</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your CSV file should have just one column with the header \"email\". Download the template below to get started.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-sm mb-2\">Step 2: Upload or Paste</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Either upload your CSV file using the file picker below, or paste the CSV data directly into the text area.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-sm mb-2\">Step 3: Review Count & Import</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  The system will show you how many clients are ready to import. Click \"Import Clients\" to start the process.\n                </p>\n              </div>\n            </div>\n\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>What Happens During Import:</strong>\n                <br />\n                • <strong>Usernames:</strong> Automatically extracted from emails (part before @)\n                <br />\n                • <strong>Example:</strong> john.smith@example.com → username: \"john.smith\"\n                <br />\n                • <strong>Default Password:</strong> Set to their username (e.g., john.smith logs in with \"john.smith\" as password)\n                <br />\n                • <strong>Password Change Required:</strong> All imported clients must change their password on first login\n                <br />\n                • <strong>Duplicates:</strong> Existing emails are automatically skipped (no duplicates created)\n              </AlertDescription>\n            </Alert>\n\n            <Alert className=\"border-green-500/50 bg-green-500/10\">\n              <CheckCircle2 className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n              <AlertDescription className=\"text-green-800 dark:text-green-200\">\n                <strong>Performance & Capacity:</strong>\n                <br />\n                • <strong>Speed:</strong> ~1,000 clients per minute (~2-3 min for 14,000 clients)\n                <br />\n                • <strong>Batch Processing:</strong> Clients processed in groups of 100 for optimal performance\n                <br />\n                • <strong>Maximum:</strong> Up to 20,000 clients per import\n                <br />\n                • <strong>After Import:</strong> Clients appear immediately in the clients list (cache auto-refreshes)\n              </AlertDescription>\n            </Alert>\n\n            <Alert className=\"border-amber-500/50 bg-amber-500/10\">\n              <AlertCircle className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n              <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n                <strong>Important for Large Imports (14,000+ clients):</strong>\n                <br />\n                • Keep this browser tab open during the entire import\n                <br />\n                • Don't navigate away or refresh the page until complete\n                <br />\n                • Wait for the \"Import completed\" message before proceeding\n                <br />\n                • If any clients fail, you can download the failed rows and try again\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={downloadTemplate}\n                className=\"gap-2\"\n                data-testid=\"button-download-template\"\n              >\n                <Download className=\"h-4 w-4\" />\n                Download Template\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Client List</CardTitle>\n            <CardDescription>\n              Upload CSV file or paste email list below\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Upload CSV File\n              </label>\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileUpload}\n                disabled={isImporting}\n                className=\"block w-full text-sm text-muted-foreground\n                  file:mr-4 file:py-2 file:px-4\n                  file:rounded-md file:border-0\n                  file:text-sm file:font-semibold\n                  file:bg-primary file:text-primary-foreground\n                  hover:file:bg-primary/90\n                  disabled:opacity-50 disabled:cursor-not-allowed\"\n                data-testid=\"input-file-upload\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Or Paste CSV Data\n              </label>\n              <Textarea\n                placeholder=\"email&#10;client1@example.com&#10;client2@example.com&#10;...\"\n                value={csvData}\n                onChange={(e) => setCsvData(e.target.value)}\n                disabled={isImporting}\n                rows={10}\n                className=\"font-mono text-sm\"\n                data-testid=\"textarea-csv-data\"\n              />\n              {csvData && (\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  {(csvData.trim().split('\\n').length - 1).toLocaleString()} clients ready to import\n                </p>\n              )}\n            </div>\n\n            <Button\n              onClick={handleImport}\n              disabled={isImporting || !csvData.trim()}\n              className=\"w-full\"\n              size=\"lg\"\n              data-testid=\"button-import\"\n            >\n              <FileUp className=\"h-4 w-4 mr-2\" />\n              {isImporting ? \"Importing...\" : \"Import Clients\"}\n            </Button>\n\n            {isImporting && (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">\n                    Importing {progress.current.toLocaleString()} of {progress.total.toLocaleString()}...\n                  </span>\n                  <span className=\"font-medium\">{progress.total > 0 ? Math.round((progress.current / progress.total) * 100) : 0}%</span>\n                </div>\n                <Progress value={progress.total > 0 ? (progress.current / progress.total) * 100 : 0} className=\"w-full\" />\n                <p className=\"text-xs text-muted-foreground text-center truncate\">\n                  Current: {progress.currentEmail || \"Preparing...\"}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {results && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Import Results</CardTitle>\n                  <CardDescription>\n                    {results.total.toLocaleString()} rows processed\n                  </CardDescription>\n                </div>\n                {results.failed > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={downloadFailedRows}\n                    className=\"gap-2\"\n                    data-testid=\"button-download-failed\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    Download Failed Rows\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div className=\"bg-green-500/10 p-4 rounded-md border border-green-500/20\">\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                    {results.imported.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Successfully imported</div>\n                </div>\n                <div className=\"bg-red-500/10 p-4 rounded-md border border-red-500/20\">\n                  <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                    {results.failed.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Failed</div>\n                </div>\n              </div>\n\n              {results.failed > 0 && (\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  <h4 className=\"font-medium text-sm mb-2\">Failed Imports:</h4>\n                  {results.results\n                    .filter((r: any) => !r.success)\n                    .slice(0, 100) // Show first 100 failures\n                    .map((result: any, index: number) => (\n                      <div\n                        key={index}\n                        className=\"flex items-start gap-2 p-3 rounded-md bg-red-500/10\"\n                      >\n                        <AlertCircle className=\"h-5 w-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium\">{result.email || result.row?.email || 'Unknown'}</p>\n                          <p className=\"text-sm text-muted-foreground\">{result.error}</p>\n                        </div>\n                      </div>\n                    ))}\n                  {results.failed > 100 && (\n                    <p className=\"text-sm text-muted-foreground text-center mt-4\">\n                      Showing first 100 failures. Download the full list using the button above.\n                    </p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16304},"client/src/pages/staff-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calendar, Clock, CalendarX, User } from \"lucide-react\";\nimport { formatTimeRange } from \"@/lib/time-utils\";\nimport type { BookingWithDetails, Hostess, TimeOff, WeeklySchedule } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth-context\";\n\ninterface StaffOverview {\n  hostess: Hostess | null;\n  todayBookings: BookingWithDetails[];\n  tomorrowBookings: BookingWithDetails[];\n  todayTimeOff: TimeOff[];\n  weeklySchedule: WeeklySchedule[];\n  upcomingBookings: BookingWithDetails[];\n}\n\nexport default function StaffDashboard() {\n  const { user } = useAuth();\n\n  // Get all staff data in one optimized API call\n  const { data: overview, isLoading } = useQuery<StaffOverview>({\n    queryKey: [\"/api/staff/overview\"],\n  });\n\n  const linkedHostess = overview?.hostess;\n  const todayBookings = overview?.todayBookings || [];\n  const tomorrowBookings = overview?.tomorrowBookings || [];\n  const todayTimeOff = overview?.todayTimeOff || [];\n  const weeklySchedule = overview?.weeklySchedule || [];\n  const upcomingBookings = overview?.upcomingBookings || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Loading your dashboard...</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!linkedHostess) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">\n                Your account is not yet linked to a hostess profile. Please contact an administrator.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const firstName = linkedHostess.displayName.split(' ')[0];\n  const workingDays = weeklySchedule.filter(s => s.startTime && s.endTime).map(s => s.weekday);\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-4\">\n        {/* Welcome Header */}\n        <div>\n          <h1 className=\"text-2xl font-bold mb-1\">Welcome back, {firstName}!</h1>\n          <p className=\"text-sm text-muted-foreground\">Your personal Club Alpha staff dashboard</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {/* Today's Appointments */}\n          <Card className=\"bg-gradient-to-br from-purple-500 to-purple-600 border-0 text-white\">\n            <CardContent className=\"p-4 text-center\">\n              <Calendar className=\"h-6 w-6 mx-auto mb-2 opacity-80\" />\n              <div className=\"text-2xl font-bold mb-1\">{todayBookings.length}</div>\n              <div className=\"text-sm font-medium\">Your Appointments Today</div>\n            </CardContent>\n          </Card>\n\n          {/* Tomorrow's Bookings */}\n          <Card className=\"bg-gradient-to-br from-pink-500 to-pink-600 border-0 text-white\">\n            <CardContent className=\"p-4 text-center\">\n              <Clock className=\"h-6 w-6 mx-auto mb-2 opacity-80\" />\n              <div className=\"text-2xl font-bold mb-1\">{tomorrowBookings.length}</div>\n              <div className=\"text-sm font-medium\">Tomorrow's Bookings</div>\n            </CardContent>\n          </Card>\n\n          {/* Today's Time Off */}\n          <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 border-0 text-white\">\n            <CardContent className=\"p-4 text-center\">\n              <CalendarX className=\"h-6 w-6 mx-auto mb-2 opacity-80\" />\n              <div className=\"text-2xl font-bold mb-1\">{todayTimeOff.length}</div>\n              <div className=\"text-sm font-medium\">Today's Time Off</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Profile and Today's Schedule Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {/* Your Profile */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5 text-purple-500\" />\n                Your Profile\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center gap-4\">\n                <Avatar className=\"h-20 w-20\">\n                  <AvatarImage src={linkedHostess.photoUrl || undefined} />\n                  <AvatarFallback className=\"text-2xl bg-purple-500 text-white\">\n                    {linkedHostess.displayName.split(' ').map((n: string) => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"text-xl font-bold\">{linkedHostess.displayName}</h3>\n                  <p className=\"text-muted-foreground\">\n                    {linkedHostess.location === \"DOWNTOWN\" ? \"Downtown\" : \"West End\"}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-3\">Working Days:</h4>\n                <div className=\"flex gap-2 flex-wrap\">\n                  {dayNames.map((day, index) => {\n                    const isWorkingDay = workingDays.includes(index);\n                    return (\n                      <Badge\n                        key={day}\n                        variant={isWorkingDay ? \"default\" : \"outline\"}\n                        className={isWorkingDay ? \"bg-purple-500\" : \"\"}\n                        data-testid={`badge-${day.toLowerCase()}`}\n                      >\n                        {day}\n                      </Badge>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Your Schedule Today */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-purple-500\" />\n                Your Schedule Today\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {todayBookings.length === 0 ? (\n                <div className=\"py-6 text-center text-sm text-muted-foreground\">\n                  No appointments scheduled for today\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {todayBookings.map((booking: BookingWithDetails) => (\n                    <div\n                      key={booking.id}\n                      className=\"p-3 rounded-md border bg-card hover-elevate\"\n                      data-testid={`booking-${booking.id}`}\n                    >\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium truncate\">{booking.client?.email || \"Client\"}</p>\n                          <p className=\"text-xs text-muted-foreground\">{booking.service?.name}</p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"flex-shrink-0 text-xs\">\n                          {formatTimeRange(booking.startTime, booking.endTime)}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Upcoming Appointments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-purple-500\" />\n              Your Upcoming Appointments\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">All your scheduled appointments</p>\n          </CardHeader>\n          <CardContent>\n            {upcomingBookings.length === 0 ? (\n              <div className=\"py-6 text-center text-sm text-muted-foreground\">\n                No upcoming appointments\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {upcomingBookings.map((booking: BookingWithDetails) => (\n                  <div\n                    key={booking.id}\n                    className=\"p-3 rounded-md border bg-card hover-elevate\"\n                    data-testid={`upcoming-booking-${booking.id}`}\n                  >\n                    <div className=\"flex items-center justify-between gap-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"outline\" className=\"text-xs\">{booking.date}</Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">{formatTimeRange(booking.startTime, booking.endTime)}</Badge>\n                        </div>\n                        <p className=\"text-sm font-medium\">{booking.client?.email || \"Client\"}</p>\n                        <p className=\"text-xs text-muted-foreground\">{booking.service?.name}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9669},"client/src/pages/admin-upcoming-schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileUp, AlertCircle, CheckCircle2, Download, Info, Trash2, Calendar } from \"lucide-react\";\n\nexport default function AdminUpcomingSchedule() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [csvData, setCsvData] = useState(\"\");\n  const [results, setResults] = useState<any>(null);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: string) => {\n      const response = await apiRequest(\"POST\", \"/api/upcoming-schedule/bulk\", { csvData: data });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setResults(data);\n      \n      const successCount = data.results.filter((r: any) => r.success).length;\n      const failedCount = data.results.filter((r: any) => !r.success).length;\n      \n      toast({\n        title: \"Upload completed\",\n        description: `${successCount} schedule slots uploaded, ${failedCount} failed`,\n      });\n\n      // Invalidate schedule cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/upcoming-schedule\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Upload failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const clearMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/upcoming-schedule/clear\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Schedule cleared\",\n        description: \"All upcoming schedule data has been deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/upcoming-schedule\"] });\n      setResults(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Clear failed\",\n        description: error.message,\n      });\n    },\n  });\n\n  const handleUpload = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please paste CSV data to upload\",\n      });\n      return;\n    }\n    \n    setResults(null);\n    uploadMutation.mutate(csvData);\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n        \n        const lineCount = text.trim().split('\\n').length - 1;\n        toast({\n          title: \"File loaded\",\n          description: `${lineCount.toLocaleString()} schedule slots ready to upload`,\n        });\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const downloadTemplate = () => {\n    const template = `date,hostess,startTime,endTime,service,notes\n2025-10-29,Sophia,10:00,11:00,Premium Experience,\n2025-10-29,Amelia,14:00,15:30,VIP Session,\n2025-10-29,Olivia,18:00,19:00,Standard Session,\n2025-10-30,Isabella,10:30,12:00,Premium Experience,Preview slot\n2025-10-30,Charlotte,15:00,16:30,VIP Session,`;\n    \n    const blob = new Blob([template], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'upcoming-schedule-template.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const downloadFailedRows = () => {\n    if (!results || !results.results) return;\n    \n    const failedRows = results.results.filter((r: any) => !r.success);\n    const csvContent = 'date,hostess,startTime,endTime,service,notes,error\\n' + \n      failedRows.map((r: any) => {\n        const row = r.row || {};\n        return `${row.date || ''},${row.hostess || ''},${row.startTime || ''},${row.endTime || ''},${row.service || ''},${row.notes || ''},\"${r.error}\"`;\n      }).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'failed-uploads.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">Upcoming Schedule Upload</h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n          Upload the preview schedule for the upcoming week. Clients can view but cannot book through the app.\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {/* Instructions Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Info className=\"h-5 w-5\" />\n              How to Upload Schedule\n            </CardTitle>\n            <CardDescription>\n              Follow these steps to upload the upcoming schedule for client preview\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold\">CSV Format:</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Your CSV must have the following columns: <code className=\"bg-muted px-1 rounded\">date,hostess,startTime,endTime,service,notes</code>\n              </p>\n              <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1 ml-2\">\n                <li><strong>date:</strong> Format YYYY-MM-DD (e.g., 2025-10-29)</li>\n                <li><strong>hostess:</strong> Hostess display name (e.g., Sophia, Amelia)</li>\n                <li><strong>startTime:</strong> Format HH:MM in 24-hour time (e.g., 14:00)</li>\n                <li><strong>endTime:</strong> Format HH:MM in 24-hour time (e.g., 15:30)</li>\n                <li><strong>service:</strong> Service name (optional, e.g., Premium Experience)</li>\n                <li><strong>notes:</strong> Optional notes (e.g., Preview slot)</li>\n              </ul>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={downloadTemplate}\n                data-testid=\"button-download-template\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download Template\n              </Button>\n\n              <label>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  data-testid=\"input-file-upload\"\n                />\n                <Button variant=\"outline\" asChild>\n                  <span>\n                    <FileUp className=\"h-4 w-4 mr-2\" />\n                    Choose CSV File\n                  </span>\n                </Button>\n              </label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upload Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload CSV Data</CardTitle>\n            <CardDescription>\n              Paste your CSV data or use the file upload button above\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Paste CSV data here...\"\n              value={csvData}\n              onChange={(e) => setCsvData(e.target.value)}\n              className=\"min-h-[200px] font-mono text-sm\"\n              data-testid=\"input-csv-data\"\n            />\n\n            {uploadMutation.isPending && (\n              <div className=\"space-y-2\">\n                <Progress value={undefined} className=\"w-full\" data-testid=\"progress-upload\" />\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Uploading schedule...\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={handleUpload} \n                disabled={!csvData.trim() || uploadMutation.isPending}\n                data-testid=\"button-upload\"\n              >\n                <FileUp className=\"h-4 w-4 mr-2\" />\n                Upload Schedule\n              </Button>\n\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  if (confirm(\"Are you sure you want to clear all upcoming schedule data? This cannot be undone.\")) {\n                    clearMutation.mutate();\n                  }\n                }}\n                disabled={clearMutation.isPending}\n                data-testid=\"button-clear-all\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Clear All Schedule\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Card */}\n        {results && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Upload Results</CardTitle>\n              <CardDescription>\n                Summary of uploaded schedule slots\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Successful</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-success-count\">\n                      {results.results.filter((r: any) => r.success).length}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5 text-destructive\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Failed</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-failed-count\">\n                      {results.results.filter((r: any) => !r.success).length}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {results.results.some((r: any) => !r.success) && (\n                <>\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Some schedule slots failed to upload. Download the error report to see details.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Button \n                    variant=\"outline\" \n                    onClick={downloadFailedRows}\n                    data-testid=\"button-download-failed\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download Failed Rows\n                  </Button>\n\n                  <div className=\"max-h-60 overflow-auto border rounded-md\">\n                    <table className=\"w-full text-sm\">\n                      <thead className=\"bg-muted sticky top-0\">\n                        <tr>\n                          <th className=\"text-left p-2\">Date</th>\n                          <th className=\"text-left p-2\">Hostess</th>\n                          <th className=\"text-left p-2\">Time</th>\n                          <th className=\"text-left p-2\">Error</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {results.results\n                          .filter((r: any) => !r.success)\n                          .map((r: any, i: number) => (\n                            <tr key={i} className=\"border-t\">\n                              <td className=\"p-2\">{r.row?.date || 'N/A'}</td>\n                              <td className=\"p-2\">{r.row?.hostess || 'N/A'}</td>\n                              <td className=\"p-2 font-mono\">\n                                {r.row?.startTime && r.row?.endTime \n                                  ? `${r.row.startTime}-${r.row.endTime}`\n                                  : 'N/A'\n                                }\n                              </td>\n                              <td className=\"p-2 text-destructive\">{r.error}</td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12976},"client/src/pages/client-messages.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { MessageCircle, Send, ArrowLeft } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { ConversationWithDetails, MessageWithSender, Hostess } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ClientMessages() {\n  const { toast } = useToast();\n  const [selectedConversation, setSelectedConversation] = useState<ConversationWithDetails | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Fetch conversations with real-time updates every 5 seconds\n  const { data: conversations = [], isLoading: isLoadingConversations } = useQuery<ConversationWithDetails[]>({\n    queryKey: [\"/api/conversations\"],\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n\n  // Fetch messages for selected conversation with real-time updates\n  const { data: messages = [], isLoading: isLoadingMessages } = useQuery<MessageWithSender[]>({\n    queryKey: [\"/api/conversations\", selectedConversation?.id, \"messages\"],\n    enabled: !!selectedConversation,\n    refetchInterval: selectedConversation ? 3000 : false, // Auto-refresh every 3 seconds when viewing\n  });\n\n  // Mark conversation as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (conversationId: string) => {\n      return apiRequest(\"POST\", `/api/conversations/${conversationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  // Fetch all hostesses to allow starting new conversations\n  const { data: hostesses = [] } = useQuery<Hostess[]>({\n    queryKey: [\"/api/hostesses\"],\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!selectedConversation) return;\n      return apiRequest(\"POST\", \"/api/messages\", {\n        conversationId: selectedConversation.id,\n        content,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\", selectedConversation?.id, \"messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setMessageInput(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Start new conversation mutation\n  const startConversationMutation = useMutation({\n    mutationFn: async (hostessId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/conversations\", { hostessId });\n      return response.json() as Promise<ConversationWithDetails>;\n    },\n    onSuccess: (data: ConversationWithDetails) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setSelectedConversation(data);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start conversation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Mark conversation as read when selected\n  useEffect(() => {\n    if (selectedConversation) {\n      markAsReadMutation.mutate(selectedConversation.id);\n    }\n  }, [selectedConversation?.id]);\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim()) return;\n    sendMessageMutation.mutate(messageInput);\n  };\n\n  const handleStartConversation = (hostessId: string) => {\n    // Check if conversation already exists\n    const existing = conversations.find(c => c.hostessId === hostessId);\n    if (existing) {\n      setSelectedConversation(existing);\n    } else {\n      startConversationMutation.mutate(hostessId);\n    }\n  };\n\n  // Get current user ID from first message sent by user\n  const currentUserId = messages.find(m => m.sender)?.sender?.id;\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      <div className=\"border-b p-4\">\n        <h1 className=\"text-2xl font-semibold\">Messages</h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Chat with hostesses directly\n        </p>\n      </div>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Conversations List */}\n        {!selectedConversation ? (\n          <div className=\"flex-1 p-4 overflow-auto\">\n            <div className=\"max-w-3xl mx-auto space-y-4\">\n              {/* Existing Conversations */}\n              {conversations.length > 0 && (\n                <div className=\"space-y-2\">\n                  <h2 className=\"text-lg font-semibold mb-3\">Your Conversations</h2>\n                  {conversations.map((conversation) => (\n                    <Card\n                      key={conversation.id}\n                      className=\"p-4 cursor-pointer hover-elevate active-elevate-2 transition-colors\"\n                      onClick={() => setSelectedConversation(conversation)}\n                      data-testid={`conversation-${conversation.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={conversation.hostess.photoUrl || undefined} />\n                          <AvatarFallback>\n                            {conversation.hostess.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <h3 className=\"font-semibold truncate\">\n                                {conversation.hostess.displayName}\n                              </h3>\n                              {conversation.unreadCount && conversation.unreadCount > 0 && (\n                                <Badge variant=\"default\" className=\"text-xs px-2 py-0.5\">\n                                  {conversation.unreadCount}\n                                </Badge>\n                              )}\n                            </div>\n                            {conversation.lastMessageAt && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {format(new Date(conversation.lastMessageAt), \"MMM d, h:mm a\")}\n                              </span>\n                            )}\n                          </div>\n                          {conversation.lastMessage && (\n                            <p className=\"text-sm text-muted-foreground truncate mt-1\">\n                              {conversation.lastMessage.content}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {/* Start New Conversation */}\n              <div className=\"space-y-2\">\n                <h2 className=\"text-lg font-semibold mb-3\">Start a Conversation</h2>\n                <div className=\"grid gap-3 sm:grid-cols-2\">\n                  {hostesses\n                    .filter(h => !conversations.some(c => c.hostessId === h.id))\n                    .map((hostess) => (\n                      <Card\n                        key={hostess.id}\n                        className=\"p-4 cursor-pointer hover-elevate active-elevate-2\"\n                        onClick={() => handleStartConversation(hostess.id)}\n                        data-testid={`start-conversation-${hostess.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage src={hostess.photoUrl || undefined} />\n                            <AvatarFallback className=\"text-xs\">\n                              {hostess.displayName.split(' ').map(n => n[0]).join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-medium truncate\">{hostess.displayName}</h3>\n                            {hostess.locations && hostess.locations.length > 0 && (\n                              <div className=\"flex gap-1 mt-1\">\n                                {hostess.locations.includes(\"DOWNTOWN\") && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">Downtown</Badge>\n                                )}\n                                {hostess.locations.includes(\"WEST_END\") && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">West End</Badge>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                          <MessageCircle className=\"h-5 w-5 text-muted-foreground\" />\n                        </div>\n                      </Card>\n                    ))}\n                </div>\n              </div>\n\n              {isLoadingConversations && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading conversations...\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          /* Conversation View */\n          <div className=\"flex-1 flex flex-col\">\n            {/* Conversation Header */}\n            <div className=\"border-b p-4 flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSelectedConversation(null)}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage src={selectedConversation?.hostess?.photoUrl || undefined} />\n                <AvatarFallback>\n                  {selectedConversation?.hostess?.displayName?.split(' ').map(n => n[0]).join('') || 'H'}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h2 className=\"font-semibold\">{selectedConversation?.hostess?.displayName || 'Hostess'}</h2>\n                {selectedConversation?.hostess?.locations && selectedConversation.hostess.locations.length > 0 && (\n                  <div className=\"flex gap-1 mt-0.5\">\n                    {selectedConversation.hostess.locations.includes(\"DOWNTOWN\") && (\n                      <Badge variant=\"outline\" className=\"text-xs\">Downtown</Badge>\n                    )}\n                    {selectedConversation.hostess.locations.includes(\"WEST_END\") && (\n                      <Badge variant=\"outline\" className=\"text-xs\">West End</Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Messages */}\n            <ScrollArea className=\"flex-1 p-4\">\n              {isLoadingMessages ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading messages...\n                </div>\n              ) : messages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No messages yet. Start the conversation!\n                </div>\n              ) : (\n                <div className=\"space-y-4 max-w-3xl mx-auto\">\n                  {messages.map((message) => {\n                    const isOwnMessage = message.sender?.id === currentUserId;\n                    return (\n                      <div\n                        key={message.id}\n                        className={`flex ${isOwnMessage ? \"justify-end\" : \"justify-start\"}`}\n                        data-testid={`message-${message.id}`}\n                      >\n                        <div\n                          className={`max-w-[70%] rounded-lg p-3 ${\n                            isOwnMessage\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"bg-muted\"\n                          }`}\n                        >\n                          <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n                          <p className={`text-xs mt-1 ${isOwnMessage ? \"text-primary-foreground/70\" : \"text-muted-foreground\"}`}>\n                            {format(new Date(message.createdAt), \"h:mm a\")}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </ScrollArea>\n\n            {/* Message Input */}\n            <div className=\"border-t p-4\">\n              <div className=\"max-w-3xl mx-auto flex gap-2\">\n                <Input\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSendMessage();\n                    }\n                  }}\n                  placeholder=\"Type a message...\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                  data-testid=\"button-send\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14384},"client/src/pages/admin-flagged-conversations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { AlertTriangle, MessageSquare, CheckCircle, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { FlaggedConversationWithDetails, MessageWithSender } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminFlaggedConversations() {\n  const { toast } = useToast();\n  const [selectedFlagged, setSelectedFlagged] = useState<FlaggedConversationWithDetails | null>(null);\n  const [viewTab, setViewTab] = useState<\"unreviewed\" | \"reviewed\">(\"unreviewed\");\n\n  // Fetch flagged conversations\n  const { data: unreviewedFlags = [], isLoading: isLoadingUnreviewed } = useQuery<FlaggedConversationWithDetails[]>({\n    queryKey: [\"/api/admin/flagged-conversations?reviewed=false\"],\n  });\n\n  const { data: reviewedFlags = [], isLoading: isLoadingReviewed } = useQuery<FlaggedConversationWithDetails[]>({\n    queryKey: [\"/api/admin/flagged-conversations?reviewed=true\"],\n  });\n\n  // Fetch messages for selected conversation\n  const { data: messages = [] } = useQuery<MessageWithSender[]>({\n    queryKey: [\"/api/conversations\", selectedFlagged?.conversationId, \"messages\"],\n    enabled: !!selectedFlagged,\n  });\n\n  // Mark as reviewed mutation\n  const markAsReviewedMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"PATCH\", `/api/admin/flagged-conversations/${id}/review`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/flagged-conversations?reviewed=false\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/flagged-conversations?reviewed=true\"] });\n      setSelectedFlagged(null);\n      toast({\n        title: \"Success\",\n        description: \"Conversation marked as reviewed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark conversation as reviewed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkAsReviewed = (id: string) => {\n    markAsReviewedMutation.mutate(id);\n  };\n\n  const FlaggedTable = ({ flags, isLoading }: { flags: FlaggedConversationWithDetails[]; isLoading: boolean }) => {\n    if (isLoading) {\n      return (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          Loading flagged conversations...\n        </div>\n      );\n    }\n\n    if (flags.length === 0) {\n      return (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          No flagged conversations.\n        </div>\n      );\n    }\n\n    return (\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Triggered Word</TableHead>\n            <TableHead>Client</TableHead>\n            <TableHead>Hostess</TableHead>\n            <TableHead>Flagged Date</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {flags.map((flag) => (\n            <TableRow key={flag.id} data-testid={`flagged-${flag.id}`}>\n              <TableCell>\n                <Badge variant=\"destructive\" className=\"font-mono\">\n                  {flag.triggeredWord}\n                </Badge>\n              </TableCell>\n              <TableCell>{flag.conversation.client.email.split('@')[0]}</TableCell>\n              <TableCell>{flag.conversation.hostess.displayName}</TableCell>\n              <TableCell className=\"text-muted-foreground\">\n                {format(new Date(flag.flaggedAt), \"MMM d, yyyy h:mm a\")}\n              </TableCell>\n              <TableCell>\n                {flag.reviewed ? (\n                  <Badge variant=\"secondary\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Reviewed\n                  </Badge>\n                ) : (\n                  <Badge variant=\"outline\">\n                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                    Pending\n                  </Badge>\n                )}\n              </TableCell>\n              <TableCell className=\"text-right space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedFlagged(flag)}\n                  data-testid={`button-view-${flag.id}`}\n                >\n                  <Eye className=\"h-4 w-4 mr-1\" />\n                  View\n                </Button>\n                {!flag.reviewed && (\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    onClick={() => handleMarkAsReviewed(flag.id)}\n                    disabled={markAsReviewedMutation.isPending}\n                    data-testid={`button-mark-reviewed-${flag.id}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-1\" />\n                    Mark Reviewed\n                  </Button>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">Flagged Conversations</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Review conversations that contain trigger words\n          </p>\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-4 sm:grid-cols-2\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Pending Review</p>\n              <h3 className=\"text-3xl font-bold mt-1\">{unreviewedFlags.length}</h3>\n            </div>\n            <AlertTriangle className=\"h-10 w-10 text-destructive\" />\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Reviewed</p>\n              <h3 className=\"text-3xl font-bold mt-1\">{reviewedFlags.length}</h3>\n            </div>\n            <CheckCircle className=\"h-10 w-10 text-green-600\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Flagged Conversations List */}\n      <Card>\n        <Tabs value={viewTab} onValueChange={(v) => setViewTab(v as \"unreviewed\" | \"reviewed\")}>\n          <div className=\"border-b p-4\">\n            <TabsList>\n              <TabsTrigger value=\"unreviewed\" data-testid=\"tab-unreviewed\">\n                Pending Review ({unreviewedFlags.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"reviewed\" data-testid=\"tab-reviewed\">\n                Reviewed ({reviewedFlags.length})\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <div className=\"p-6\">\n            <TabsContent value=\"unreviewed\" className=\"mt-0\">\n              <FlaggedTable flags={unreviewedFlags} isLoading={isLoadingUnreviewed} />\n            </TabsContent>\n\n            <TabsContent value=\"reviewed\" className=\"mt-0\">\n              <FlaggedTable flags={reviewedFlags} isLoading={isLoadingReviewed} />\n            </TabsContent>\n          </div>\n        </Tabs>\n      </Card>\n\n      {/* Conversation View Dialog */}\n      <Dialog open={!!selectedFlagged} onOpenChange={(open) => !open && setSelectedFlagged(null)}>\n        <DialogContent className=\"max-w-3xl max-h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              Conversation Details\n            </DialogTitle>\n            <DialogDescription>\n              {selectedFlagged && (\n                <div className=\"space-y-2 mt-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">Triggered Word:</span>\n                    <Badge variant=\"destructive\" className=\"font-mono\">\n                      {selectedFlagged.triggeredWord}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">Between:</span>\n                    <span>{selectedFlagged.conversation.client.email.split('@')[0]}</span>\n                    <span className=\"text-muted-foreground\">and</span>\n                    <span>{selectedFlagged.conversation.hostess.displayName}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Flagged:</span>{\" \"}\n                    {format(new Date(selectedFlagged.flaggedAt), \"MMM d, yyyy 'at' h:mm a\")}\n                  </div>\n                </div>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n\n          {/* Messages */}\n          <ScrollArea className=\"h-[400px] border rounded-lg p-4\">\n            {messages.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No messages in this conversation.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {messages.map((message) => {\n                  const isClient = message.sender?.id === selectedFlagged?.conversation.clientId;\n                  const isFlaggedMessage = message.id === selectedFlagged?.messageId;\n                  \n                  return (\n                    <div\n                      key={message.id}\n                      className={`${isFlaggedMessage ? \"border-2 border-destructive rounded-lg p-2\" : \"\"}`}\n                      data-testid={`conversation-message-${message.id}`}\n                    >\n                      <div className={`flex ${isClient ? \"justify-start\" : \"justify-end\"}`}>\n                        <div\n                          className={`max-w-[70%] rounded-lg p-3 ${\n                            isClient ? \"bg-muted\" : \"bg-primary text-primary-foreground\"\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"text-xs font-semibold\">\n                              {isClient \n                                ? selectedFlagged?.conversation.client.email.split('@')[0] \n                                : selectedFlagged?.conversation.hostess.displayName}\n                            </span>\n                            {isFlaggedMessage && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">Flagged</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n                          <p className={`text-xs mt-1 ${isClient ? \"text-muted-foreground\" : \"text-primary-foreground/70\"}`}>\n                            {format(new Date(message.createdAt), \"h:mm a\")}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </ScrollArea>\n\n          {/* Actions */}\n          {selectedFlagged && !selectedFlagged.reviewed && (\n            <div className=\"flex justify-end gap-2\">\n              <Button\n                onClick={() => handleMarkAsReviewed(selectedFlagged.id)}\n                disabled={markAsReviewedMutation.isPending}\n                data-testid=\"button-mark-reviewed-dialog\"\n              >\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                Mark as Reviewed\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12404},"client/src/pages/staff-messages.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, ArrowLeft } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { ConversationWithDetails, MessageWithSender } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function StaffMessages() {\n  const { toast } = useToast();\n  const [selectedConversation, setSelectedConversation] = useState<ConversationWithDetails | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Fetch conversations with real-time updates every 5 seconds\n  const { data: conversations = [], isLoading: isLoadingConversations } = useQuery<ConversationWithDetails[]>({\n    queryKey: [\"/api/conversations\"],\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n\n  // Fetch messages for selected conversation with real-time updates\n  const { data: messages = [], isLoading: isLoadingMessages } = useQuery<MessageWithSender[]>({\n    queryKey: [\"/api/conversations\", selectedConversation?.id, \"messages\"],\n    enabled: !!selectedConversation,\n    refetchInterval: selectedConversation ? 3000 : false, // Auto-refresh every 3 seconds when viewing\n  });\n\n  // Mark conversation as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (conversationId: string) => {\n      return apiRequest(\"POST\", `/api/conversations/${conversationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!selectedConversation) return;\n      return apiRequest(\"POST\", \"/api/messages\", {\n        conversationId: selectedConversation.id,\n        content,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\", selectedConversation?.id, \"messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setMessageInput(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Mark conversation as read when selected\n  useEffect(() => {\n    if (selectedConversation) {\n      markAsReadMutation.mutate(selectedConversation.id);\n    }\n  }, [selectedConversation?.id]);\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim()) return;\n    sendMessageMutation.mutate(messageInput);\n  };\n\n  // Get current user ID from first message sent by user\n  const currentUserId = messages.find(m => m.sender)?.sender?.id;\n\n  return (\n    <div className=\"h-full flex flex-col bg-[hsl(220_15%_12%)]\">\n      <div className=\"border-b border-border p-4\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">Messages</h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Chat with your clients\n        </p>\n      </div>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Conversations List */}\n        {!selectedConversation ? (\n          <div className=\"flex-1 p-4 overflow-auto\">\n            <div className=\"max-w-3xl mx-auto space-y-4\">\n              {conversations.length === 0 && !isLoadingConversations ? (\n                <Card className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground\">\n                    No conversations yet. Clients will message you when they have questions.\n                  </p>\n                </Card>\n              ) : (\n                conversations.map((conversation) => (\n                  <Card\n                    key={conversation.id}\n                    className=\"p-4 cursor-pointer hover-elevate active-elevate-2\"\n                    onClick={() => setSelectedConversation(conversation)}\n                    data-testid={`conversation-${conversation.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback>\n                          {conversation.client.username.substring(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"font-semibold truncate\">\n                              {conversation.client.username}\n                            </h3>\n                            {conversation.unreadCount && conversation.unreadCount > 0 && (\n                              <Badge variant=\"default\" className=\"text-xs px-2 py-0.5\">\n                                {conversation.unreadCount}\n                              </Badge>\n                            )}\n                          </div>\n                          {conversation.lastMessageAt && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              {format(new Date(conversation.lastMessageAt), \"MMM d, h:mm a\")}\n                            </span>\n                          )}\n                        </div>\n                        {conversation.lastMessage && (\n                          <p className=\"text-sm text-muted-foreground truncate mt-1\">\n                            {conversation.lastMessage.content}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </Card>\n                ))\n              )}\n\n              {isLoadingConversations && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading conversations...\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          /* Conversation View */\n          <div className=\"flex-1 flex flex-col\">\n            {/* Conversation Header */}\n            <div className=\"border-b border-border p-4 flex items-center gap-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSelectedConversation(null)}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <Avatar className=\"h-10 w-10\">\n                <AvatarFallback>\n                  {selectedConversation.client.username.substring(0, 2).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h2 className=\"font-semibold\">{selectedConversation.client.username}</h2>\n                <p className=\"text-xs text-muted-foreground\">{selectedConversation.client.email}</p>\n              </div>\n            </div>\n\n            {/* Messages */}\n            <ScrollArea className=\"flex-1 p-4\">\n              {isLoadingMessages ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  Loading messages...\n                </div>\n              ) : messages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No messages yet. Start the conversation!\n                </div>\n              ) : (\n                <div className=\"space-y-4 max-w-3xl mx-auto\">\n                  {messages.map((message) => {\n                    const isOwnMessage = message.sender?.id === currentUserId;\n                    return (\n                      <div\n                        key={message.id}\n                        className={`flex ${isOwnMessage ? \"justify-end\" : \"justify-start\"}`}\n                        data-testid={`message-${message.id}`}\n                      >\n                        <div\n                          className={`max-w-[70%] rounded-lg p-3 ${\n                            isOwnMessage\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"bg-card\"\n                          }`}\n                        >\n                          <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n                          <p className={`text-xs mt-1 ${isOwnMessage ? \"text-primary-foreground/70\" : \"text-muted-foreground\"}`}>\n                            {format(new Date(message.createdAt), \"h:mm a\")}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <div ref={messagesEndRef} />\n                </div>\n              )}\n            </ScrollArea>\n\n            {/* Message Input */}\n            <div className=\"border-t border-border p-4\">\n              <div className=\"max-w-3xl mx-auto flex gap-2\">\n                <Input\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSendMessage();\n                    }\n                  }}\n                  placeholder=\"Type a message...\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                  data-testid=\"button-send\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10382},"client/src/pages/client-upcoming-schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Phone, Info, ChevronLeft, ChevronRight, AlertCircle, MapPin, CalendarDays } from \"lucide-react\";\nimport { format, addDays, startOfWeek, endOfWeek, addWeeks, eachDayOfInterval } from \"date-fns\";\nimport type { UpcomingScheduleWithDetails } from \"@shared/schema\";\n\nconst SLOT_DURATION = 15; // minutes\nconst GRID_START = 10 * 60; // 10:00 AM in minutes\nconst GRID_END = 23 * 60; // 11:00 PM in minutes\n\ntype ViewMode = \"daily\" | \"weekly\";\n\nfunction formatTimeRange(startMin: number, endMin: number): string {\n  const formatTime = (min: number) => {\n    const hours = Math.floor(min / 60);\n    const minutes = min % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n  return `${formatTime(startMin)}-${formatTime(endMin)}`;\n}\n\nexport default function ClientUpcomingSchedule() {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [selectedLocation, setSelectedLocation] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<ViewMode>(\"daily\");\n  \n  const dateStr = format(selectedDate, \"yyyy-MM-dd\");\n  const weekStart = startOfWeek(selectedDate, { weekStartsOn: 0 });\n  const weekEnd = endOfWeek(selectedDate, { weekStartsOn: 0 });\n  const weekStartStr = format(weekStart, \"yyyy-MM-dd\");\n  const weekEndStr = format(weekEnd, \"yyyy-MM-dd\");\n\n  // Daily view query\n  const { data: scheduleData = [], isLoading, error } = useQuery<UpcomingScheduleWithDetails[]>({\n    queryKey: [\"/api/upcoming-schedule\", dateStr],\n    queryFn: async () => {\n      const response = await fetch(`/api/upcoming-schedule?startDate=${dateStr}&endDate=${dateStr}`);\n      if (!response.ok) throw new Error(\"Failed to fetch schedule\");\n      return response.json();\n    },\n    enabled: viewMode === \"daily\",\n  });\n\n  // Weekly view query\n  const { data: weeklyScheduleData = [], isLoading: isLoadingWeekly, error: errorWeekly } = useQuery<UpcomingScheduleWithDetails[]>({\n    queryKey: [\"/api/upcoming-schedule\", \"weekly\", weekStartStr, weekEndStr],\n    queryFn: async () => {\n      const response = await fetch(`/api/upcoming-schedule?startDate=${weekStartStr}&endDate=${weekEndStr}`);\n      if (!response.ok) throw new Error(\"Failed to fetch schedule\");\n      return response.json();\n    },\n    enabled: viewMode === \"weekly\",\n  });\n\n  // Filter schedule by location (daily)\n  const filteredScheduleData = selectedLocation === \"all\" \n    ? scheduleData \n    : scheduleData.filter(s => s.hostess.locations?.includes(selectedLocation));\n\n  // Filter schedule by location (weekly)\n  const filteredWeeklyScheduleData = selectedLocation === \"all\" \n    ? weeklyScheduleData \n    : weeklyScheduleData.filter(s => s.hostess.locations?.includes(selectedLocation));\n\n  // Get unique hostesses for this day (filtered by location)\n  const hostesses = Array.from(\n    new Set(filteredScheduleData.map(s => s.hostessId))\n  ).map(id => {\n    const schedule = filteredScheduleData.find(s => s.hostessId === id);\n    return schedule?.hostess;\n  }).filter(Boolean);\n\n  // Get unique hostesses for the week (filtered by location)\n  const weeklyHostesses = Array.from(\n    new Set(filteredWeeklyScheduleData.map(s => s.hostessId))\n  ).map(id => {\n    const schedule = filteredWeeklyScheduleData.find(s => s.hostessId === id);\n    return schedule?.hostess;\n  }).filter(Boolean);\n\n  // Get days of the week\n  const weekDays = eachDayOfInterval({ start: weekStart, end: weekEnd });\n\n  // Create time slots\n  const timeSlots: number[] = [];\n  for (let time = GRID_START; time < GRID_END; time += SLOT_DURATION) {\n    timeSlots.push(time);\n  }\n\n  const goToPreviousDay = () => {\n    setSelectedDate(prev => addDays(prev, -1));\n  };\n\n  const goToNextDay = () => {\n    setSelectedDate(prev => addDays(prev, 1));\n  };\n\n  const goToPreviousWeek = () => {\n    setSelectedDate(prev => addWeeks(prev, -1));\n  };\n\n  const goToNextWeek = () => {\n    setSelectedDate(prev => addWeeks(prev, 1));\n  };\n\n  const goToToday = () => {\n    setSelectedDate(new Date());\n  };\n\n  // Get schedule for a specific hostess and time (daily)\n  const getScheduleAtTime = (hostessId: string, time: number) => {\n    return filteredScheduleData.find(\n      s => s.hostessId === hostessId && time >= s.startTime && time < s.endTime\n    );\n  };\n\n  // Get schedules for a specific hostess and day (weekly)\n  const getSchedulesForDay = (hostessId: string, date: Date) => {\n    const dateStr = format(date, \"yyyy-MM-dd\");\n    return filteredWeeklyScheduleData.filter(\n      s => s.hostessId === hostessId && s.date === dateStr\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">\n          Upcoming Schedule Preview\n        </h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n          Preview next week's schedule. To book, please call Club Alpha.\n        </p>\n      </div>\n\n      {/* Booking Notice */}\n      <Alert className=\"mb-6 border-primary/50 bg-primary/5\">\n        <Phone className=\"h-4 w-4\" />\n        <AlertDescription className=\"text-sm\">\n          <strong>This is a preview schedule only.</strong> You cannot book appointments through the app for these dates. \n          Please call Club Alpha to reserve your preferred time slot.\n        </AlertDescription>\n      </Alert>\n\n      {/* View Mode and Location Filter */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        {/* View Mode Toggle */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <CalendarDays className=\"h-5 w-5 text-muted-foreground\" />\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={viewMode === \"daily\" ? \"default\" : \"outline\"}\n                  onClick={() => setViewMode(\"daily\")}\n                  data-testid=\"button-view-daily\"\n                >\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Daily\n                </Button>\n                <Button\n                  variant={viewMode === \"weekly\" ? \"default\" : \"outline\"}\n                  onClick={() => setViewMode(\"weekly\")}\n                  data-testid=\"button-view-weekly\"\n                >\n                  <CalendarDays className=\"h-4 w-4 mr-2\" />\n                  Weekly\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Location Filter */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={selectedLocation === \"all\" ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedLocation(\"all\")}\n                  data-testid=\"button-location-all\"\n                >\n                  All Locations\n                </Button>\n                <Button\n                  variant={selectedLocation === \"DOWNTOWN\" ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedLocation(\"DOWNTOWN\")}\n                  data-testid=\"button-location-downtown\"\n                >\n                  Downtown\n                </Button>\n                <Button\n                  variant={selectedLocation === \"WEST_END\" ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedLocation(\"WEST_END\")}\n                  data-testid=\"button-location-westend\"\n                >\n                  West End\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Date Navigation */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={viewMode === \"daily\" ? goToPreviousDay : goToPreviousWeek}\n              data-testid={viewMode === \"daily\" ? \"button-previous-day\" : \"button-previous-week\"}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n\n            <div className=\"flex items-center gap-4\">\n              <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-selected-date\">\n                  {viewMode === \"daily\" \n                    ? format(selectedDate, \"EEEE, MMMM d, yyyy\")\n                    : `${format(weekStart, \"MMM d\")} - ${format(weekEnd, \"MMM d, yyyy\")}`\n                  }\n                </h2>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={goToToday}\n                data-testid=\"button-today\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={viewMode === \"daily\" ? goToNextDay : goToNextWeek}\n                data-testid={viewMode === \"daily\" ? \"button-next-day\" : \"button-next-week\"}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Schedule Grid */}\n      {viewMode === \"daily\" ? (\n        // DAILY VIEW\n        error ? (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Failed to load upcoming schedule. Please try again later or contact support if the problem persists.\n            </AlertDescription>\n          </Alert>\n        ) : isLoading ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Loading schedule...</p>\n            </CardContent>\n          </Card>\n        ) : hostesses.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Info className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Schedule Available</h3>\n            <p className=\"text-muted-foreground\">\n              The schedule for this date hasn't been published yet.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"overflow-auto border rounded-lg\">\n          <div className=\"inline-flex min-w-full\">\n            {/* Time Column */}\n            <div className=\"w-20 flex-shrink-0 border-r bg-card sticky left-0 z-50 shadow-sm\">\n              <div className=\"h-16 border-b bg-card sticky top-0 z-50\" />\n              {timeSlots.map((slot) => (\n                <div\n                  key={slot}\n                  className=\"h-12 border-b flex items-center justify-center text-sm text-muted-foreground font-mono\"\n                >\n                  {formatTimeRange(slot, slot + SLOT_DURATION)}\n                </div>\n              ))}\n            </div>\n\n            {/* Hostess Columns */}\n            {hostesses.map((hostess) => (\n              <div \n                key={hostess!.id} \n                className=\"border-r flex-shrink-0 min-w-[200px]\"\n              >\n                {/* Header */}\n                <div className=\"h-16 border-b bg-card flex items-center justify-between px-3 sticky top-0 z-20\">\n                  <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={hostess!.photoUrl || undefined} />\n                      <AvatarFallback className=\"text-xs\">\n                        {hostess!.displayName.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm truncate font-medium\">\n                      {hostess!.displayName}\n                    </span>\n                  </div>\n                  {hostess!.locations && hostess!.locations.length > 0 && (\n                    <div className=\"flex gap-0.5\">\n                      {hostess!.locations.includes(\"DOWNTOWN\") && (\n                        <Badge variant=\"outline\" className=\"text-xs h-5 px-1\">D</Badge>\n                      )}\n                      {hostess!.locations.includes(\"WEST_END\") && (\n                        <Badge variant=\"outline\" className=\"text-xs h-5 px-1\">W</Badge>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Time Slots */}\n                {timeSlots.map((slot) => {\n                  const schedule = getScheduleAtTime(hostess!.id, slot);\n                  const isFirstSlot = schedule && slot === schedule.startTime;\n                  const slotsCount = schedule \n                    ? Math.ceil((schedule.endTime - schedule.startTime) / SLOT_DURATION)\n                    : 0;\n\n                  // Only render content on the first slot\n                  if (schedule && !isFirstSlot) {\n                    return <div key={slot} className=\"h-12 border-b\" />;\n                  }\n\n                  return (\n                    <div key={slot} className=\"h-12 border-b relative\">\n                      {isFirstSlot && (\n                        <div \n                          className=\"absolute inset-0 bg-blue-500/20 border-l-2 border-blue-500 p-1 overflow-hidden\"\n                          style={{ height: `${slotsCount * 48}px` }}\n                        >\n                          <div className=\"text-xs font-semibold text-blue-700 dark:text-blue-300 mb-0.5\">\n                            {formatTimeRange(schedule.startTime, schedule.endTime)}\n                          </div>\n                          {schedule.service && (\n                            <div className=\"text-xs text-blue-600 dark:text-blue-400 font-medium mb-0.5\">\n                              {schedule.service.name}\n                            </div>\n                          )}\n                          {schedule.notes && (\n                            <div className=\"text-xs text-muted-foreground italic\">\n                              {schedule.notes}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </div>\n        )\n      ) : (\n        // WEEKLY VIEW\n        errorWeekly ? (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Failed to load upcoming schedule. Please try again later or contact support if the problem persists.\n            </AlertDescription>\n          </Alert>\n        ) : isLoadingWeekly ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Loading schedule...</p>\n            </CardContent>\n          </Card>\n        ) : weeklyHostesses.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Info className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Schedule Available</h3>\n              <p className=\"text-muted-foreground\">\n                The schedule for this week hasn't been published yet.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"overflow-auto border rounded-lg\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b bg-card\">\n                  <th className=\"p-3 text-left font-semibold min-w-[150px] sticky left-0 z-20 bg-card border-r\">\n                    Hostess\n                  </th>\n                  {weekDays.map((day) => (\n                    <th key={day.toISOString()} className=\"p-3 text-center font-semibold min-w-[140px] border-r\">\n                      <div className=\"text-sm\">\n                        {format(day, \"EEE\")}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {format(day, \"MMM d\")}\n                      </div>\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {weeklyHostesses.map((hostess) => (\n                  <tr key={hostess!.id} className=\"border-b hover-elevate\">\n                    <td className=\"p-3 sticky left-0 z-10 bg-card border-r\">\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage src={hostess!.photoUrl || undefined} />\n                          <AvatarFallback className=\"text-xs\">\n                            {hostess!.displayName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"text-sm font-medium truncate\">\n                            {hostess!.displayName}\n                          </div>\n                          {hostess!.locations && hostess!.locations.length > 0 && (\n                            <div className=\"flex gap-1 mt-0.5\">\n                              {hostess!.locations.includes(\"DOWNTOWN\") && (\n                                <Badge variant=\"outline\" className=\"text-xs h-4 px-1\">D</Badge>\n                              )}\n                              {hostess!.locations.includes(\"WEST_END\") && (\n                                <Badge variant=\"outline\" className=\"text-xs h-4 px-1\">W</Badge>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    {weekDays.map((day) => {\n                      const daySchedules = getSchedulesForDay(hostess!.id, day);\n                      return (\n                        <td key={day.toISOString()} className=\"p-2 border-r align-top\">\n                          {daySchedules.length > 0 ? (\n                            <div className=\"space-y-1\">\n                              {daySchedules.map((schedule) => (\n                                <div\n                                  key={schedule.id}\n                                  className=\"bg-blue-500/20 border border-blue-500/30 rounded p-1.5 text-xs\"\n                                  data-testid={`schedule-${hostess!.id}-${format(day, \"yyyy-MM-dd\")}`}\n                                >\n                                  <div className=\"font-semibold text-blue-700 dark:text-blue-300\">\n                                    {formatTimeRange(schedule.startTime, schedule.endTime)}\n                                  </div>\n                                  {schedule.service && (\n                                    <div className=\"text-blue-600 dark:text-blue-400 font-medium mt-0.5\">\n                                      {schedule.service.name}\n                                    </div>\n                                  )}\n                                  {schedule.notes && (\n                                    <div className=\"text-muted-foreground italic mt-0.5\">\n                                      {schedule.notes}\n                                    </div>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-xs text-muted-foreground text-center py-2\">\n                              -\n                            </div>\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )\n      )}\n\n      {/* Footer Info */}\n      {(viewMode === \"daily\" ? hostesses.length > 0 : weeklyHostesses.length > 0) && (\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Phone className=\"h-5 w-5\" />\n              How to Book\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              This is a preview of the upcoming schedule. To book any of the available time slots shown above, \n              please contact Club Alpha directly by phone. Our staff will confirm your appointment and provide \n              any additional information you may need.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":21456},"client/src/pages/admin-trigger-words.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Plus, Trash2, Shield } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { TriggerWordWithDetails } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminTriggerWords() {\n  const { toast } = useToast();\n  const [newWord, setNewWord] = useState(\"\");\n  const [deleteId, setDeleteId] = useState<string | null>(null);\n\n  // Fetch trigger words\n  const { data: triggerWords = [], isLoading } = useQuery<TriggerWordWithDetails[]>({\n    queryKey: [\"/api/admin/trigger-words\"],\n  });\n\n  // Add trigger word mutation\n  const addWordMutation = useMutation({\n    mutationFn: async (word: string) => {\n      return apiRequest(\"POST\", \"/api/admin/trigger-words\", { word });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/trigger-words\"] });\n      setNewWord(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Trigger word added successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add trigger word.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete trigger word mutation\n  const deleteWordMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/trigger-words/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/trigger-words\"] });\n      setDeleteId(null);\n      toast({\n        title: \"Success\",\n        description: \"Trigger word deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete trigger word.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddWord = () => {\n    if (!newWord.trim()) return;\n    addWordMutation.mutate(newWord.trim());\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <Shield className=\"h-8 w-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">Trigger Words Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Monitor conversations for specific words and phrases\n          </p>\n        </div>\n      </div>\n\n      {/* Add New Trigger Word */}\n      <Card className=\"p-6\">\n        <h2 className=\"text-lg font-semibold mb-4\">Add New Trigger Word</h2>\n        <div className=\"flex gap-2\">\n          <Input\n            value={newWord}\n            onChange={(e) => setNewWord(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleAddWord();\n              }\n            }}\n            placeholder=\"Enter word or phrase to monitor...\"\n            disabled={addWordMutation.isPending}\n            data-testid=\"input-trigger-word\"\n          />\n          <Button\n            onClick={handleAddWord}\n            disabled={!newWord.trim() || addWordMutation.isPending}\n            data-testid=\"button-add-trigger-word\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add\n          </Button>\n        </div>\n        <p className=\"text-xs text-muted-foreground mt-2\">\n          Words are case-insensitive. Conversations containing these words will be flagged for review.\n        </p>\n      </Card>\n\n      {/* Trigger Words List */}\n      <Card>\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Active Trigger Words</h2>\n            <Badge variant=\"outline\">{triggerWords.length} total</Badge>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Loading trigger words...\n            </div>\n          ) : triggerWords.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No trigger words configured. Add your first trigger word above.\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Word/Phrase</TableHead>\n                  <TableHead>Added By</TableHead>\n                  <TableHead>Date Added</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {triggerWords.map((tw) => (\n                  <TableRow key={tw.id} data-testid={`trigger-word-${tw.id}`}>\n                    <TableCell>\n                      <Badge variant=\"secondary\" className=\"font-mono\">\n                        {tw.word}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{tw.addedByUser.email}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {format(new Date(tw.createdAt), \"MMM d, yyyy\")}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setDeleteId(tw.id)}\n                        data-testid={`button-delete-${tw.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteId} onOpenChange={(open) => !open && setDeleteId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Trigger Word?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will remove the trigger word from monitoring. Existing flagged conversations will not be affected.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteId && deleteWordMutation.mutate(deleteId)}\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":7215},"client/src/pages/admin-csv-splitter.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileUp, Download, Scissors, Info } from \"lucide-react\";\n\nexport default function AdminCSVSplitter() {\n  const { toast } = useToast();\n  const [csvData, setCsvData] = useState(\"\");\n  const [batches, setBatches] = useState<string[]>([]);\n  const [totalRows, setTotalRows] = useState(0);\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const text = event.target?.result as string;\n        setCsvData(text);\n        \n        const lines = text.trim().split('\\n');\n        const rowCount = lines.length - 1; // Subtract header\n        setTotalRows(rowCount);\n        \n        toast({\n          title: \"File loaded\",\n          description: `${rowCount.toLocaleString()} rows ready to split`,\n        });\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const splitCSV = () => {\n    if (!csvData.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"No CSV data\",\n        description: \"Please upload a CSV file first\",\n      });\n      return;\n    }\n\n    const lines = csvData.trim().split('\\n');\n    const header = lines[0];\n    const dataRows = lines.slice(1);\n    \n    const BATCH_SIZE = 3000;\n    const newBatches: string[] = [];\n    \n    for (let i = 0; i < dataRows.length; i += BATCH_SIZE) {\n      const batchRows = dataRows.slice(i, i + BATCH_SIZE);\n      const batchContent = [header, ...batchRows].join('\\n');\n      newBatches.push(batchContent);\n    }\n    \n    setBatches(newBatches);\n    \n    toast({\n      title: \"CSV split complete\",\n      description: `Created ${newBatches.length} batches of up to ${BATCH_SIZE.toLocaleString()} rows each`,\n    });\n  };\n\n  const downloadBatch = (batchIndex: number) => {\n    const content = batches[batchIndex];\n    const blob = new Blob([content], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `batch-${batchIndex + 1}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Download started\",\n      description: `Batch ${batchIndex + 1} downloaded`,\n    });\n  };\n\n  const downloadAllBatches = () => {\n    batches.forEach((_, index) => {\n      setTimeout(() => downloadBatch(index), index * 500);\n    });\n    \n    toast({\n      title: \"Downloading all batches\",\n      description: `${batches.length} files will download shortly`,\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">CSV Splitter</h1>\n        <p className=\"text-muted-foreground\">\n          Split large CSV files into smaller batches for easier importing\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>How it works:</strong>\n            <br />\n            • Upload your large CSV file (e.g., 10,884 emails)\n            <br />\n            • Click \"Split CSV\" to divide it into batches of 3,000 rows each\n            <br />\n            • Download each batch separately\n            <br />\n            • Import each batch one at a time using the \"Import Clients\" page\n            <br />\n            • Each 3,000-client batch imports in 2-3 minutes reliably\n          </AlertDescription>\n        </Alert>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Large CSV</CardTitle>\n            <CardDescription>\n              Upload your CSV file to split into manageable batches\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Upload CSV File\n              </label>\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={handleFileUpload}\n                className=\"block w-full text-sm text-muted-foreground\n                  file:mr-4 file:py-2 file:px-4\n                  file:rounded-md file:border-0\n                  file:text-sm file:font-semibold\n                  file:bg-primary file:text-primary-foreground\n                  hover:file:bg-primary/90\"\n                data-testid=\"input-file-upload\"\n              />\n              {totalRows > 0 && (\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  <strong>{totalRows.toLocaleString()} rows</strong> loaded and ready to split\n                </p>\n              )}\n            </div>\n\n            {csvData && (\n              <Button\n                onClick={splitCSV}\n                className=\"w-full\"\n                size=\"lg\"\n                data-testid=\"button-split\"\n              >\n                <Scissors className=\"h-4 w-4 mr-2\" />\n                Split CSV into Batches (3,000 rows each)\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        {batches.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Split Results</CardTitle>\n                  <CardDescription>\n                    {batches.length} batches created\n                  </CardDescription>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={downloadAllBatches}\n                  className=\"gap-2\"\n                  data-testid=\"button-download-all\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Download All Batches\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-3\">\n                {batches.map((batch, index) => {\n                  const rowCount = batch.split('\\n').length - 1;\n                  return (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 rounded-md border bg-card hover-elevate\"\n                    >\n                      <div>\n                        <p className=\"font-medium\">\n                          Batch {index + 1}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {rowCount.toLocaleString()} rows\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => downloadBatch(index)}\n                        className=\"gap-2\"\n                        data-testid={`button-download-batch-${index + 1}`}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                        Download\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <Alert className=\"mt-6 border-green-500/50 bg-green-500/10\">\n                <Info className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                <AlertDescription className=\"text-green-800 dark:text-green-200\">\n                  <strong>Next Steps:</strong>\n                  <br />\n                  1. Download each batch file\n                  <br />\n                  2. Go to the \"Import Clients\" page\n                  <br />\n                  3. Import Batch 1, wait for completion\n                  <br />\n                  4. Import Batch 2, wait for completion\n                  <br />\n                  5. Continue until all batches are imported\n                  <br />\n                  <br />\n                  <strong>Each 3,000-client batch will take 2-3 minutes to import.</strong>\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8330},"scripts/import-remaining.ts":{"content":"import fs from 'fs';\nimport bcrypt from 'bcrypt';\nimport { db } from '../server/db';\nimport { users } from '../shared/schema';\n\nasync function importRemaining() {\n  console.log('📧 Reading CSV file...');\n  const fileContent = fs.readFileSync('attached_assets/emails_1761239360120.csv', 'utf-8');\n  \n  const lines = fileContent.split(/\\r?\\n/);\n  const emails: string[] = [];\n  \n  for (const line of lines) {\n    const cleaned = line\n      .replace(/^\\uFEFF/, '')\n      .replace(/^[\"'\\s]+|[\"'\\s,]+$/g, '')\n      .trim();\n    \n    if (!cleaned || !cleaned.includes('@')) continue;\n    emails.push(cleaned.toLowerCase());\n  }\n  \n  const uniqueEmails = Array.from(new Set(emails));\n  console.log(`🔍 ${uniqueEmails.length} unique emails total`);\n  \n  // Get all existing client emails\n  const existingClients = await db.query.users.findMany({\n    where: (users, { eq }) => eq(users.role, 'CLIENT'),\n    columns: { email: true }\n  });\n  \n  const existingEmails = new Set(existingClients.map(c => c.email.toLowerCase()));\n  console.log(`✅ ${existingEmails.size} clients already in database`);\n  \n  // Find missing emails\n  const missingEmails = uniqueEmails.filter(email => !existingEmails.has(email));\n  console.log(`📋 ${missingEmails.length} clients need to be imported`);\n  \n  if (missingEmails.length === 0) {\n    console.log('\\n🎉 All clients already imported!');\n    process.exit(0);\n  }\n  \n  // Import missing emails (using bcrypt rounds=8 for speed)\n  let imported = 0;\n  let failed = 0;\n  \n  console.log(`\\n🚀 Importing ${missingEmails.length} remaining clients...\\n`);\n  \n  for (const email of missingEmails) {\n    try {\n      const username = email.split('@')[0];\n      const passwordHash = await bcrypt.hash(username, 8); // Reduced from 10 to 8 for speed\n      \n      await db.insert(users).values({\n        username,\n        email,\n        passwordHash,\n        role: 'CLIENT',\n        forcePasswordReset: true,\n      });\n      \n      imported++;\n      console.log(`✓ [${imported}/${missingEmails.length}] ${email}`);\n    } catch (error: any) {\n      failed++;\n      console.error(`✗ ${email}: ${error.message}`);\n    }\n  }\n  \n  console.log(`\\n✅ Import complete!`);\n  console.log(`   - Successfully imported: ${imported}`);\n  console.log(`   - Failed: ${failed}`);\n  console.log(`   - Total clients now: ${existingEmails.size + imported}`);\n  \n  process.exit(0);\n}\n\nimportRemaining().catch((error) => {\n  console.error('❌ Import failed:', error);\n  process.exit(1);\n});\n","size_bytes":2498},"scripts/import-clients.ts":{"content":"import fs from 'fs';\nimport bcrypt from 'bcrypt';\nimport { db } from '../server/db';\nimport { users } from '../shared/schema';\n\nasync function importClients() {\n  console.log('📧 Reading CSV file...');\n  const fileContent = fs.readFileSync('attached_assets/emails_1761239360120.csv', 'utf-8');\n  \n  // Split by lines and process\n  const lines = fileContent.split(/\\r?\\n/);\n  console.log(`📝 Found ${lines.length} lines in file`);\n  \n  // Extract emails\n  const emails: string[] = [];\n  const skipped: string[] = [];\n  \n  for (const line of lines) {\n    // Remove BOM, quotes, commas, and whitespace\n    const cleaned = line\n      .replace(/^\\uFEFF/, '') // Remove BOM\n      .replace(/^[\"'\\s]+|[\"'\\s,]+$/g, '') // Remove quotes, commas, whitespace from start/end\n      .trim();\n    \n    // Skip empty lines\n    if (!cleaned) continue;\n    \n    // Must contain @ to be valid email\n    if (!cleaned.includes('@')) {\n      skipped.push(cleaned);\n      continue;\n    }\n    \n    // Skip obvious fake/test emails if needed (optional)\n    const lowerEmail = cleaned.toLowerCase();\n    \n    emails.push(cleaned);\n  }\n  \n  console.log(`✅ Extracted ${emails.length} valid emails`);\n  console.log(`⚠️  Skipped ${skipped.length} invalid entries`);\n  \n  // Remove duplicates (case-insensitive)\n  const uniqueEmails = Array.from(new Set(emails.map(e => e.toLowerCase())));\n  console.log(`🔍 ${uniqueEmails.length} unique emails after deduplication`);\n  \n  // Import in batches\n  const BATCH_SIZE = 100;\n  let imported = 0;\n  let failed = 0;\n  const failedEmails: { email: string; error: string }[] = [];\n  \n  console.log(`\\n🚀 Starting import of ${uniqueEmails.length} clients...\\n`);\n  \n  for (let i = 0; i < uniqueEmails.length; i += BATCH_SIZE) {\n    const batch = uniqueEmails.slice(i, i + BATCH_SIZE);\n    \n    for (const email of batch) {\n      try {\n        const username = email.split('@')[0].toLowerCase();\n        \n        // Skip if invalid email format\n        if (!email.includes('@') || !username) {\n          failed++;\n          failedEmails.push({ email, error: 'Invalid email format' });\n          continue;\n        }\n        \n        // Check if already exists\n        const existing = await db.query.users.findFirst({\n          where: (users, { eq }) => eq(users.email, email)\n        });\n        \n        if (existing) {\n          failed++;\n          failedEmails.push({ email, error: 'Already exists' });\n          continue;\n        }\n        \n        // Hash password (username as initial password)\n        const passwordHash = await bcrypt.hash(username, 10);\n        \n        // Insert user\n        await db.insert(users).values({\n          username,\n          email,\n          passwordHash,\n          role: 'CLIENT',\n          forcePasswordReset: true,\n        });\n        \n        imported++;\n        \n        // Progress update every 100 clients\n        if (imported % 100 === 0) {\n          console.log(`✓ Imported ${imported} / ${uniqueEmails.length} clients...`);\n        }\n      } catch (error: any) {\n        failed++;\n        failedEmails.push({ email, error: error.message });\n      }\n    }\n    \n    // Small delay between batches to avoid overwhelming the database\n    if (i + BATCH_SIZE < uniqueEmails.length) {\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n  \n  console.log(`\\n✅ Import complete!`);\n  console.log(`📊 Results:`);\n  console.log(`   - Total unique emails: ${uniqueEmails.length}`);\n  console.log(`   - Successfully imported: ${imported}`);\n  console.log(`   - Failed: ${failed}`);\n  \n  if (failedEmails.length > 0 && failedEmails.length <= 50) {\n    console.log(`\\n⚠️  Failed emails:`);\n    failedEmails.forEach(({ email, error }) => {\n      console.log(`   - ${email}: ${error}`);\n    });\n  } else if (failedEmails.length > 50) {\n    console.log(`\\n⚠️  ${failedEmails.length} emails failed (too many to display)`);\n  }\n  \n  process.exit(0);\n}\n\nimportClients().catch((error) => {\n  console.error('❌ Import failed:', error);\n  process.exit(1);\n});\n","size_bytes":4039}},"version":2}